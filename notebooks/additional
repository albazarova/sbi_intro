{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0e8bf185",
   "metadata": {},
   "source": [
    "## Inferring behaviour from text-message data\n",
    "\n",
    "Let's try to model a more interesting example, one that concerns the rate at which a user sends and receives text messages:\n",
    "\n",
    ">  You are given a series of daily text-message counts from a user of your system. The data, plotted over time, appears in the chart below. You are curious to know if the user's text-messaging habits have changed over time, either gradually or suddenly. How can you model this? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80e8deaa-163a-4178-b3fa-e73366b99cbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1250x350 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "%matplotlib inline\n",
    "from IPython.core.pylabtools import figsize\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "\n",
    "figsize(12.5, 3.5)\n",
    "count_data = np.loadtxt(\"../data/txtdata.csv\")\n",
    "n_count_data = len(count_data)\n",
    "plt.bar(np.arange(n_count_data), count_data, color=\"#348ABD\")\n",
    "plt.xlabel(\"Time (days)\")\n",
    "plt.ylabel(\"count of text-msgs received\")\n",
    "plt.title(\"Did the user's texting habits change over time?\")\n",
    "plt.xlim(0, n_count_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2ba2707",
   "metadata": {},
   "source": [
    "Poisson random variable would be a very appropriate model for this type of *count* data. Denoting day $i$'s text-message count by $C_i$, \n",
    "\n",
    "$$ C_i \\sim \\text{Poisson}(\\lambda)  $$\n",
    "\n",
    "We are not sure what the value of the $\\lambda$ parameter really is, however. Looking at the chart above, it appears that the rate might become higher late in the observation period, which is equivalent to saying that $\\lambda$ increases at some point during the observations. (Recall that a higher value of $\\lambda$ assigns more probability to larger outcomes. That is, there is a higher probability of many text messages having been sent on a given day.)\n",
    "\n",
    "How can we represent this observation mathematically? Let's assume that on some day during the observation period (call it $\\tau$), the parameter $\\lambda$ suddenly jumps to a higher value. So we really have two $\\lambda$ parameters: one for the period before $\\tau$, and one for the rest of the observation period. In the literature, a sudden transition like this would be called a *change-point*:\n",
    "\n",
    "$$\n",
    "\\lambda = \n",
    "\\begin{cases}\n",
    "\\lambda_1  & \\text{if } t \\lt \\tau \\cr\n",
    "\\lambda_2 & \\text{if } t \\ge \\tau\n",
    "\\end{cases}\n",
    "$$\n",
    "\n",
    "\n",
    "If, in reality, no sudden change occurred and indeed $\\lambda_1 = \\lambda_2$, then the $\\lambda$s posterior distributions should look about equal.\n",
    "\n",
    "We are interested in inferring the unknown $\\lambda$s. To use Bayesian inference, we need to assign prior probabilities to the different possible values of $\\lambda$. What would be good prior probability distributions for $\\lambda_1$ and $\\lambda_2$? Recall that $\\lambda$ can be any positive number. As we saw earlier, the *exponential* distribution provides a continuous density function for positive numbers, so it might be a good choice for modeling $\\lambda_i$. But recall that the exponential distribution takes a parameter of its own, so we'll need to include that parameter in our model. Let's call that parameter $\\alpha$.\n",
    "\n",
    "\\begin{align}\n",
    "&\\lambda_1 \\sim \\text{Exp}( \\alpha ) \\\\\\\n",
    "&\\lambda_2 \\sim \\text{Exp}( \\alpha )\n",
    "\\end{align}\n",
    "\n",
    "$\\alpha$ is called a *hyper-parameter* or *parent variable*. In literal terms, it is a parameter that influences other parameters. Our initial guess at $\\alpha$ does not influence the model too strongly, so we have some flexibility in our choice.  A good rule of thumb is to set the exponential parameter equal to the inverse of the average of the count data. Since we're modeling $\\lambda$ using an exponential distribution, we can use the expected value identity shown earlier to get:\n",
    "\n",
    "$$\\frac{1}{N}\\sum_{i=0}^N \\;C_i \\approx E[\\; \\lambda \\; |\\; \\alpha ] = \\frac{1}{\\alpha}$$ \n",
    "\n",
    "\n",
    "What about $\\tau$? Because of the noisiness of the data, it's difficult to pick out a priori when $\\tau$ might have occurred. Instead, we can assign a *uniform prior belief* to every possible day. This is equivalent to saying\n",
    "\n",
    "\\begin{align}\n",
    "& \\tau \\sim \\text{DiscreteUniform(1,70) }\\\\\\\\\n",
    "& \\Rightarrow P( \\tau = k ) = \\frac{1}{70}\n",
    "\\end{align}\n",
    "\n",
    "Given all the information above combined with the Bayes rule we can rigorously derive overall prior distribution of the parameters as well as the likelihood, however given that this course concentrates more on deploying Bayesian models rather than on mathematical aspects of them we will omit this part in order to save time and turn immediately to PyMC, a Python library for performing Bayesian analysis.\n",
    "\n",
    "\n",
    "The below code for MCMC inference is written in PyMC. Studying PyMC is not within the scope of this course and we use MCMC here exclusively for illustrating purposes and for results comparison. Therefore, we are not discussing the code here.\n",
    "\n",
    "The code below sets up an MCMC sampling method with parameters ($\\tau, \\lambda_1, \\lambda_2$ )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ed01349-b8b8-450e-abb0-1ad076d1605b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install pymc\n",
    "import pymc as pm\n",
    "\n",
    "with pm.Model() as model:\n",
    "    alpha = 1.0/count_data.mean()  # Recall count_data is the\n",
    "                                   # variable that holds our txt counts\n",
    "    lambda_1 = pm.Exponential(\"lambda_1\", alpha)\n",
    "    lambda_2 = pm.Exponential(\"lambda_2\", alpha)\n",
    "    \n",
    "    #tau = pm.DiscreteUniform(\"tau\", lower=0, upper=44)\n",
    "    tau = pm.DiscreteUniform(\"tau\", lower=0, upper=n_count_data-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f1cb17de-3a6f-4539-b9c3-f30640afb1c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "with model:\n",
    "    #idx = np.arange(n_count_data) # Index\n",
    "    idx=np.arange(n_count_data)\n",
    "    lambda_ = pm.math.switch(tau > idx, lambda_1, lambda_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c98c496-6081-454c-b6a2-f49bd217cb60",
   "metadata": {},
   "outputs": [],
   "source": [
    "with model:\n",
    "    observation = pm.Poisson(\"obs\", lambda_, observed=count_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08c5658c-8fce-4c6b-b91f-0162b317f6de",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Multiprocess sampling (4 chains in 4 jobs)\n",
      "CompoundStep\n",
      ">Metropolis: [lambda_1]\n",
      ">Metropolis: [lambda_2]\n",
      ">Metropolis: [tau]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">/p/project/training2405/sc_venv_sbi_local/venv/lib/python3.11/site-packages/rich/live.py:231: UserWarning: install \n",
       "\"ipywidgets\" for Jupyter support\n",
       "  warnings.warn('install \"ipywidgets\" for Jupyter support')\n",
       "</pre>\n"
      ],
      "text/plain": [
       "/p/project/training2405/sc_venv_sbi_local/venv/lib/python3.11/site-packages/rich/live.py:231: UserWarning: install \n",
       "\"ipywidgets\" for Jupyter support\n",
       "  warnings.warn('install \"ipywidgets\" for Jupyter support')\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 4 chains for 5_000 tune and 20_000 draw iterations (20_000 + 80_000 draws total) took 210 seconds.\n",
      "The rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\n",
      "The effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "with model:\n",
    "    step = pm.Metropolis()\n",
    "    trace = pm.sample(20000, tune=5000, step=step,\n",
    "                      return_inferencedata=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28613830",
   "metadata": {},
   "source": [
    "Finally we can extract the results of the MCMC and plot the parameter distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "14174c77-6179-4d0c-ba89-61eb7bfa482c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([17.62177069, 18.1225428 , 18.1225428 , ..., 17.361473  ,\n",
       "       17.361473  , 17.361473  ])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lambda_1_samples = trace['lambda_1']\n",
    "lambda_2_samples = trace['lambda_2']\n",
    "tau_samples = trace['tau']\n",
    "lambda_1_samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5aef06f5-2301-496f-8493-a43ae85149c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1250x1000 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figsize(12.5, 10)\n",
    "#histogram of the samples:\n",
    "\n",
    "ax = plt.subplot(311)\n",
    "ax.set_autoscaley_on(False)\n",
    "bins = np.linspace(15, 20, 31)\n",
    "\n",
    "plt.hist(lambda_1_samples, histtype='stepfilled',\n",
    "          bins=bins, alpha=0.85, \n",
    "          label=\"posterior of $\\lambda_1$\", color=\"#A60628\", density=True)\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.title(r\"\"\"Posterior distributions of the variables\n",
    "    $\\lambda_1,\\;\\lambda_2,\\;\\tau$\"\"\")\n",
    "plt.xlim([15, 30])\n",
    "plt.xlabel(\"$\\lambda_1$ value\")\n",
    "\n",
    "ax = plt.subplot(312)\n",
    "ax.set_autoscaley_on(False)\n",
    "plt.hist(lambda_2_samples, histtype='stepfilled', bins=30, alpha=0.85,\n",
    "         label=\"posterior of $\\lambda_2$\", color=\"#7A68A6\", density=True)\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.xlim([15, 30])\n",
    "plt.xlabel(\"$\\lambda_2$ value\")\n",
    "\n",
    "plt.subplot(313)\n",
    "w = 1.0 / tau_samples.shape[0] * np.ones_like(tau_samples)\n",
    "plt.hist(tau_samples, bins=n_count_data, alpha=1,\n",
    "         label=r\"posterior of $\\tau$\",\n",
    "         color=\"#467821\", weights=w, rwidth=2.)\n",
    "plt.xticks(np.arange(n_count_data))\n",
    "\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.ylim([0, .75])\n",
    "plt.xlim([35, len(count_data)-20])\n",
    "plt.xlabel(r\"$\\tau$ (in days)\")\n",
    "plt.ylabel(\"probability\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c99330a7",
   "metadata": {},
   "source": [
    "Let us now visualise the average number of text messages expected on a certain day. In the code below, let $i$ index samples from the posterior distributions. Given a day $t$, we average over all possible $\\lambda_i$ for that day $t$, using $\\lambda_i = \\lambda_{1,i}$ if $t \\lt \\tau_i$ (that is, if the behaviour change has not yet occurred), else we use $\\lambda_i = \\lambda_{2,i}$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26735cc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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njXr1683/v7+pn79+o738PLlyym2uX79euPp6WlatWrlqBsZGWmMMSYqKsoEBQWZ4sWLmw8++MB8//335qWXXjJ2u9306NHD0caJEydM0aJFTd26dU18fLwxxpju3bsbT09Ps3PnTmOMMUePHjVPPfWUkWTmz5/v6Ovs2bMpxpWkYcOGpkCBAqZcuXLm448/NsuWLTNt2rQxksyYMWNMlSpVzOeff24WL15s7r77bmO3282xY8cc+6d2zIaHhxtXV1czevRos2LFCrN06VIzefJkS53mzZubQoUKmalTp5pVq1aZBQsWmBdffNHMmTPHUWfKlCkmPDzcfPvtt2b16tVm5syZplq1aqZcuXKOY2OMMUuWLDEuLi6mUaNG5uuvvzZffvmlqVu3rilRooS58U+7xx9/3Li5uZmnn37aLF261MyePduUL1/e+Pn5mejoaGOMMRcuXDAFChQwtWvXNl988YVZvXq1mTt3runbt6/ZvXv3vx7j/Pnzm6CgIPP222+blStXmtWrV5uLFy+a6tWrm4IFC5pJkyaZ77//3rz55psmT5485r777jOJiYmONh577DFjs9lMnz59zDfffGOWLFlixo8fb958801HnfHjxxubzWZ69eplFi1aZObPn2/q1atnvL29HWPOmH9+V5N88803RpKJiIiwxL1nzx4jybz11ltOHavr++jdu7dZsmSJmTp1qilSpIjx9/c3DRs2vOXxAoA7CckCAMgCkk78Unq4urpa6l6+fNnUqFHDBAcHm927dxs/Pz/TsGFDy0li0olwYGCguXTpkqP83LlzJn/+/KZp06aOsubNm5uiRYsmO/F68sknjYeHhzl16pQxxpixY8em+Ef39f76669kJ9rO9vPss88am81mtm/fbqkXGhrqVLJg4sSJlvL+/fsbDw8Px0nK7SQLXn/9dUu96tWrO05gk1y5csUUKlTIdOjQwVGWlCyoWbOm5STp0KFDxs3NzfTp08dRVr58eVOjRg1z5coVS19t2rQxAQEBJiEhwRjzz5jp1q3bLY9HkhEjRhhJ5ueff7aU9+vXz9hsNrNv3z5HWfHixU3r1q1T1a63t7fp3r17svInnnjC5M6d2xw+fNhS/tprrxlJlhO8n376yeTKlcsMHjzYTJs2zUgyH330kWW/V1991UgyBw8eTFVcxlw7kZVkNm/e7Cg7efKkcXV1NZ6enpbEwPbt25OdPKZ2zLZp08ZUr179lrHkzp3bDB48ONWxJyYmmitXrpjDhw8bSeabb75xbLvrrrtMUFCQiYuLc5SdP3/eFChQwHKivH79+hTH7dGjR42np6cZPny4McaYzZs3G0lmwYIFqY4vSdIxXrFihaU8PDzcuLi4OJKaSb766isjySxevNgYY8yaNWuMJPP888/ftI8jR46YXLlymaeeespSfv78eePv7286duzoKLsxWXDlyhXj5+dnOnfubNl3+PDhxt3d3Zw4ccIYk/pjdfr0aePh4WHat29vqbd27VojiWQBgGyFyxAAIAuZNWuWNm3aZHn8/PPPljp2u11ffPGFTp48qZo1a8oYo88//1yurq7J2uvQoYM8PDwcz318fNS2bVutWbNGCQkJunz5slasWKH27dvLy8tLV69edTxatWqly5cva8OGDZKkJUuWqGzZsmratKnTr8uZflauXKlKlSqpWrVqljY6d+7sVJ/333+/5XnVqlV1+fJlxcTEOB1/kjZt2lieV6hQQTabTS1btnSU5cqVS6VLl9bhw4eT7d+5c2fLFOnixYsrJCREK1eulCT9/vvv2rt3r7p06SJJyY5TVFSU9u3bZ2nzwQcfTFXsP/zwgypWrKg6depYynv06CFjjH744YdUtZNaixYtUuPGjRUYGGh5HUnHavXq1Y669evX1/jx4zV58mT169dPXbt2Ve/evVPVT2JioqX9hIQEy/aAgADVqlXL8Tx//vwqXLiwqlevrsDAQEd5hQoVJMnxvjkzZuvUqaMdO3aof//+WrZsmc6dO5cszjp16mjGjBkaN26cNmzYoCtXriSrExMTo759+yooKEi5cuWSm5ubihcvLknas2ePJOnixYvavHmzHnjgAbm7uzv2zZ07t9q2bWtpb9GiRbLZbOrataslfn9/f1WrVs1xGUfp0qWVL18+Pfvss3r//fe1e/fuVB37JPny5dN9992XrO/KlSurevXqlr6bN29uuYQkafr+gAEDbtr+smXLdPXqVXXr1s3SloeHhxo2bHjLy1Fy5cqlrl27av78+Y7LkBISEvTJJ5+oXbt2KlCggFPHav369bp8+bLjdzRJSEiI470CgOyCZAEAZCEVKlRQ7dq1LY/rT3SSlC5dWg0aNHD80Xqz1er9/f1TLIuPj9eFCxd08uRJXb16VW+/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bSVKlNC8efM0a9Ysy3G/XlhYmGbOnKlvvvlGNptNNptNq1at+tc49+7dKy8vL82ePdvR1vz58+Xh4aFdu3bdst0bJY3BZcuWqUaNGvL09NR9992nmJgYLVmyRBUqVJCvr686deqk2NhYx37/Nn5Onz6tLl26qFChQvL09FSZMmU0ffp0SdcSME8++aQCAgLk4eGhEiVKKDw83LHvpEmTVKVKFXl7eysoKEj9+/fXhQsXLHF/+OGHjluttm/fXpMmTUo2rhYuXKhatWrJw8NDJUuW1JgxY3T16lXL8S9WrJjsdrsCAwP1wrNPp3iMJOn1l8epWYO6mvPpTJUsWVJ2u13GGJ09e1b/+9//VLhwYfn6+uq+++7Tjh07LPt+++23ql27tjw8PFSwYEF16NDBsS0+Pl7Dhw9XkSJF5O3trbp161req+t/X/bt2yebzaa9e/da2p80aZJKlCjh+JzZvXu3WrVqpdy5c8vPz0+PPfaYTpw44ah/8eJFdevWTblz51ZAQIBef/31m75uAAAAZD6SBXegUaNGafr06ZoyZYoiIyM1ZMgQde3aVatXr5bNZtPMmTO1ceNGvfXWW5Kkvn37ys/PT2FhYZZ2nnnmGb322mvatGmTChcurPvvv19XrlyRJO3atUvNmzdXhw4dtHPnTs2dO1c//fSTnnzyScf+3bp105w5c/TWW29pz549ev/995U7d24FBQVp3rx5kq6daERFRenNN9/819gl6ejRo+rQoYNatWql7du3q0+fPhoxYkSqjsuYMWPUsWNH7dy5U61atVKXLl106tQpp47t/v37tWTJEi1dulSff/65pk2bptatW+uPP/7Q6tWr9corr2jUqFHasGGDZb8XXnhBDz74oHbs2KGuXbuqU6dO2rNnjyQpNjZWjRs3Vu7cubVmzRr99NNPyp07t1q0aKH4+HhHGytWrNCePXsUERGhRYsWpRjf119/rUGDBunpp5/WL7/8oieeeEI9e/bUypUrJUmbNm1SixYt1LFjR8txv96wYcPUsWNHtWjRQlFRUYqKilJISMi/xlm+fHm99tpr6t+/vw4fPqw///xTjz/+uF5++WVVqVLlpu3eSlhYmN555x2tW7dOR48eVceOHTV58mTNnj1b3333nSIiIvT222876v/b+HnhhRe0e/duLVmyRHv27NGUKVNUsGBBSdJbb72lb7/9Vl988YX27dunTz/9VCVKlHC07eLiorfeeku//PKLZs6cqR9++EHDhw93bF+7dq369u2rQYMGafv27QoNDU2WOFq2bJm6du2qgQMHavfu3frggw80Y8YMR72vvvpKb7zxhj744AP99ttvWrBggcpXrHTLY3To4AEtXDBP8+bN0/bt2yVJrVu3VnR0tBYvXqwtW7aoZs2aatKkiWO8f/fdd+rQoYNat26tbdu2acWKFapdu7ajzZ49e2rt2rWaM2eOdu7cqYcfflgtWrTQb7/9lqz/cuXKqVatWvrss88s5bNnz1bnzp1ls9kUFRWlhg0bqnr16tq8ebOWLl2q48ePq2PHjo76zzzzjFauXKmvv/5ay5cv16pVq7Rly5ZbvnYAAABkIpPNnT171kgyZ8+eTbbt0qVLZvfu3ebSpUvGGGOih/YwR1rVyrRH9NAe//p6Lly4YDw8PMy6dess5b179zadOnVyPP/iiy+M3W43I0eONF5eXmbfvn2ObStXrjSSzJw5cxxlJ0+eNJ6enmbu3LnGGGMee+wx87///c/Sx48//mhcXFzMpUuXzL59+4wkExERkWKcSX2cPn3aqdhHjhxpKlSoYBITEx3bn3322WRt3UiSGTVqlKUvm81mlixZYowxZvr06SZPnjyWfb7++mtz/a/A6NGjjZeXlzl37pyjrHnz5qZEiRImISHBUVauXDkTHh5u6btv376WtuvWrWv69etnjDHm448/NuXKlbO8pri4OOPp6WmWLVtmjDGme/fuxs/Pz8TFxd30NRpjTEhIiHn88cctZQ8//LBp1aqV43m7du1M9+7db9lO9+7dTbt27SxlqYnTGGNat25tGjRoYJo0aWJCQ0Mt9VNqNyVJ4+P77793lIWHhxtJZv/+/Y6yJ554wjRv3twYk7rx07ZtW9OzZ88U+3zqqafMfffdZ4n3Vr744gtToEABx/NHHnnEtG7d2lKnS5culnHVoEEDM2HCBEudTz75xAQEBBhjjHn99ddN2bJlTXx8vGP7H6djb/oY8uxzxs3Nzez47bCj/ooVK4yvr6+5fPmypZ9SpUqZDz74wBhjTL169UyXLl1SfF2///67sdls5tixY5byJk2amJEjRxpjkv++TJo0yZQsWdLxPOn3PzIy0hhjzAsvvGCaNWtmae/o0aNGktm3b585f/68cXd3T/EzZ9CgQSnGaUzyz2gAaev5hb+k6gEAyF5udY58PdYsuMPs3r1bly9fVmhoqKU8Pj5eNWrUcDx/+OGH9fXXXys8PFxTpkxJcVp7vXr1HD/nz59f5cqVc3wbvmXLFv3++++WbxONMUpMTNTBgwe1a9cuubq6qmHDhmka+549e3T33XdbLg+4Ps5bqVq1quNnb29v+fj4KCYmJtXxSdem8fv4+Die+/n5ydXVVS4uLpayG9u9McZ69eo5vgVOOpbXt2skXb58WVt27VGlOg0UG5+gshUq6a/YBCn2kqNekbzW68b37Nmj//3vf5ay+vXrpziDwFkpxam/49y//59LZKZNm6ayZcvKxcVFv/zyi+W9SknLli31448/SpKKFy+uyMhIx7br3zM/Pz95eXmpZMmSlrKNGzdKSt346devnx588EFt3bpVzZo10wMPPOCY3dCjRw+FhoaqXLlyatGihdq0aaNmzZo52lm5cqUmTJig3bt369y5c7p69aouX76sixcvytvbW/v27VP79u0tfdepU8cyC2TLli3atGmTZcZBQkKCLl++rNjYWD388MOaPHmySpYsqRYtWqhVq1aq2aCpcuW6+UdxkaBiKlCwkKWPCxcuqECBApZ6ly5dcrxP27dv1+OPP55ie1u3bpUxJtlnQlxcXLI2kzz66KN65plntGHDBt1999367LPPVL16dVWsWNER08qVK5U7d+5k++7fv1+XLl1SfHx8ip85AAAAyJpIFlzHrXipLN9/YmKipGvTjIsUKWLZZrfbHT/HxsZqy5YtcnV1TXFq8c0knfglJibqiSee0MCBA5PVKVasmH7//fdUt+lM7Obv659vx40Lv9lsNkefLi4uydpOuuTi39q4Vbu3cv2xvHEad/S5y5KkAgUKOsq8vLz+tc3r201ijPnXE/bUSCnOJIUK/XOyumPHDl28eFEuLi6Kjo5WYGDgLdv96KOPdOnStQTIjcfy+uf/dqxTM35atmypw4cP67vvvtP333+vJk2aaMCAAXrttddUs2ZNHTx4UEuWLNH333+vjh07qmnTpvrqq690+PBhtWrVSn379tVLL72k/Pnz66efflLv3r0d4ySl43zjmEpMTNSYMWMs6wMk8fDwUFBQkPbt26eIiAh9//336t+/v4oEFddX3y2/6cKFN46LxMREBQQEpLgeRNI6A7danDAxMVGurq6Oz4frpXSyL0kBAQFq3LixZs+erbvvvluff/65nnjiCUubbdu21SuvvJLivs58BgEAACBrIFlwnTvhTgQVK1aU3W7XkSNHbvmt/tNPPy0XFxctWbJErVq1UuvWrXXfffdZ6mzYsEHFihWTdG1huF9//VXly5eXJNWsWVORkZEqXbp0iu1XqVJFiYmJWr16tZo2bZpse9JK/gkJCU7FXrFiRS1YsCBZnP9VoUKFdP78ece3xJIc3/ynhQ0bNqhbt26W50nfdtesWVNz5851LEYnSZ5nLqXYzr+pUKGCfvrpJ0tf69atU4UKFZxqx93d3fLe3CzOG506dUo9evTQ888/r+joaHXp0kVbt251nJym1O6NJ/a3K7Vjv1ChQurRo4d69OihBg0aONbmkCRfX1898sgjeuSRR/TQQw+pRYsWOnXqlDZv3qyrV6/q9ddfd8wi+eKLLyztli9f3jHLIcnmzZstz2vWrKl9+/bd9PdGunYif//99+v+++/XgAEDVL58ee3d/YuqVKtx031u7CM6Olq5cuWyrLlwvapVq2rFihXq2bNnsm01atRQQkKCYmJi1KBBg1T1KUldunTRs88+q06dOmn//v169NFHLTHNmzdPJUqUSHGWROnSpeXm5pbiZ44zs5MAAACQcVjg8A7j4+OjYcOGaciQIZo5c6b279+vbdu26d1339XMmTMlXfvmddq0afrss88UGhqqESNGqHv37jp9+rSlrbFjx2rFihX65Zdf1KNHDxUsWFAPPPCAJOnZZ5/V+vXrNWDAAG3fvl2//fabvv32Wz311FOSrk3X7969u3r16qUFCxbo4MGDWrVqleMEq3jx4rLZbFq0aJH++usvXbhwIVWx9+3bV/v379fQoUO1b98+zZ49WzNmzPjPx61u3bry8vLSc889p99//z3N2k3y5Zdfatq0afr11181evRobdy40bEYZJcuXVSwYEG1a9dOP/74ow4ePKj1a3/UiyOG6c9jfzjVzzPPPKMZM2bo/fff12+//aZJkyZp/vz5GjZsmFPtlChRQjt37tS+fft04sQJXblyJcU4V69erUGDBumPP67F2bdvXwUFBWnUqFGaNGmSjDGWvlNqN62kZvy8+OKL+uabb/T7778rMjJSixYtciRS3njjDc2ZM0d79+7Vr7/+qi+//FL+/v7KmzevSpUqpatXr+rtt9/W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S5fq+PHj6tixo6X9mTNnKleuXFq7dq0++OADdenSRd9++60uXLjgqLNs2TJdvHhRDz74oCRp1KhRmj59uqZMmaLIyEgNGTJEXbt21erVqyVJR48eVYcOHdSqVStt375dffr00YgRI255PJISJdOnT1dUVJTj+bJly9S1a1cNHDhQu3fv1gcffKAZM2Zo/PjxkqTnn39eJUqUUJ8+fSRJ77//vtasWaNPPvlELi4uN223S5cuKlq0qDZt2qQtW7ZoxIgRcnNzu2WML7zwgh588EHt2LFDXbt21YA+3fXbvr2SpEuxsep4f0t5eXvrq++W6+sl38vLO7e6PtTOMoNgxYoV2rNnjyIiIrRo0aIU+/niiy80evRojR8/Xps3b1ZAQIDee+89S53z58+re/fu+vHHH7VhwwaVKVNGrVq10vnz5yVJffr00dKlSxUVFeXYZ/Hixbpw4UKyMQAAAAAge7IZY0xmB5Gezp07pzx58ujs2bPy9fW1bLt8+bIOHjyo4OBgeXh4WLZl1QUOL168qHz58mnGjBnq3LmzpGvf3pcoUUKDBw/WM88841gQcM6cOXrkkUckSadOnVLRokU1Y8YMdezYUVWrVtWDDz6o0aNHJ+vjxRdf1M8//6xly5Y5yv744w8FBQVp3759Klu2rBo1aqSzZ89q27ZtjjpXrlxRYGCgJk2apMcee0yS1LlzZ129elVffPGFLl68qIIFC+qHH35QvXr1HPv16dNHsbGxmj17tp577jktWLBAkZGRstlskqQRI0bolVdeueUChzabTV9//bUeeOABR9m9996rli1bauTIkY6yTz/9VMOHD9eff/4pSTpw4ICqV6+u/v376+2339bUqVPVpUuXW7br6+urt99+W927d7/le3V9G3379tWUKVMcZTXvqqMqVatrwutvas6nMzXlrTe06udtjtccHx+viiUC9M2CBWrWrJl69OihpUuX6siRI3J3d79pXyEhIapWrZqlr7vvvluXL1++6QKHCQkJypcvn2bPnu2YUVCpUiV1795dw4cPl3RtdkXevHkdM0SQdo6duZSqekXyeqZzJFnPrT6jAfx3qf1bJ60XYgYAZK5bnSNfj5kFd5j9+/frypUrql+/vqPMzc1NderU0Z49eyx1rz8hz58/v8qVK+eoM3DgQI0bN07169fX6NGjtXPnTkfdLVu2aOXKlcqdO7fjUb58eUf/SWrXrm3pz83NTQ8//LA+++wzSdcSG998843j5Hv37t26fPmyQkNDLW3PmjXL0e6ePXt09913O06ab3wdztiyZYvGjh1r6evxxx9XVFSUYmNjJUklS5bUa6+9pldeeUVt27a1JApuZujQoerTp4+aNm2ql19+2XJMbubG11Drrrr67dd9kqRd27fp0IH9KhdUWGWLFlLZooVUuWQRxV2+bGm7SpUqt0wUSNeO34193fg8JiZGffv2VdmyZZUnTx7lyZNHFy5c0JEjRxx1+vTp40gMxMTE6LvvvlOvXr3+9XUCAAAAyB64deIdJmkiyPUn00nlN5alJKlOnz591Lx5c3333Xdavny5wsPD9frrr+upp55SYmKi2rZtq1deeSXZ/gEBAY6fvb29k23v0qWLGjZsqJiYGEVERMjDw0MtW7aUJCUmJkqSvvvuOxUpUsSyn91ut7y+tJCYmKgxY8aoQ4cOybZd/y3lmjVr5OrqqkOHDunq1avKlevWvxZhYWHq3LmzvvvuOy1ZskSjR4/WnDlz1L59e6fiS3ovEhMTVaV6Db09Nfm39lVKBTl+Tul4344ePXror7/+0uTJk1W8eHHZ7XbVq1fPcslDt27dNGLECK1fv17r169XiRIl1KBBgzTpHwAAAEDWx8yCO0zp0qXl7u6un376yVF25coVbd68WRUqVLDU3bBhg+Pn06dP69dff3XMEJCkoKAg9e3bV/Pnz9fTTz+tDz/8UJJUs2ZNRUZGqkSJEipdurTl8W8nrCEhIQoKCtLcuXP12Wef6eGHH3Z8G16xYkXZ7XYdOXIkWbtBQUGOOtfHfePruBk3NzclJCRYymrWrKl9+/Yl66t06dJycbk29OfOnav58+dr1apVOnr0qF566aV/bVeSypYtqyFDhmj58uXq0KHDv07Pv/E1bN28UaXLXFuksHK16jq4f78KFiyk4JKlLI88efL862u/XoUKFf71+P34448aOHCgWrVqpUqVKslut1sWr5SkAgUK6IEHHtD06dM1ffp09ezZ06k4AAAAANzZSBbcYby9vdWvXz8988wzWrp0qXbv3q3HH39csbGx6t27t6Xu2LFjtWLFCv3yyy/q0aOHChYs6Lj2fvDgwVq2bJkOHjyorVu36ocffnAkGwYMGKBTp06pU6dO2rhxow4cOKDly5erV69e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PDI4MgDAncjpZMHq1atVpUoV/fzzz5o3b54uXLggSdq5c6dGj075tjw3s3TpUvXo0UOVKlVStWrVNH36dB05ckRbtmyRdC07PnnyZD3//PPq0KGDKleurJkzZyo2NlazZ892NnQAAIBsKeHcGf31wpO6uHheittdfPKo0Jg35Zo3fwZHBgC4UzmdLBgxYoTGjRuniIgIubu7O8obN26s9evX/6dgzp69tlpv/vzX/iE7ePCgoqOj1axZM0cdu92uhg0bat26dSm2ERcXp3PnzlkeAAAA2dWVIwcVM7SH4nZuTrlCLjcVHPWa3IqWyNC4AAB3NqfvhrBr164Uv9UvVKiQTp48eduBGGM0dOhQ3XPPPapcubIkKTo6WpLk5+dnqevn56fDhw+n2E54eLjGjBlz23EAAHC91K6WzkrpyAyXNq/TyVdGysReTLmCzaYCQ8Nkr1wjQ+PCnYXPOQApcXpmQd68eRUVFZWsfNu2bSpSpMhtB/Lkk09q586d+vzzz5Nts9lslufGmGRlSUaOHKmzZ886HkePHr3tmAAAALIiY4zOL5itE2MG3zRRYLN7qMDIV+TVsHkGRwcAyA6cnlnQuXNnPfvss/ryyy9ls9mUmJiotWvXatiwYerWrdttBfHUU0/p22+/1Zo1a1S0aFFHub+/v6RrMwwCAgIc5TExMclmGySx2+2y2+23FQcAAEBWZ65c0ekpr+jisgU3reNayE8FX5gk91LlMi4wAEC24vTMgvHjx6tYsWIqUqSILly4oIoVK+ree+9VSEiIRo0a5VRbxhg9+eSTmj9/vn744QcFBwdbtgcHB8vf318RERGOsvj4eK1evVohISHOhg4AAHBHSzh7Rn+NGnDLRIF7+SrymzSTRAEA4D9xemaBm5ubPvvsM40dO1bbtm1TYmKiatSooTJlyjjd+YABAzR79mx988038vHxcaxRkCdPHnl6espms2nw4MGaMGGCypQpozJlymjChAny8vJS586dne4PAADgTnXl8H79NWaoEo4fu2kdr/taKf9Tz8vmzixLAMB/43SyIEmpUqVUsmRJScnXFEitKVOmSJIaNWpkKZ8+fbp69OghSRo+fLguXbqk/v376/Tp06pbt66WL18uHx+f2w0dAADgjnJp4486OXGUzKWbL2SYp/sA+TzU/bb/LgMA4HpOX4YgSR9//LEqV64s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onx9ffXVV19Z2l24cKG8vb11/vz5jH5JAABAJAsAAEAau++++1StWjXNnz9fkuTi4qK33npLv/zyi2bOnKkffvhBw4cPlyR5e3vr0Ucf1fTp0y1tTJ8+XQ899JB8fHwyPH4AACDZjDEms4MAAAB3nh49eujMmTNasGBBsm2PPvqodu7cqd27dyfb9uWXX6pfv346ceKEJGnjxo0KCQnRkSNHFBgYqBMnTigwMFARERFq2LBher8MAACQAmYWAACANGeMkc1mkyStXLlSoaGhKlKkiHx8fNStWzedPHlSFy9elCTVqVNHlSpV0qxZsyRJn3zyiYoVK6Z777030+IHACCnI1kAAADS3J49exQcHKzDhw+rVatWqly5subNm6ctW7bo3XfflSRduXLFUb9Pnz6OSxGmT5+unj17OpINAAAg45EsAAAAaeqHH37Qrl279OCDD2rz5s26evWqXn/9dd19990qW7as/vzzz2T7dO3aVUeOHNFbb72lyMhIde/ePRMiBwAASXJldgAAAODOFRcXp+joaCUkJOj48eNaunSpwsPD1aZNG3Xr1k27du3S1atX9fbbb6tt27Zau3at3n///WTt5MuXTx06dNAzzzyjZs2aqWjRopnwagAAQBJmFgAAgNu2dOlSBQQEqESJEmrRooVWrlypt956S998841cXV1VvXp1TZo0Sa+88ooqV66szz77TOHh4Sm21bt3b8XHx6tXr14Z/CoAAMCNuBsCAADIEj777DMNGjRIf/75p9zd3TM7HAAAcjQuQwAAAJkqNjZWBw8eVHh4uJ544gkSBQAAZAFchgAAADLVxIkTVb16dfn5+WnkyJGZHQ4AABCXIQAAAAAAgBswswAAAAAAAFiQLAAAAAAAABYkCwAAAAAAgAXJAgAAAAAAYEGyAAAAAAAAWJAsAAAAAAAAFiQLAAAAAACABckCAAAAAABg8X/4atfIoF5GnAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1250x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figsize(12.5, 5)\n",
    "# tau_samples, lambda_1_samples, lambda_2_samples contain\n",
    "# N samples from the corresponding posterior distribution\n",
    "N = tau_samples.shape[0]\n",
    "expected_texts_per_day = np.zeros(n_count_data)\n",
    "for day in range(0, n_count_data):\n",
    "    # ix is a bool index of all tau samples corresponding to\n",
    "    # the switchpoint occurring prior to value of 'day'\n",
    "    ix = day < tau_samples\n",
    "    # Each posterior sample corresponds to a value for tau.\n",
    "    # for each day, that value of tau indicates whether we're \"before\"\n",
    "    # (in the lambda1 \"regime\") or\n",
    "    #  \"after\" (in the lambda2 \"regime\") the switchpoint.\n",
    "    # by taking the posterior sample of lambda1/2 accordingly, we can average\n",
    "    # over all samples to get an expected value for lambda on that day.\n",
    "    # As explained, the \"message count\" random variable is Poisson distributed,\n",
    "    # and therefore lambda (the poisson parameter) is the expected value of\n",
    "    # \"message count\".\n",
    "    expected_texts_per_day[day] = (lambda_1_samples[ix].sum()\n",
    "                                   + lambda_2_samples[~ix].sum()) / N\n",
    "\n",
    "\n",
    "plt.plot(range(n_count_data), expected_texts_per_day, lw=4, color=\"#E24A33\",\n",
    "         label=\"expected number of text-messages received\")\n",
    "plt.xlim(0, n_count_data)\n",
    "plt.xlabel(\"Day\")\n",
    "plt.ylabel(\"Expected # text-messages\")\n",
    "plt.title(\"Expected number of text-messages received\")\n",
    "plt.ylim(0, 60)\n",
    "plt.bar(np.arange(len(count_data)), count_data, color=\"#348ABD\", alpha=0.65,\n",
    "        label=\"observed texts per day\")\n",
    "\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea695ef",
   "metadata": {},
   "source": [
    "### Putting the model into SBI framework\n",
    "\n",
    "Firstly we would need to write down a simulator function dependent on the parameters from the above: $(\\tau,\\lambda_1,\\lambda_2)$. We fix the parameter $\\alpha=\\frac1{20}$, and as for the priors, we keep them to be as before using function `MultipleIndependent` to combine different probability distributions.\n",
    "\n",
    "Note, that all the distributions either need to belong to `sbi` package or `torch.distributions`, and the parameters of the distributions have to be defined as `torch.Tensors`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df107a4c-24ac-420b-b091-34a17b9b0b87",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/p/software/jusuf/stages/2024/software/tqdm/4.66.1-GCCcore-12.3.0/lib/python3.11/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n",
      "2024-05-29 09:47:52,924\tINFO util.py:154 -- Missing packages: ['ipywidgets']. Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from sbi.utils import MultipleIndependent\n",
    "from sbi import utils as utils\n",
    "from sbi import analysis as analysis\n",
    "from sbi.inference import infer\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "\n",
    "\n",
    "\n",
    "def simulator(params):\n",
    "        data = np.r_[stats.poisson.rvs(mu=params[0], size=int(params[2])), stats.poisson.rvs(mu=params[1], size=74 - int(params[2]))]\n",
    "        return data\n",
    "    \n",
    "\n",
    "alpha=1./20.    \n",
    "prior=MultipleIndependent(\n",
    "    [\n",
    "        torch.distributions.Exponential(rate=torch.ones(1)*0.05),\n",
    "        torch.distributions.Exponential(rate=torch.ones(1)*0.05),\n",
    "        torch.distributions.Uniform(low=torch.Tensor([30]),high=torch.Tensor([60]))\n",
    "    ]\n",
    ")\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad7c46fc-5492-44f4-900f-642008837217",
   "metadata": {},
   "source": [
    "Let us infer the variable `posterior` which is going to correspond to posterior distribution in case we use SNPE method. One can replace SNPE by SNRE and observe that the training runs way faster. However, sampling from the posterior would take way more time since it actually requires calling the sampling algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "846ac8d4-4127-44b2-8276-ca111090c375",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Running 10000 simulations.: 100%|██████████| 10000/10000 [00:01<00:00, 5395.19it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Neural network successfully converged after 111 epochs."
     ]
    }
   ],
   "source": [
    "%%time\n",
    "posterior = infer(simulator, prior, method=\"SNPE\", num_simulations=10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e94634a0",
   "metadata": {},
   "source": [
    "Use the above observation to sample from the posterior distribution. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2c619c6-b4ef-4ef4-aca8-55e3932ab54e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Drawing 10000 posterior samples: 10017it [00:14, 675.52it/s]                          \n"
     ]
    }
   ],
   "source": [
    "observation=np.loadtxt(\"../data/txtdata.csv\")\n",
    "\n",
    "#observation=observation\n",
    "samples = posterior.sample((10000,), x=observation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09903d5c",
   "metadata": {},
   "source": [
    "Plot the distributions of the parameters $\\lambda_1$, $\\lambda_2$, $\\tau$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37644111-9a5b-4b56-a62c-50ac00d79e4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_9636/263924401.py:4: DeprecationWarning: **kwargs are deprecated, use fig_kwargs instead. \n",
      "               Calling the to be deprecated pairplot function\n",
      "  fig, out = pairplot(samples, limits=[[0,30],[0,30],[0,70]], fig_size=(3,3), upper='kde', diag='kde')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "from sbi.analysis.plot import pairplot\n",
    "\n",
    "fig, out = pairplot(samples, limits=[[0,30],[0,30],[0,70]], fig_kwargs={'fig_size':(3,3)}, upper='kde', diag='kde')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8c7013f",
   "metadata": {},
   "source": [
    "Clearly, the results of the above inference look very different from what we have obtained previsously with an MCMC method. As previously, we visualise the expected number of text messages a day and display it on a graph. We see that the above inference has certain grounds too, especially given the absence of ground truth in this case. However, this raises a question of whether the prior we chose for the SBI model was good enough and whether the number of simulation was sufficient."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1065f601",
   "metadata": {},
   "source": [
    "Note that in all cases here we were using the amortized neural inference, meaning that we used exclusively simulations to build up an approximation for posterior/likelihood/likelihood ratio. This means that we can easily run inference on a different observation and get different values of the parameters without re-running the whole inference. On the other hand, we are obviously not restricted to feeding only one observation to our inference. Therefore, we can run inference on arbitrarily many available observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38a7973d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x14cc9b605910>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1250x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "figsize(12.5, 5)\n",
    "# tau_samples, lambda_1_samples, lambda_2_samples contain\n",
    "# N samples from the corresponding posterior distribution\n",
    "N = samples.shape[0]\n",
    "expected_texts_per_day = np.zeros(n_count_data)\n",
    "for day in range(0, n_count_data):\n",
    "    # ix is a bool index of all tau samples corresponding to\n",
    "    # the switchpoint occurring prior to value of 'day'\n",
    "    ix = day < samples[:,2]\n",
    "    # Each posterior sample corresponds to a value for tau.\n",
    "    # for each day, that value of tau indicates whether we're \"before\"\n",
    "    # (in the lambda1 \"regime\") or\n",
    "    #  \"after\" (in the lambda2 \"regime\") the switchpoint.\n",
    "    # by taking the posterior sample of lambda1/2 accordingly, we can average\n",
    "    # over all samples to get an expected value for lambda on that day.\n",
    "    # As explained, the \"message count\" random variable is Poisson distributed,\n",
    "    # and therefore lambda (the poisson parameter) is the expected value of\n",
    "    # \"message count\".\n",
    "    expected_texts_per_day[day] = (samples[ix,0].sum()\n",
    "                                   + samples[~ix,1].sum()) / N\n",
    "\n",
    "\n",
    "plt.plot(range(n_count_data), expected_texts_per_day, lw=4, color=\"#E24A33\",\n",
    "         label=\"expected number of text-messages received\")\n",
    "plt.xlim(0, n_count_data)\n",
    "plt.xlabel(\"Day\")\n",
    "plt.ylabel(\"Expected # text-messages\")\n",
    "plt.title(\"Expected number of text-messages received\")\n",
    "plt.ylim(0, 60)\n",
    "plt.bar(np.arange(len(count_data)), count_data, color=\"#348ABD\", alpha=0.65,\n",
    "        label=\"observed texts per day\")\n",
    "\n",
    "plt.legend(loc=\"upper left\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a12f232",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymc as pm\n",
    "import numpy as np\n",
    "import arviz as az\n",
    "from scipy.integrate import odeint\n",
    "import pytensor.tensor as pt\n",
    "from pymc.distributions import Continuous\n",
    "from pytensor.compile.ops import as_op\n",
    "from sdeint import itoint\n",
    "\n",
    "def run_model(theta, t, X0):\n",
    "    a, b = theta\n",
    "    c = 1.5\n",
    "    d = 0.75\n",
    "\n",
    "    def dX_dt(X, t):\n",
    "        return [\n",
    "            a * X[0] - b * X[0] * X[1],\n",
    "            -c * X[1] + d * b * X[0] * X[1]\n",
    "        ]\n",
    "\n",
    "    # Solve the ODE\n",
    "    X = odeint(dX_dt, X0, t)\n",
    "    return X\n",
    "\n",
    "t = np.linspace(0, 15, 1000)      # time\n",
    "X0 = np.array([10.0, 5.0]) \n",
    "\n",
    "# def run_model(theta,t,X0):\n",
    "#     a = theta[0]\n",
    "#     b = theta[1]\n",
    "#     c = 1.5\n",
    "#     d = 0.75\n",
    "    \n",
    "#     def dX_dt(X, t):\n",
    "#         return np.array([ a*X[0] -   b*X[0]*X[1] ,\n",
    "#                       -c*X[1] + d*b*X[0]*X[1] ])\n",
    "#     def dW(x, t):\n",
    "#         return 0.7 * np.eye(2)  # Gaussian noise\n",
    "\n",
    "#     X = itoint(dX_dt, dW, X0, t)\n",
    "#     return X\n",
    "\n",
    "\n",
    "@as_op(itypes=[pt.dvector], otypes=[pt.dmatrix])\n",
    "def pytensor_forward_model_matrix(theta):\n",
    "    t = np.linspace(0, 15, 1000)  # Time points\n",
    "    X0 = np.array([10.0, 5.0])    # Initial conditions\n",
    "    return run_model(theta, t, X0)\n",
    "\n",
    "\n",
    "def create_pymc_model(observed_data):\n",
    "    with pm.Model() as model:\n",
    "        # Priors for the parameters\n",
    "        a = pm.Uniform('a', lower=0.5, upper=3.5)\n",
    "        b = pm.Uniform('b', lower=0.0, upper=0.5)\n",
    "\n",
    "        # Combine the parameters into a single vector\n",
    "        theta = pt.stack([a, b])\n",
    "\n",
    "        # Use the PyTensor operation\n",
    "        simulated = pytensor_forward_model_matrix(theta)\n",
    "\n",
    "        # Likelihood\n",
    "        likelihood = pm.Normal('likelihood', mu=simulated, sigma=0.1, observed=observed_data)\n",
    "\n",
    "        # Sample from the posterior\n",
    "        trace = pm.sample(5000, tune=1000, return_inferencedata=True)\n",
    "\n",
    "    return model, trace\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6eb1c2cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Multiprocess sampling (4 chains in 4 jobs)\n",
      "CompoundStep\n",
      ">Slice: [a]\n",
      ">Slice: [b]\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ef4671e2c8924c76a3a61fae17c6a6dc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 58 seconds.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[<Axes: title={'center': 'a'}>, <Axes: title={'center': 'a'}>],\n",
       "       [<Axes: title={'center': 'b'}>, <Axes: title={'center': 'b'}>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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GzZs2LBhw8Z7HnZwbMOGDRs2bNiwYcOGDRs23vM4pOD4zjvvRGNjI2RZxtKlS/HKK69MuO3mzZtx4YUXorGxEQzD4Ic//OGYbVKpFK677jo0NDRAURSsWLECr776asU2vb29uPzyy1FdXQ2Hw4E1a9Zgx44d1vt79uwBwzDj/nnkkUes7cZ7/9Of/nTFeO666y4sWLAAkiShtbUV991333E5nvvuu2/Cbb7zne+gsbERoiiO+35PT89RHxMA9PT04JOf/CRisRicTicWLFiARx99tGKboaEhXHLJJfB4PPD5fLjiiiuQTqcrrrvZs2dj3rx5kGUZdXV1+N73vlexj+NpTHv27MEVV1yBpqYmKIqClpYW3HLLLfif//kfazzz5s0bd55efvnl4248AKzjGH3Nnahz9Nxzz014L1VXVx93c7Rz505ccMEFCIfD8Hg8uOiii9Db21uxzYl2Hx1oTBPdR8VisWKb/c2RjSOPg1kfHEvceuutWLx4MdxuNyKRCM4//3xs27atYpuVK1eOuZauueaaim327duHD3zgA3A4HIhEIrjhhhugqurRHIqFr33ta2OOd9q0adb7+Xwe1157LYLBIFwuFy688MIxz43jaTzA+L81DMPg2muvBXBizNELL7yAc845B9XV1WAYBn/84x8r3ieE4Oabb0ZVVRUURcGqVavGPB8nep6X480338Qpp5wy4fP8aI2pVCrhK1/5CmbPng2n04nq6mpceuml6OrqqtjHROuI43FMAHD55ZePOd41a9ZUbHM8zdOBxjPRmue2226ztjne5uiogRwkHnzwQSKKIrn33nvJ5s2byZVXXkl8Ph/p7e0dd/tXXnmFfPnLXyYPPPAAicVi5Ac/+MGYbS666CIyY8YM8vzzz5MdO3aQW265hXg8HtLR0UEIIUTXdbJs2TJyyimnkFdeeYW89dZb5KqrriL19fUknU4TQghRVZV0d3dX/Pmv//ov4nK5SCqVsr4LAPnFL35hbXP33XdXjOdjH/sYAUCuueYasmXLFnLHHXcQjuPIE088cdyNJ5vNjtlm9erVZPr06daYfvGLXxAAxOPxkI0bN1rbaZp21OeIEELOPPNMsnjxYvKvf/2L7Ny5k3zjG98gLMuS1157zdpmzZo1ZO7cueTll18mL774ImltbSUrVqywxvSvf/2LKIpCRFEkzz//PHnggQeIoijkJz/5yXE5pv/7v/8jl19+OXnyySfJzp07yWOPPUY8Hg/hOG7MdffII49UzGexWDzuxkMIIQ0NDeTrX/96xbHed999J+wcFQqFMffS6aefTgCQe+6557iao3Q6TZqbm8kFF1xA3nzzTfLmm2+S8847jyxevLjivj6R7qPJjGm8+ygSiZAvfelL1rHs3r2bACBPP/30uHNk48jiYNcHxxKrV68mv/jFL8imTZvIhg0byPvf//4xz43TTjuNXHnllRXXUiKRsN5XVZXMmjWLrFq1irz++uvk8ccfJ6FQiNx4443HYkjklltuITNnzqw43v7+fuv9a665htTV1ZFnnnmGrFu3jixbtoysWLHCev94Gw8hhPT19VWM56mnniIAyLPPPksIOTHm6PHHHyf/8R//QX7/+98TAOQPf/hDxfvf+c53iNfrJX/84x/JG2+8Qc4991zS1NREcrmctc14z/OLL77Yej+RSJBoNEouueQSsmnTpnGf50drTPF4nKxatYo89NBD5K233iJr164lS5YsIQsXLqzYx3jriPL773gaEyGEXHbZZWTNmjUVxzs0NFSxzfE0Twcaz+g1z7333ksYhiE7d+60tjne5uho4aCD4yVLlpBrr73W+r+maaS6uprceuutB/xsQ0PDmMVVNpslHMeRv/zlLxWvL1iwgPzHf/wHIYSQbdu2EQBk06ZNFd8bDofJz372swm/b968eeTTn/50xWujL5DR47nhhhsIz/MV4/noRz9KVq9efVyOpxx9fX1EEATS3NxsjenZZ58lAEhVVdVxMUdOp5P86le/qthPIBCwttmyZQsBQF599VXr/f/7v/8jAMjll19OCCHkf//3f4nP56u47r7yla+QqVOnHpdjGg91dXXE7XZb/9+5cycBQD73uc9N+JnjaTzjHUP5vXSiz1GxWCQ8z5MlS5ZYrx0vc/Tkk08SlmUrFoDxeJwwDEOeeuopQsiJdx9NZkzj4Xvf+x5pamqy/m8Gx6+//vqEn7Fx5PBO1gfHGn19fQQAef75563XTjvtNPKFL3xhws88/vjjhGVZ0tPTY7121113EY/HQwqFwpE83HFxyy23kLlz5477XjweJ4IgkEceecR6bevWrQQAWbt2LSHk+BvPePjCF75AWlpaiK7rhJATb45Gr0F1XSexWIzcdttt1mvxeJxIkkQeeOABQsjEz3OGYUhnZychhD7P/X5/xZj29zw/nBgv8BqNV155hQAge/futV4b7zelHMfbmC677DJy3nnnTfiZ43meJjNH5513Hnnf+95X8drxPEdHEgdFqy4Wi1i/fj1WrVplvcayLFatWoW1a9cezK4sqKoKTdMgy3LF64qi4KWXXgIAFAoFAKjYhmVZSJJkbTMa69evx4YNG3DFFVeMee/aa69FKBTCokWLsG7dOpxxxhnWey+//DLa2toqxrN69epJj+9YjMfEr371KyiKgr1791bMEQAkk0l87Wtfw5lnnol//OMfkxrLkRjTihUr8NBDD2FoaAi6ruPBBx9EPp/HypUrAQBr166Fz+fDokWLrM+ceuqpAIBoNGptc9ppp1Vcd6tXr8a2bdswPDx83I1pNIrFIjo6OhCJRCr2CwA/+9nPEIlEcPLJJ+NPf/rTpMZyrMbzne98B8FgEPPnz8ett95a8Ww40efo0UcfhaqquPLKKyv2Cxz7OSoUCmAYBpIkWdvIsgyWZa1tTrT7aDJjGg+JRAKBQGDM6+eee+4hzZGNQ8eRWB8cTSQSCQAYcz395je/QSgUwqxZs3DjjTcim81a761duxazZ8+27imA3kPJZBKbN28+Ogc+Cjt27EB1dTWam5txySWXYN++fQDoGqJUKlXMz7Rp01BfX2/Nz/E4nnIUi0X8+te/xqc//WkwDGO9fqLNUTl2796Nnp6einnxer1YunRpxbyMfp6vWrUKLMviX//6l7XNqaeeClEUrW0O9nl+JJFIJMAwDHw+X8Xr5euI2267rYLufjyO6bnnnkMkEsHUqVPxb//2bxgcHLTeO5Hnqbe3F3/961/HjTFOtDk6HDio4HhgYACaplU8ZAC62CrvYT0YuN1uLF++HN/4xjfQ1dUFTdPw61//GmvXrkV3dzeAkQf4jTfeiOHhYRSLRXz3u99FR0eHtc1o3HPPPZg+fTpWrFhR8frXv/51PPzww3jqqaewevVq6LqOF154wXq/p6cHoVCoYjzRaBTJZBK5XO64G8/obc4///yKOaqqqsLdd9+ND33oQ2hpaUFdXR1WrlyJ11577YBjORJjevjhh1EqlRAMBiFJEq6++mr84Q9/QGtrKwB6/suDRgCIx+MAAE3TrG2i0WjFdWeOd7LX4dEc02i8+uqrIITgwx/+sPWay+XCypUr0dzcjL/+9a84+eSTcf755096YX+0x/P5z38eDz74IJ599llcffXV+M53vlNx3Z3oc/TTn/4UADBz5kzrteNljpYtWwan04mvfOUryGazyGQy+PKXvwxN06xtTrT7aDJjGo23334bd9xxB66++mrrNZfLhf/+7//GI488ckhzZOPQcSTWB0cLuq7juuuuw0knnYRZs2ZZr3/84x/Hr3/9azz77LO48cYbcf/99+MTn/iE9b55D5XjYO+hw4mlS5fivvvuwxNPPIG77roLu3fvximnnIJUKoWenh6IojgmOCmfn+NtPKPxxz/+EfF4HJdffrn12ok2R6Mx+tlrYvS8jH6e8zyPQCBwQsxdPp/HV77yFVx88cXweDzW66PXEd/+9rfx//7f/7PeP97GtGbNGvzqV7/CM888g+9+97t4/vnncfbZZ1f8pp6o8/TLX/4SbrcbH/rQhypeP9Hm6HDhuFCrvv/++0EIQU1NDSRJwo9+9CNcfPHFVqVGEAT8/ve/x/bt2xEIBOBwOPDss8/i7LPPtrYpRy6Xw29/+9txMyA33XQTTjrpJMyfP98SdPjNb35zwo7HxNq1a7F161ZcfPHFFa9PnToVV199NWKxGFwuF+69916sWLECP/jBD47JmG666SbE43E8/fTTWLduHa6//npcdNFF2Lhx40Edz+HAsRhTZ2cnLrnkEgDAeeedZ70eCoWwePFiuFwuLF68GN/5znfwiU98okIY4Xgaz/XXX4+VK1dizpw5uOaaa3DzzTcDQIU40uHAsZijjo4OPPfcc2NeP17mKBwO45FHHsGf//xnuFwueL1exONxLFiwYNznx5HGsRhTZ2cn1qxZg4985CMV1f1QKITrr78eS5cuPeQ5svHew7XXXotN/3979x8Tdf3HAfwJN+7gNEC8kzsllAtyNvWoa1ynqRQNZW2s3ErJqXOWW+bWljZtq7W11fwja2VmLeWYuobMTW0WGAio+YPCcU7mje4u1KgGSd6CkYHx/P7BPp/xAeSXAp/78nps94efex98nr4+7zef933uPu/6ehQXF2u2b9q0CcuXL8eCBQuwZs0aHDhwAEePHkUoFJqgPR1cXl4eXnjhBSxcuBDLly/Hd999h3A4jJKSkonetfti//79yMvLw8yZM9VtkVajyaarqwsvvvgiSGLv3r2a5/qeR+zatQu7d+9WP22kN6tXr0Z+fj4WLFiA5557DidOnMBPP/004PlCpCksLMSaNWv6fQos0mp0v4zoTMpiscBgMPS7u2FzczNsNtuod+Khhx7C6dOn0d7ejl9//RU//vgjurq64HA41DYulws+nw/hcBh//PEHysrK0NraqmmjOHLkCDo6OrBu3boh80RHR+PPP/9UC22z2XDz5k1NnubmZsTHxyMuLk63efbt24fMzEw8/fTTQ9YoKysLwWBwWFnuZ6ZQKITPPvsMhYWFyMnJgdPpxLvvvovHH38ce/bsAdDz/9/S0qL53co73QaDQW3T3NysyaTkHclxOF6ZFL///jueeuopLF68eFj9yO12j6hO452nN+WrCfX19QAit0YA4PV6MX36dN3WCAByc3MRCoXQ0tKCmzdv4uDBg/jtt9/UNpHWj4aTSaH0o0WLFqlX+Acz0hqJ0Rmr84OxtmXLFpw4cQJVVVVISUkZtK3b7QYA9XhS+lBvo+lDYyUxMREPP/wwgsEgbDYbOjs71U+QKHrXR895rl+/joqKCrz88suDtou0GvUdexV969J3PL9z5w7++usvXddOmRhfv34d5eXlmqvGA3G73bhz5w6uXbsGQJ+ZenM4HLBYLJpjLRLrdPbsWTQ0NAzZt4DIq9FojWhybDQa4XK5cOrUKXVbd3c3Tp06BY/Hc887M2XKFNjtdty6dQsnT57UXFlTJCQkwGq1IhAIoLa2dsA2+/fvR35+PqxW65B5Zs6cCZPJpH7X7YknnkAgENDkKS8vH1W+8crT3t6OkpISbNy4cVg18vl8sNvtI85zr5mU7wH1vRJkMBjQ3d0NAPB4PAiHw7h06ZL6vPKdQ2XQ8Xg8OH36tCZTeXk55s6di2nTpukuE9BzpSs7OxsulwsHDhwYVj8abZ3GI09fyne3Ll++DCAyawT0LKnh9Xqxfv163daoN4vFgsTERFRWVqKlpQX5+fkAIq8fDScToO1HXq93WFfK72W8E8M31ucH9xtJbNmyBUePHkVlZSXS0tKGfI3P5wMA9XjyeDy4cuWK5oRYmQQ88sgjY7LfI9He3o5QKAS73Q6Xy4WYmBhNfRoaGnDjxg21PnrO4/V6MWPGDDz77LODtou0GqWlpcFms2nq8vfff6OmpkZTl77jeWVlJbq7u9U3AzweD86cOYOuri61zb2M5/dKmRgHAgFUVFRg+vTpQ77G5/MhOjpa/Wiy3jL11dTUhNbWVs2xFml1AnrmGC6XC06nc8i2kVajURvpHbyKi4tpMplYVFTEq1evctOmTUxMTFTvBLh27Vru2LFDbf/vv/+yrq6OdXV1tNvt3LZtG+vq6hgIBNQ2ZWVlLC0t5S+//MLvv/+eTqeTbrdbs/xGSUkJq6qqGAqFeOzYMc6ePZsrV67st3+BQIBRUVEsLS3t99w333zDr776ileuXGEgEODnn39Oo9FIg8Gg5ikoKCAAbt68mX6/n1lZWYyKilKXctJTHsW+ffsYGxvLW7du9avRjh07mJuby/j4eFZVVfH1118nAK5evXrca9TZ2cn09HQuWbKENTU1DAaD/PDDDxkVFcVvv/1WbbdixQo++uijrKmp4Q8//MCMjAwuWrRIzdR7CZrq6moWFxfTYDBwxYoVuszU1NTE9PR05uTksKmpSV1CrHc/ys7Optls5tmzZ+n3+5mZmUkALCws1F2e8+fP8+OPP6bP52MoFOKhQ4dotVq5ZMmSiK2RoqKiggDo9/v7jXV6qRFJFhYW8sKFCwwGgzx48CCTkpL4xhtvaNpEUj8aTqaB+pHyUBQVFfHrr7+m3++n3+/n+++/z+joaLVGYmwNdX6gJ6+++ioTEhJYXV2tOZY6OjpIksFgkO+99x5ra2vZ2NjI48eP0+FwcOnSperPUJYJys3Npc/nY1lZGa1W64QtfbR161ZWV1ezsbGR586d4zPPPEOLxcKWlhaSPUs5paamsrKykrW1tfR4PPR4PLrNo/jvv/+YmprK7du3a7ZHSo3a2trUcRQAP/roI9bV1al3bt65cycTExN5/PhxdRm7gZZy6jue914iKBwOMzk5mWvXrmV9fT2Li4tpNpvHbEmdwTJ1dnYyPz+fKSkp9Pl8mv6l3NX4bucR69at02WmtrY2btu2jRcuXGBjYyMrKir42GOPMSMjg7dv31Z/hp7qNNRxR/YsxWQ2m7l3795+r9djjcbLiCfHJLl7926mpqbSaDQyKyuLFy9eVJ9btmwZ169fr/5bWVqj72PZsmVqm8OHD9PhcNBoNNJms/G1115jOBzW/M5PPvmEKSkpjImJYWpqKt9+++0Bb8P/1ltv8cEHH9Ss96koLS1lZmYmp06dyilTptDpdPKLL77gp59+qsmzZ88eZmZm0mg0MjY2losXL9ZlHoXH4+FLL72k2abUyGAw0GQy0Wg0MikpidnZ2XQ6nRNWo59//pkrV67kjBkzaDabuXDhwn5L7LS2trKgoIBTp05lfHw8N2zYwLa2Ns1xN3/+fDqdTppMJs6aNYtpaWm6zaSsNT3QQ8njcDg4Z84cms1mxsfH84EHHtDsq57yXLp0iW63mwkJCYyNjeW8efP4wQcf8Pbt2xFbI0VBQYFm3c/eefRUo+3btzM5OZkxMTHMyMjgrl271KVNFJHWj4bKNFg/UhQVFXHevHlqjbKysjRL14ixN9j5gZ7c7Vjyer0kyRs3bnDp0qVMSkqiyWRieno633zzTc1yYyR57do15uXlMS4ujhaLhVu3bmVXV9cEJOpZdtJut9NoNHLWrFlctWoVg8Gg+vw///zDzZs3c9q0aTSbzXz++ec1by6R+sqjOHnyJAGwoaFBsz1SaqQsqdn3oYy13d3dfOedd5icnEyTycScnJx+We82nvd2+fJlPvnkk+p4vnPnzgnJdLe/G+i1PvVg5xF6zNTR0cHc3FxarVbGxMRw9uzZfOWVV/q98aenOg113JHkl19+ybi4uH5/s0l91mi8RJHkcK4wCyGEEEIIIYQQ/690cbdqIYQQQgghhBBiIsnkWAghhBBCCCHEpCeTYyGEEEIIIYQQk55MjoUQQgghhBBCTHoyORZCCCGEEEIIMenJ5FgIIYQQQgghxKQnk2MhhBBCCCGEEJOeTI6FEEIIIYQQQkx6MjkWQgghhBBCCDHpyeRYCCGEEEIIIcSkJ5NjIYQQQgghhBCTnkyOhRBCCCGEEEJMev8DmN15oXNT8nwAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1200x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(42)\n",
    "t = np.linspace(0, 15, 1000)  # Time points\n",
    "X0 = np.array([10.0, 5.0])    # Initial conditions\n",
    "true_params = [2.0, 0.2]\n",
    "observed_data = run_model(true_params, t, X0) + np.random.normal(0, 0.5, size=(len(t), 2))\n",
    "\n",
    "# Create the model and sample\n",
    "model, trace = create_pymc_model(observed_data)\n",
    "\n",
    "# Analyze the results\n",
    "az.summary(trace)\n",
    "az.plot_trace(trace)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "38bb82bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.core.pylabtools import figsize\n",
    "from matplotlib import pyplot as plt\n",
    "import matplotlib as mpl\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import torch\n",
    "from sbi.utils import MultipleIndependent\n",
    "from sbi import utils as utils\n",
    "from sbi import analysis as analysis\n",
    "from sbi.inference import SNPE\n",
    "from sbi import utils as utils\n",
    "from sbi.analysis.plot import pairplot\n",
    "lower_bound = torch.tensor([0.5, 0.0])\n",
    "upper_bound = torch.tensor([3.5, 0.5])\n",
    "prior = utils.BoxUniform(lower_bound, upper_bound)\n",
    "num_simulations = 5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d44353d0-c813-42fe-973e-d7c8d0c0ce6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([1.1633, 0.0723])\n",
      "tensor([0.7463, 0.1562])\n",
      "tensor([2.7679, 0.0698])\n",
      "tensor([3.3266, 0.0669])\n",
      "tensor([0.8572, 0.2691])\n",
      "tensor([1.1163, 0.1782])\n",
      "tensor([1.3362, 0.4888])\n",
      "tensor([3.2409, 0.4590])\n",
      "tensor([1.6644, 0.2181])\n",
      "tensor([2.3611, 0.3033])\n",
      "tensor([0.9904, 0.3907])\n",
      "tensor([0.6530, 0.0173])\n",
      "tensor([1.0809, 0.3786])\n",
      "tensor([1.8847, 0.1686])\n",
      "tensor([2.9071, 0.4501])\n",
      "tensor([2.1540, 0.0508])\n",
      "tensor([2.9873, 0.0507])\n",
      "tensor([0.6185, 0.3470])\n",
      "tensor([1.1822, 0.2675])\n",
      "tensor([0.6586, 0.2636])\n",
      "tensor([2.3085, 0.4589])\n",
      "tensor([1.2201, 0.2503])\n",
      "tensor([1.9977, 0.0805])\n",
      "tensor([2.9476, 0.3653])\n",
      "tensor([2.0339, 0.0711])\n",
      "tensor([1.6574, 0.3300])\n",
      "tensor([3.1258, 0.2417])\n",
      "tensor([1.6241, 0.2486])\n",
      "tensor([1.8683, 0.3106])\n",
      "tensor([2.3262, 0.4438])\n",
      "tensor([0.5418, 0.1238])\n",
      "tensor([2.5116, 0.4954])\n",
      "tensor([0.7678, 0.3598])\n",
      "tensor([1.4747, 0.2916])\n",
      "tensor([3.4862, 0.2982])\n",
      "tensor([2.7837, 0.2339])\n",
      "tensor([2.1859, 0.2385])\n",
      "tensor([1.9963, 0.2605])\n",
      "tensor([2.4485, 0.1973])\n",
      "tensor([0.7845, 0.0668])\n",
      "tensor([2.6201, 0.3695])\n",
      "tensor([3.2439, 0.4630])\n",
      "tensor([2.0938, 0.1250])\n",
      "tensor([1.2231, 0.3688])\n",
      "tensor([0.6877, 0.4951])\n",
      "tensor([2.0622, 0.3674])\n",
      "tensor([2.3244, 0.4329])\n",
      "tensor([3.1871, 0.4283])\n",
      "tensor([2.5755, 0.1502])\n",
      "tensor([2.7401, 0.2408])\n",
      "tensor([1.8812, 0.2491])\n",
      "tensor([3.0333, 0.3757])\n",
      "tensor([1.5426, 0.3523])\n",
      "tensor([1.7446, 0.3694])\n",
      "tensor([0.8986, 0.3116])\n",
      "tensor([1.8925, 0.2774])\n",
      "tensor([0.7947, 0.3566])\n",
      "tensor([1.5510, 0.4003])\n",
      "tensor([1.8957, 0.3020])\n",
      "tensor([1.1175, 0.1828])\n",
      "tensor([3.0271, 0.1901])\n",
      "tensor([1.9615, 0.4941])\n",
      "tensor([2.5449, 0.3002])\n",
      "tensor([0.8854, 0.1940])\n",
      "tensor([3.3180, 0.2788])\n",
      "tensor([1.6665, 0.2504])\n",
      "tensor([3.2509, 0.3056])\n",
      "tensor([1.5066, 0.4912])\n",
      "tensor([1.9934, 0.2185])\n",
      "tensor([1.1441, 0.1651])\n",
      "tensor([2.8405, 0.2533])\n",
      "tensor([1.5488, 0.2473])\n",
      "tensor([0.8202, 0.2892])\n",
      "tensor([3.2323, 0.2150])\n",
      "tensor([2.7678, 0.2569])\n",
      "tensor([0.5858, 0.0702])\n",
      "tensor([2.9915, 0.3277])\n",
      "tensor([1.2571, 0.3892])\n",
      "tensor([1.7757, 0.2375])\n",
      "tensor([3.3755, 0.2790])\n",
      "tensor([2.6127, 0.3807])\n",
      "tensor([3.3171, 0.0152])\n",
      "tensor([1.1712, 0.0629])\n",
      "tensor([3.4993, 0.2034])\n",
      "tensor([3.2462, 0.3671])\n",
      "tensor([0.9667, 0.2767])\n",
      "tensor([1.4423, 0.4559])\n",
      "tensor([1.9078, 0.2109])\n",
      "tensor([3.1875, 0.0310])\n",
      "tensor([1.4937, 0.3202])\n",
      "tensor([2.4525, 0.2161])\n",
      "tensor([2.6881, 0.0114])\n",
      "tensor([0.8952, 0.3828])\n",
      "tensor([3.1118, 0.2389])\n",
      "tensor([0.9796, 0.0126])\n",
      "tensor([1.4812, 0.4097])\n",
      "tensor([3.3779, 0.3672])\n",
      "tensor([3.4749, 0.1395])\n",
      "tensor([1.4033, 0.4944])\n",
      "tensor([2.5355, 0.0578])\n",
      "tensor([2.1658, 0.1261])\n",
      "tensor([1.8120, 0.4738])\n",
      "tensor([1.4948, 0.3045])\n",
      "tensor([3.2684, 0.0951])\n",
      "tensor([0.6972, 0.0334])\n",
      "tensor([2.1266, 0.3430])\n",
      "tensor([3.1501, 0.1451])\n",
      "tensor([2.5323, 0.1331])\n",
      "tensor([1.8082, 0.2193])\n",
      "tensor([1.2199, 0.4112])\n",
      "tensor([0.6243, 0.2773])\n",
      "tensor([1.1265, 0.1316])\n",
      "tensor([2.0900, 0.0836])\n",
      "tensor([1.6045, 0.1073])\n",
      "tensor([2.7591, 0.2968])\n",
      "tensor([2.1625, 0.4212])\n",
      "tensor([1.6479, 0.1903])\n",
      "tensor([2.4924, 0.3925])\n",
      "tensor([2.9937, 0.0957])\n",
      "tensor([0.9356, 0.2346])\n",
      "tensor([3.0398, 0.0165])\n",
      "tensor([0.7250, 0.3164])\n",
      "tensor([2.0758, 0.2349])\n",
      "tensor([1.7467, 0.3107])\n",
      "tensor([3.0526, 0.2091])\n",
      "tensor([1.5933, 0.2259])\n",
      "tensor([1.8384, 0.2255])\n",
      "tensor([1.9881, 0.0962])\n",
      "tensor([3.1303, 0.0245])\n",
      "tensor([2.2410, 0.0570])\n",
      "tensor([0.5246, 0.1548])\n",
      "tensor([2.4356, 0.0962])\n",
      "tensor([0.7736, 0.2308])\n",
      "tensor([3.1081, 0.2770])\n",
      "tensor([0.6402, 0.3987])\n",
      "tensor([1.6155, 0.1883])\n",
      "tensor([3.0561, 0.4893])\n",
      "tensor([3.0695, 0.4197])\n",
      "tensor([1.3754, 0.4760])\n",
      "tensor([1.7860, 0.1606])\n",
      "tensor([2.1080, 0.0271])\n",
      "tensor([2.5173, 0.2560])\n",
      "tensor([1.2850, 0.0589])\n",
      "tensor([2.1057, 0.4528])\n",
      "tensor([0.6865, 0.0124])\n",
      "tensor([2.8800, 0.2535])\n",
      "tensor([1.6860, 0.0957])\n",
      "tensor([1.1264, 0.3218])\n",
      "tensor([0.7516, 0.3046])\n",
      "tensor([2.3374, 0.0311])\n",
      "tensor([0.8446, 0.1983])\n",
      "tensor([0.5200, 0.4520])\n",
      "tensor([2.5869, 0.1080])\n",
      "tensor([0.8766, 0.0508])\n",
      "tensor([3.2876, 0.3301])\n",
      "tensor([0.7685, 0.0320])\n",
      "tensor([0.5082, 0.2595])\n",
      "tensor([0.5829, 0.0176])\n",
      "tensor([1.3376, 0.2861])\n",
      "tensor([1.7623, 0.1844])\n",
      "tensor([2.1126, 0.1428])\n",
      "tensor([2.9577, 0.1192])\n",
      "tensor([3.3907, 0.2564])\n",
      "tensor([2.2435, 0.0326])\n",
      "tensor([2.6034, 0.4002])\n",
      "tensor([3.3464, 0.3389])\n",
      "tensor([3.4526, 0.3918])\n",
      "tensor([1.6532, 0.3252])\n",
      "tensor([1.5243, 0.4817])\n",
      "tensor([2.0066, 0.0891])\n",
      "tensor([0.6258, 0.1470])\n",
      "tensor([2.9529, 0.3156])\n",
      "tensor([2.9488, 0.0688])\n",
      "tensor([1.4332, 0.0945])\n",
      "tensor([0.6832, 0.3177])\n",
      "tensor([2.9696, 0.1765])\n",
      "tensor([1.6772, 0.2348])\n",
      "tensor([2.2591, 0.1546])\n",
      "tensor([1.8797, 0.2260])\n",
      "tensor([1.0279, 0.2459])\n",
      "tensor([1.8950, 0.4330])\n",
      "tensor([2.8079, 0.3516])\n",
      "tensor([1.1197, 0.2518])\n",
      "tensor([2.1067, 0.2930])\n",
      "tensor([1.7814, 0.3627])\n",
      "tensor([1.9914, 0.3888])\n",
      "tensor([0.8158, 0.3999])\n",
      "tensor([3.3199, 0.4082])\n",
      "tensor([1.6819, 0.1179])\n",
      "tensor([2.5935, 0.0295])\n",
      "tensor([3.3629, 0.4359])\n",
      "tensor([1.6082, 0.1403])\n",
      "tensor([1.2974, 0.4675])\n",
      "tensor([3.0148, 0.4442])\n",
      "tensor([1.9579, 0.1732])\n",
      "tensor([1.4703, 0.1681])\n",
      "tensor([1.2987, 0.1524])\n",
      "tensor([2.5433, 0.4588])\n",
      "tensor([3.1889, 0.0450])\n",
      "tensor([2.2402, 0.4868])\n",
      "tensor([0.9030, 0.1083])\n",
      "tensor([2.5227, 0.0734])\n",
      "tensor([2.3367, 0.2961])\n",
      "tensor([2.0662, 0.2301])\n",
      "tensor([0.5710, 0.2875])\n",
      "tensor([2.1844, 0.3213])\n",
      "tensor([1.8775, 0.3800])\n",
      "tensor([3.1848, 0.4185])\n",
      "tensor([0.8920, 0.4007])\n",
      "tensor([2.3929, 0.2662])\n",
      "tensor([1.8521, 0.2587])\n",
      "tensor([1.7665, 0.0546])\n",
      "tensor([0.5019, 0.1309])\n",
      "tensor([2.6704, 0.2084])\n",
      "tensor([0.8996, 0.1182])\n",
      "tensor([2.5446, 0.3349])\n",
      "tensor([1.8723, 0.1365])\n",
      "tensor([1.3579, 0.4809])\n",
      "tensor([0.8059, 0.4169])\n",
      "tensor([2.5094, 0.0457])\n",
      "tensor([1.2648, 0.3751])\n",
      "tensor([1.1558, 0.1908])\n",
      "tensor([2.7604, 0.2139])\n",
      "tensor([1.5483, 0.4383])\n",
      "tensor([3.0932, 0.2160])\n",
      "tensor([3.1180, 0.0229])\n",
      "tensor([0.9853, 0.4896])\n",
      "tensor([1.6750, 0.0240])\n",
      "tensor([1.5475, 0.1121])\n",
      "tensor([1.1323, 0.0353])\n",
      "tensor([3.1562, 0.1638])\n",
      "tensor([2.4276, 0.0984])\n",
      "tensor([3.2799, 0.4793])\n",
      "tensor([2.8706, 0.0522])\n",
      "tensor([2.6203, 0.2467])\n",
      "tensor([3.1223, 0.2232])\n",
      "tensor([3.3109, 0.3687])\n",
      "tensor([2.6432, 0.4642])\n",
      "tensor([2.1049, 0.1322])\n",
      "tensor([1.3103, 0.3340])\n",
      "tensor([1.0416, 0.1112])\n",
      "tensor([0.5742, 0.1417])\n",
      "tensor([1.3398, 0.1442])\n",
      "tensor([1.6790, 0.2646])\n",
      "tensor([1.4610, 0.2010])\n",
      "tensor([3.3990, 0.1316])\n",
      "tensor([2.8819, 0.1009])\n",
      "tensor([2.8656, 0.1279])\n",
      "tensor([2.5573, 0.1085])\n",
      "tensor([0.9650, 0.1447])\n",
      "tensor([3.2876, 0.2559])\n",
      "tensor([2.1147, 0.0164])\n",
      "tensor([1.1867, 0.0178])\n",
      "tensor([1.0390, 0.1005])\n",
      "tensor([1.6069, 0.2511])\n",
      "tensor([1.9514, 0.0369])\n",
      "tensor([3.2405, 0.0635])\n",
      "tensor([0.6079, 0.2102])\n",
      "tensor([3.4790, 0.1622])\n",
      "tensor([0.9845, 0.3343])\n",
      "tensor([1.5872, 0.4570])\n",
      "tensor([2.9873, 0.4927])\n",
      "tensor([3.1549, 0.0271])\n",
      "tensor([2.7467, 0.0158])\n",
      "tensor([1.3628, 0.3398])\n",
      "tensor([3.3918, 0.4056])\n",
      "tensor([2.4235, 0.4563])\n",
      "tensor([1.0147, 0.3075])\n",
      "tensor([1.7158, 0.0163])\n",
      "tensor([2.1603, 0.4196])\n",
      "tensor([2.6633, 0.0675])\n",
      "tensor([2.3320, 0.2394])\n",
      "tensor([3.0867, 0.1183])\n",
      "tensor([3.0072, 0.3999])\n",
      "tensor([3.2276, 0.0489])\n",
      "tensor([2.3435, 0.2912])\n",
      "tensor([1.7064, 0.1629])\n",
      "tensor([3.2122, 0.0644])\n",
      "tensor([1.5723, 0.1922])\n",
      "tensor([2.4324, 0.2584])\n",
      "tensor([1.6477, 0.1346])\n",
      "tensor([2.9965, 0.0233])\n",
      "tensor([0.5757, 0.4179])\n",
      "tensor([0.9108, 0.2268])\n",
      "tensor([2.8495, 0.0411])\n",
      "tensor([1.9319, 0.3662])\n",
      "tensor([1.0991, 0.3950])\n",
      "tensor([0.7023, 0.0353])\n",
      "tensor([0.8068, 0.3670])\n",
      "tensor([0.6470, 0.1326])\n",
      "tensor([0.5440, 0.3110])\n",
      "tensor([1.5922, 0.0307])\n",
      "tensor([1.1393, 0.4834])\n",
      "tensor([2.5563, 0.3820])\n",
      "tensor([2.6093, 0.1020])\n",
      "tensor([0.8627, 0.3974])\n",
      "tensor([1.9176, 0.2759])\n",
      "tensor([1.2315, 0.4462])\n",
      "tensor([1.0893, 0.2332])\n",
      "tensor([2.6152, 0.4682])\n",
      "tensor([0.9929, 0.2528])\n",
      "tensor([1.4126, 0.3770])\n",
      "tensor([1.2292, 0.2356])\n",
      "tensor([0.7545, 0.1515])\n",
      "tensor([2.0479, 0.0638])\n",
      "tensor([2.7198, 0.1454])\n",
      "tensor([2.0782, 0.3190])\n",
      "tensor([1.2528, 0.4248])\n",
      "tensor([0.5777, 0.0956])\n",
      "tensor([2.2715, 0.4150])\n",
      "tensor([3.2566, 0.3635])\n",
      "tensor([0.8190, 0.2766])\n",
      "tensor([0.6682, 0.1364])\n",
      "tensor([2.6620, 0.4244])\n",
      "tensor([2.8913, 0.1877])\n",
      "tensor([2.8482, 0.0754])\n",
      "tensor([3.0310, 0.2963])\n",
      "tensor([2.7379, 0.3316])\n",
      "tensor([3.0085, 0.0080])\n",
      "tensor([2.3815, 0.2432])\n",
      "tensor([0.5488, 0.0951])\n",
      "tensor([2.9618, 0.0941])\n",
      "tensor([0.8283, 0.4739])\n",
      "tensor([2.3840, 0.3256])\n",
      "tensor([1.9526, 0.2968])\n",
      "tensor([2.6345, 0.4474])\n",
      "tensor([0.9871, 0.0897])\n",
      "tensor([2.5149, 0.1827])\n",
      "tensor([2.7674, 0.2839])\n",
      "tensor([2.1186, 0.4186])\n",
      "tensor([1.2801, 0.0563])\n",
      "tensor([0.7444, 0.3789])\n",
      "tensor([2.4564, 0.1347])\n",
      "tensor([1.1502, 0.0641])\n",
      "tensor([2.8417, 0.2594])\n",
      "tensor([3.1900, 0.1737])\n",
      "tensor([2.0053, 0.4736])\n",
      "tensor([1.1291, 0.3101])\n",
      "tensor([2.1641, 0.0587])\n",
      "tensor([3.0185, 0.1004])\n",
      "tensor([2.2819, 0.3933])\n",
      "tensor([3.2911, 0.3428])\n",
      "tensor([1.7949, 0.4812])\n",
      "tensor([3.3089, 0.3468])\n",
      "tensor([1.2272, 0.2552])\n",
      "tensor([3.4214, 0.3720])\n",
      "tensor([1.9997, 0.0381])\n",
      "tensor([2.2532, 0.0947])\n",
      "tensor([1.6684, 0.4562])\n",
      "tensor([1.3831, 0.3494])\n",
      "tensor([1.3939, 0.0133])\n",
      "tensor([1.6592, 0.2022])\n",
      "tensor([1.0753, 0.1191])\n",
      "tensor([1.8397, 0.0847])\n",
      "tensor([1.9789, 0.0373])\n",
      "tensor([1.6375, 0.1765])\n",
      "tensor([2.2646, 0.0262])\n",
      "tensor([2.1625, 0.2568])\n",
      "tensor([1.5293, 0.2974])\n",
      "tensor([0.6574, 0.2393])\n",
      "tensor([2.2599, 0.1110])\n",
      "tensor([2.0960, 0.1666])\n",
      "tensor([2.8653, 0.1825])\n",
      "tensor([3.3730e+00, 1.4926e-03])\n",
      "tensor([1.7345, 0.4298])\n",
      "tensor([1.4992, 0.2437])\n",
      "tensor([0.9719, 0.3893])\n",
      "tensor([1.1395, 0.2352])\n",
      "tensor([0.9160, 0.4548])\n",
      "tensor([0.7249, 0.4243])\n",
      "tensor([1.7031, 0.1810])\n",
      "tensor([1.0056, 0.0768])\n",
      "tensor([2.3085, 0.2348])\n",
      "tensor([0.8704, 0.2001])\n",
      "tensor([1.8007, 0.2530])\n",
      "tensor([1.8917, 0.5000])\n",
      "tensor([2.1500, 0.1680])\n",
      "tensor([2.7393, 0.4925])\n",
      "tensor([3.1215, 0.0040])\n",
      "tensor([1.9960, 0.0169])\n",
      "tensor([1.4475, 0.2291])\n",
      "tensor([3.0448, 0.1290])\n",
      "tensor([1.1893, 0.2924])\n",
      "tensor([3.4918, 0.1047])\n",
      "tensor([3.2560, 0.3076])\n",
      "tensor([3.4594, 0.1139])\n",
      "tensor([1.8737, 0.0059])\n",
      "tensor([2.7218, 0.0141])\n",
      "tensor([2.3746, 0.4530])\n",
      "tensor([1.3186, 0.0354])\n",
      "tensor([2.4465, 0.0055])\n",
      "tensor([0.7306, 0.2789])\n",
      "tensor([1.7269, 0.3853])\n",
      "tensor([0.6760, 0.4402])\n",
      "tensor([1.8822, 0.1161])\n",
      "tensor([2.1353, 0.4093])\n",
      "tensor([1.9856, 0.2833])\n",
      "tensor([2.9397, 0.2467])\n",
      "tensor([0.5734, 0.2463])\n",
      "tensor([2.9002e+00, 1.6236e-03])\n",
      "tensor([1.7172, 0.3114])\n",
      "tensor([1.9670, 0.1209])\n",
      "tensor([3.1134, 0.0807])\n",
      "tensor([2.1655, 0.2664])\n",
      "tensor([0.9026, 0.4905])\n",
      "tensor([3.1500, 0.2354])\n",
      "tensor([2.1487, 0.4118])\n",
      "tensor([2.4798, 0.0096])\n",
      "tensor([2.4055, 0.3091])\n",
      "tensor([3.0161, 0.1806])\n",
      "tensor([2.9250, 0.3317])\n",
      "tensor([1.0595, 0.1588])\n",
      "tensor([2.2018, 0.1083])\n",
      "tensor([0.5971, 0.0628])\n",
      "tensor([3.3668, 0.1953])\n",
      "tensor([0.5998, 0.4571])\n",
      "tensor([2.8192, 0.0094])\n",
      "tensor([2.5031, 0.0528])\n",
      "tensor([1.8924, 0.0714])\n",
      "tensor([3.0957, 0.2763])\n",
      "tensor([2.8866, 0.3338])\n",
      "tensor([1.1836, 0.1876])\n",
      "tensor([0.6899, 0.3653])\n",
      "tensor([2.0035, 0.3136])\n",
      "tensor([2.8742, 0.1022])\n",
      "tensor([3.1711, 0.3043])\n",
      "tensor([0.8008, 0.3880])\n",
      "tensor([3.2639, 0.0511])\n",
      "tensor([2.9024, 0.2043])\n",
      "tensor([3.2960, 0.1489])\n",
      "tensor([1.0346, 0.1513])\n",
      "tensor([1.9663, 0.0489])\n",
      "tensor([2.6104, 0.3206])\n",
      "tensor([1.1145, 0.1378])\n",
      "tensor([0.8724, 0.3051])\n",
      "tensor([2.8513, 0.4522])\n",
      "tensor([2.8903, 0.2119])\n",
      "tensor([2.4295, 0.2292])\n",
      "tensor([2.5779, 0.2604])\n",
      "tensor([2.9012, 0.4660])\n",
      "tensor([0.7548, 0.3971])\n",
      "tensor([2.8123, 0.4780])\n",
      "tensor([1.4213, 0.1209])\n",
      "tensor([2.1811, 0.3043])\n",
      "tensor([3.0004, 0.1708])\n",
      "tensor([3.3095, 0.4285])\n",
      "tensor([2.1292, 0.1790])\n",
      "tensor([1.7147, 0.1967])\n",
      "tensor([3.0061, 0.1951])\n",
      "tensor([0.9418, 0.2449])\n",
      "tensor([2.3734, 0.0506])\n",
      "tensor([3.4294, 0.1078])\n",
      "tensor([2.1051, 0.4513])\n",
      "tensor([1.2195, 0.1223])\n",
      "tensor([3.3056, 0.2358])\n",
      "tensor([2.8718, 0.4402])\n",
      "tensor([1.0837, 0.1232])\n",
      "tensor([2.7635, 0.2407])\n",
      "tensor([1.6843, 0.2318])\n",
      "tensor([3.0447, 0.2024])\n",
      "tensor([0.5388, 0.0587])\n",
      "tensor([2.2435, 0.1514])\n",
      "tensor([3.3437, 0.2035])\n",
      "tensor([1.4574, 0.0793])\n",
      "tensor([1.6733, 0.2064])\n",
      "tensor([1.8387, 0.3631])\n",
      "tensor([1.1659, 0.0503])\n",
      "tensor([0.7283, 0.0840])\n",
      "tensor([1.1371, 0.2059])\n",
      "tensor([1.8054, 0.1035])\n",
      "tensor([2.4496, 0.1956])\n",
      "tensor([2.7275, 0.1882])\n",
      "tensor([1.6907, 0.4036])\n",
      "tensor([1.3472, 0.3785])\n",
      "tensor([1.6295, 0.4479])\n",
      "tensor([1.5261, 0.0229])\n",
      "tensor([1.3746, 0.1251])\n",
      "tensor([3.0568, 0.1458])\n",
      "tensor([2.2243, 0.0704])\n",
      "tensor([1.2605, 0.0970])\n",
      "tensor([0.8881, 0.4197])\n",
      "tensor([3.0381, 0.3105])\n",
      "tensor([2.5804, 0.2532])\n",
      "tensor([2.4598, 0.1159])\n",
      "tensor([1.3288, 0.0437])\n",
      "tensor([2.8793, 0.4204])\n",
      "tensor([3.0559, 0.4778])\n",
      "tensor([2.7461, 0.2873])\n",
      "tensor([1.6246, 0.0177])\n",
      "tensor([2.7131, 0.0171])\n",
      "tensor([1.6829, 0.2290])\n",
      "tensor([3.3393, 0.4815])\n",
      "tensor([3.2027, 0.2383])\n",
      "tensor([1.4381, 0.2673])\n",
      "tensor([1.6765, 0.3388])\n",
      "tensor([3.3212, 0.1400])\n",
      "tensor([2.3037, 0.2702])\n",
      "tensor([1.4429, 0.2806])\n",
      "tensor([2.5659, 0.3310])\n",
      "tensor([1.5412, 0.3459])\n",
      "tensor([1.7207, 0.0742])\n",
      "tensor([0.8953, 0.2351])\n",
      "tensor([0.5236, 0.3217])\n",
      "tensor([1.2534, 0.3863])\n",
      "tensor([0.6612, 0.4191])\n",
      "tensor([1.2256, 0.3840])\n",
      "tensor([3.0137, 0.0873])\n",
      "tensor([2.4726, 0.4176])\n",
      "tensor([1.3582, 0.2615])\n",
      "tensor([2.2192, 0.2203])\n",
      "tensor([2.6714, 0.0199])\n",
      "tensor([0.6879, 0.0895])\n",
      "tensor([0.9718, 0.4146])\n",
      "tensor([0.8465, 0.2592])\n",
      "tensor([3.4724, 0.1289])\n",
      "tensor([0.9333, 0.1709])\n",
      "tensor([2.3325, 0.2477])\n",
      "tensor([1.9830, 0.0338])\n",
      "tensor([1.5297, 0.3458])\n",
      "tensor([1.1938, 0.0630])\n",
      "tensor([2.0160, 0.3955])\n",
      "tensor([1.7683, 0.3179])\n",
      "tensor([1.4910, 0.4110])\n",
      "tensor([1.0550, 0.3642])\n",
      "tensor([2.8986, 0.2928])\n",
      "tensor([3.2735, 0.0633])\n",
      "tensor([3.2337, 0.2535])\n",
      "tensor([0.8976, 0.2380])\n",
      "tensor([2.3792, 0.3056])\n",
      "tensor([3.2702, 0.4412])\n",
      "tensor([0.9455, 0.2963])\n",
      "tensor([0.5849, 0.2789])\n",
      "tensor([2.1573, 0.0523])\n",
      "tensor([2.4961, 0.0058])\n",
      "tensor([3.0721, 0.3809])\n",
      "tensor([2.3600, 0.1995])\n",
      "tensor([1.6660, 0.3848])\n",
      "tensor([0.7249, 0.3537])\n",
      "tensor([1.4972, 0.4450])\n",
      "tensor([2.4873, 0.0600])\n",
      "tensor([2.3952, 0.2300])\n",
      "tensor([1.3754, 0.2586])\n",
      "tensor([1.3443, 0.4390])\n",
      "tensor([1.6396, 0.2286])\n",
      "tensor([3.1513, 0.1569])\n",
      "tensor([2.8303, 0.1220])\n",
      "tensor([2.4719, 0.2534])\n",
      "tensor([1.3838, 0.4529])\n",
      "tensor([3.3876, 0.2481])\n",
      "tensor([3.0496, 0.1244])\n",
      "tensor([2.4605, 0.0561])\n",
      "tensor([0.5872, 0.3614])\n",
      "tensor([3.1402, 0.3574])\n",
      "tensor([2.5526, 0.3784])\n",
      "tensor([3.2157, 0.2170])\n",
      "tensor([2.8512, 0.0361])\n",
      "tensor([3.0564, 0.3259])\n",
      "tensor([1.7503, 0.0407])\n",
      "tensor([1.7149, 0.3054])\n",
      "tensor([1.6116, 0.0401])\n",
      "tensor([0.5599, 0.0600])\n",
      "tensor([3.2217, 0.3242])\n",
      "tensor([2.8038, 0.4899])\n",
      "tensor([2.0166, 0.1203])\n",
      "tensor([2.3845, 0.2907])\n",
      "tensor([2.0377, 0.2557])\n",
      "tensor([0.6661, 0.4290])\n",
      "tensor([0.6566, 0.4921])\n",
      "tensor([2.6348, 0.2227])\n",
      "tensor([2.1301, 0.4028])\n",
      "tensor([3.3950, 0.2562])\n",
      "tensor([3.1578, 0.1874])\n",
      "tensor([1.4149, 0.4625])\n",
      "tensor([1.4296, 0.0412])\n",
      "tensor([0.9749, 0.0200])\n",
      "tensor([2.2479, 0.1718])\n",
      "tensor([3.1685, 0.0980])\n",
      "tensor([1.1790, 0.2408])\n",
      "tensor([1.6868, 0.3617])\n",
      "tensor([1.6804, 0.1031])\n",
      "tensor([3.2852, 0.1210])\n",
      "tensor([0.6896, 0.2497])\n",
      "tensor([2.4409, 0.1417])\n",
      "tensor([0.8699, 0.4930])\n",
      "tensor([1.1195, 0.0485])\n",
      "tensor([1.0753, 0.2304])\n",
      "tensor([3.1120, 0.3046])\n",
      "tensor([0.7009, 0.4937])\n",
      "tensor([1.5141, 0.3821])\n",
      "tensor([2.9612, 0.1080])\n",
      "tensor([2.7723, 0.1523])\n",
      "tensor([1.4779, 0.2857])\n",
      "tensor([2.0367, 0.3979])\n",
      "tensor([0.7277, 0.3635])\n",
      "tensor([1.8641, 0.0360])\n",
      "tensor([0.6246, 0.2037])\n",
      "tensor([1.9073, 0.2911])\n",
      "tensor([1.0913, 0.0086])\n",
      "tensor([1.9200, 0.1441])\n",
      "tensor([1.7339, 0.4582])\n",
      "tensor([1.4283, 0.2906])\n",
      "tensor([0.5847, 0.0060])\n",
      "tensor([1.0666, 0.4923])\n",
      "tensor([1.0269, 0.0146])\n",
      "tensor([2.7341, 0.1659])\n",
      "tensor([1.1976, 0.0381])\n",
      "tensor([0.8391, 0.2170])\n",
      "tensor([3.2211, 0.1173])\n",
      "tensor([1.0636, 0.2690])\n",
      "tensor([2.0969, 0.1136])\n",
      "tensor([2.7910, 0.4892])\n",
      "tensor([0.9642, 0.1676])\n",
      "tensor([0.6276, 0.2385])\n",
      "tensor([0.5584, 0.1254])\n",
      "tensor([1.7441, 0.1228])\n",
      "tensor([1.6888, 0.3203])\n",
      "tensor([2.7114, 0.0833])\n",
      "tensor([0.7318, 0.2392])\n",
      "tensor([1.0596, 0.4412])\n",
      "tensor([1.5236, 0.3005])\n",
      "tensor([3.3618, 0.0861])\n",
      "tensor([2.5639, 0.1691])\n",
      "tensor([2.4352, 0.0645])\n",
      "tensor([2.5290, 0.0143])\n",
      "tensor([3.4953, 0.0548])\n",
      "tensor([1.9304, 0.4332])\n",
      "tensor([0.6045, 0.1213])\n",
      "tensor([3.3031, 0.4238])\n",
      "tensor([1.6217, 0.0215])\n",
      "tensor([0.5813, 0.0411])\n",
      "tensor([1.1279, 0.4461])\n",
      "tensor([3.1050, 0.2457])\n",
      "tensor([1.8681, 0.4083])\n",
      "tensor([2.7177, 0.2349])\n",
      "tensor([2.1196, 0.4584])\n",
      "tensor([2.0769, 0.1187])\n",
      "tensor([1.8021, 0.1891])\n",
      "tensor([2.0794, 0.3021])\n",
      "tensor([1.5114, 0.1003])\n",
      "tensor([1.0343, 0.2703])\n",
      "tensor([0.8236, 0.3374])\n",
      "tensor([2.0283, 0.0034])\n",
      "tensor([3.2418, 0.2987])\n",
      "tensor([3.2600, 0.1506])\n",
      "tensor([2.3554, 0.3419])\n",
      "tensor([3.4939, 0.2454])\n",
      "tensor([1.5648, 0.1690])\n",
      "tensor([2.9903, 0.1286])\n",
      "tensor([1.5886, 0.0581])\n",
      "tensor([2.2072, 0.0932])\n",
      "tensor([2.3997, 0.3190])\n",
      "tensor([3.2825, 0.4419])\n",
      "tensor([2.9842, 0.4663])\n",
      "tensor([1.1207, 0.0927])\n",
      "tensor([2.1829, 0.3226])\n",
      "tensor([1.9168, 0.2326])\n",
      "tensor([1.1401, 0.3030])\n",
      "tensor([2.1352, 0.3958])\n",
      "tensor([1.4622, 0.3334])\n",
      "tensor([2.3031, 0.1514])\n",
      "tensor([2.2233, 0.1858])\n",
      "tensor([1.2321, 0.2261])\n",
      "tensor([2.3485, 0.2722])\n",
      "tensor([3.1979, 0.1992])\n",
      "tensor([1.9184, 0.3477])\n",
      "tensor([1.6856, 0.4928])\n",
      "tensor([3.1704, 0.4855])\n",
      "tensor([0.9768, 0.3119])\n",
      "tensor([2.5172, 0.3062])\n",
      "tensor([1.3190, 0.0355])\n",
      "tensor([0.8128, 0.2621])\n",
      "tensor([1.8987, 0.0764])\n",
      "tensor([3.4069, 0.1546])\n",
      "tensor([3.2204, 0.3271])\n",
      "tensor([2.7354, 0.4344])\n",
      "tensor([3.2168, 0.1247])\n",
      "tensor([3.0659, 0.2458])\n",
      "tensor([1.9606, 0.3936])\n",
      "tensor([0.5953, 0.4677])\n",
      "tensor([3.1612, 0.3806])\n",
      "tensor([3.2024, 0.0446])\n",
      "tensor([2.7187, 0.1727])\n",
      "tensor([3.2231, 0.4564])\n",
      "tensor([2.6553, 0.2495])\n",
      "tensor([2.2757, 0.2235])\n",
      "tensor([2.9422, 0.0203])\n",
      "tensor([3.3111, 0.2196])\n",
      "tensor([2.9242, 0.1823])\n",
      "tensor([2.8539, 0.4885])\n",
      "tensor([3.4905, 0.4794])\n",
      "tensor([2.5730, 0.1404])\n",
      "tensor([2.9628, 0.1273])\n",
      "tensor([1.4456, 0.1018])\n",
      "tensor([2.2847, 0.1147])\n",
      "tensor([1.8869, 0.4329])\n",
      "tensor([0.8467, 0.2858])\n",
      "tensor([2.1000, 0.3411])\n",
      "tensor([3.1524, 0.4096])\n",
      "tensor([0.9864, 0.0528])\n",
      "tensor([0.6071, 0.4007])\n",
      "tensor([2.5199, 0.2447])\n",
      "tensor([2.7140, 0.2818])\n",
      "tensor([3.0148, 0.3726])\n",
      "tensor([1.4467, 0.2189])\n",
      "tensor([3.2878, 0.2022])\n",
      "tensor([1.7046, 0.4875])\n",
      "tensor([0.6484, 0.4216])\n",
      "tensor([1.0016, 0.4766])\n",
      "tensor([2.1779, 0.3510])\n",
      "tensor([1.9435, 0.3749])\n",
      "tensor([1.1321, 0.3793])\n",
      "tensor([1.0657, 0.4397])\n",
      "tensor([1.1838, 0.0807])\n",
      "tensor([1.2226, 0.4398])\n",
      "tensor([3.0940, 0.0835])\n",
      "tensor([1.4555, 0.3694])\n",
      "tensor([2.4345, 0.0090])\n",
      "tensor([0.9253, 0.4660])\n",
      "tensor([3.1861, 0.2294])\n",
      "tensor([0.7694, 0.4365])\n",
      "tensor([2.4980, 0.2741])\n",
      "tensor([3.0109, 0.2254])\n",
      "tensor([1.5536, 0.2194])\n",
      "tensor([2.7465, 0.1470])\n",
      "tensor([3.0667, 0.1144])\n",
      "tensor([2.1333, 0.3603])\n",
      "tensor([1.7023, 0.1444])\n",
      "tensor([0.5900, 0.4392])\n",
      "tensor([0.6118, 0.1956])\n",
      "tensor([3.1808, 0.4127])\n",
      "tensor([1.7954, 0.1692])\n",
      "tensor([2.6151, 0.3357])\n",
      "tensor([1.9113, 0.0350])\n",
      "tensor([3.1741, 0.0656])\n",
      "tensor([3.0132, 0.2034])\n",
      "tensor([3.1306, 0.3621])\n",
      "tensor([2.5392, 0.1202])\n",
      "tensor([1.9188, 0.2936])\n",
      "tensor([0.7952, 0.1535])\n",
      "tensor([1.1494, 0.0681])\n",
      "tensor([2.9257, 0.1752])\n",
      "tensor([2.1067, 0.4784])\n",
      "tensor([0.5773, 0.4877])\n",
      "tensor([2.0327, 0.1158])\n",
      "tensor([0.6055, 0.0474])\n",
      "tensor([1.9155, 0.3768])\n",
      "tensor([3.2135, 0.3575])\n",
      "tensor([0.9434, 0.2509])\n",
      "tensor([3.1957, 0.3456])\n",
      "tensor([2.7786, 0.0712])\n",
      "tensor([1.1503, 0.2272])\n",
      "tensor([3.1754e+00, 1.9956e-03])\n",
      "tensor([1.2059, 0.2394])\n",
      "tensor([2.3459, 0.4295])\n",
      "tensor([0.7987, 0.4182])\n",
      "tensor([1.2060, 0.0281])\n",
      "tensor([2.3788, 0.3065])\n",
      "tensor([2.6227, 0.1280])\n",
      "tensor([1.5359, 0.2222])\n",
      "tensor([1.6200, 0.3162])\n",
      "tensor([3.0633, 0.0824])\n",
      "tensor([2.7134, 0.4865])\n",
      "tensor([1.8331, 0.3910])\n",
      "tensor([1.1556, 0.3333])\n",
      "tensor([0.6640, 0.3720])\n",
      "tensor([2.4894, 0.3687])\n",
      "tensor([3.4910, 0.0131])\n",
      "tensor([1.1140, 0.2349])\n",
      "tensor([2.7681, 0.0649])\n",
      "tensor([3.1946, 0.3839])\n",
      "tensor([1.7743, 0.0557])\n",
      "tensor([0.8773, 0.2760])\n",
      "tensor([2.0664, 0.0983])\n",
      "tensor([1.6063, 0.2852])\n",
      "tensor([3.1670, 0.3820])\n",
      "tensor([3.3684, 0.1165])\n",
      "tensor([0.9562, 0.2078])\n",
      "tensor([3.3077, 0.1634])\n",
      "tensor([3.0470, 0.3150])\n",
      "tensor([1.0683, 0.1438])\n",
      "tensor([1.1797, 0.4983])\n",
      "tensor([2.1733, 0.0275])\n",
      "tensor([2.4026, 0.1011])\n",
      "tensor([1.0067, 0.3463])\n",
      "tensor([3.2761, 0.0614])\n",
      "tensor([2.1260, 0.4105])\n",
      "tensor([2.6928, 0.1649])\n",
      "tensor([3.1412, 0.3554])\n",
      "tensor([2.7161, 0.2492])\n",
      "tensor([2.8489, 0.0784])\n",
      "tensor([2.4739, 0.3881])\n",
      "tensor([2.4459, 0.0888])\n",
      "tensor([1.6757, 0.2105])\n",
      "tensor([1.1945, 0.0355])\n",
      "tensor([1.3025e+00, 6.8277e-04])\n",
      "tensor([2.1365, 0.1378])\n",
      "tensor([3.1913, 0.3300])\n",
      "tensor([2.0884, 0.0408])\n",
      "tensor([1.1561, 0.2160])\n",
      "tensor([2.6664, 0.0312])\n",
      "tensor([2.2927, 0.2471])\n",
      "tensor([2.1206, 0.2149])\n",
      "tensor([2.3318, 0.3163])\n",
      "tensor([2.0879, 0.4243])\n",
      "tensor([2.6672, 0.2694])\n",
      "tensor([0.7394, 0.4602])\n",
      "tensor([2.0386, 0.3995])\n",
      "tensor([1.7615, 0.2409])\n",
      "tensor([3.3609, 0.3850])\n",
      "tensor([0.7251, 0.1941])\n",
      "tensor([2.6858, 0.0742])\n",
      "tensor([2.9764, 0.1620])\n",
      "tensor([0.6459, 0.0070])\n",
      "tensor([2.6058, 0.4799])\n",
      "tensor([1.2894, 0.3963])\n",
      "tensor([3.4397, 0.0101])\n",
      "tensor([2.2937, 0.1160])\n",
      "tensor([2.0870, 0.4247])\n",
      "tensor([0.9848, 0.2662])\n",
      "tensor([2.7915, 0.3325])\n",
      "tensor([2.8904, 0.1005])\n",
      "tensor([1.2383, 0.3059])\n",
      "tensor([1.8248, 0.0373])\n",
      "tensor([2.6707, 0.0432])\n",
      "tensor([1.8782, 0.3168])\n",
      "tensor([3.0154, 0.0532])\n",
      "tensor([3.4522, 0.4490])\n",
      "tensor([2.2766, 0.2699])\n",
      "tensor([0.6438, 0.2995])\n",
      "tensor([1.0965, 0.0432])\n",
      "tensor([0.9953, 0.2791])\n",
      "tensor([1.6684, 0.2880])\n",
      "tensor([0.7173, 0.1605])\n",
      "tensor([0.8124, 0.4745])\n",
      "tensor([2.2929, 0.2297])\n",
      "tensor([1.7828, 0.4105])\n",
      "tensor([1.2268, 0.3369])\n",
      "tensor([2.5743, 0.2504])\n",
      "tensor([2.3239, 0.4811])\n",
      "tensor([2.9688, 0.4747])\n",
      "tensor([2.8069, 0.0507])\n",
      "tensor([2.5250, 0.0550])\n",
      "tensor([0.6543, 0.0550])\n",
      "tensor([0.5928, 0.4775])\n",
      "tensor([2.7558, 0.2258])\n",
      "tensor([2.0217, 0.3385])\n",
      "tensor([2.0460, 0.3679])\n",
      "tensor([2.5305, 0.0909])\n",
      "tensor([2.9829, 0.0192])\n",
      "tensor([1.5402, 0.2707])\n",
      "tensor([0.8891, 0.0635])\n",
      "tensor([1.3532, 0.3392])\n",
      "tensor([1.9507, 0.1612])\n",
      "tensor([1.2310, 0.4562])\n",
      "tensor([3.2106, 0.1374])\n",
      "tensor([2.9559, 0.2010])\n",
      "tensor([0.6246, 0.0398])\n",
      "tensor([2.7699, 0.0183])\n",
      "tensor([0.5971, 0.0400])\n",
      "tensor([0.5004, 0.2247])\n",
      "tensor([0.9383, 0.2998])\n",
      "tensor([3.3441, 0.0552])\n",
      "tensor([2.4016, 0.2437])\n",
      "tensor([2.0024, 0.4356])\n",
      "tensor([2.9442, 0.1143])\n",
      "tensor([2.3384, 0.0549])\n",
      "tensor([1.8133, 0.2749])\n",
      "tensor([2.8352, 0.0954])\n",
      "tensor([2.0879, 0.0089])\n",
      "tensor([1.1066, 0.4780])\n",
      "tensor([0.9707, 0.4887])\n",
      "tensor([1.8391, 0.4485])\n",
      "tensor([2.6547, 0.2601])\n",
      "tensor([2.5539, 0.2173])\n",
      "tensor([2.1456, 0.3003])\n",
      "tensor([2.7503, 0.4559])\n",
      "tensor([0.5768, 0.3932])\n",
      "tensor([1.9876, 0.3578])\n",
      "tensor([1.2970, 0.3182])\n",
      "tensor([1.6551, 0.4749])\n",
      "tensor([2.5151, 0.3063])\n",
      "tensor([0.8299, 0.1449])\n",
      "tensor([0.6317, 0.0029])\n",
      "tensor([1.9035, 0.1114])\n",
      "tensor([2.1235, 0.3057])\n",
      "tensor([2.6168, 0.3716])\n",
      "tensor([2.2234, 0.1461])\n",
      "tensor([1.9750, 0.4926])\n",
      "tensor([1.6632, 0.3426])\n",
      "tensor([2.8509, 0.0333])\n",
      "tensor([3.2908, 0.2765])\n",
      "tensor([1.9712, 0.4656])\n",
      "tensor([2.7532, 0.3936])\n",
      "tensor([3.2065, 0.3603])\n",
      "tensor([1.1213, 0.3607])\n",
      "tensor([0.9447, 0.1323])\n",
      "tensor([0.8097, 0.4486])\n",
      "tensor([1.1008, 0.1674])\n",
      "tensor([1.7219, 0.4215])\n",
      "tensor([2.1937, 0.0421])\n",
      "tensor([2.4019, 0.3816])\n",
      "tensor([2.2599, 0.4462])\n",
      "tensor([2.0111, 0.3517])\n",
      "tensor([3.2930, 0.4086])\n",
      "tensor([2.3181, 0.3136])\n",
      "tensor([1.5784, 0.2740])\n",
      "tensor([1.8031, 0.0914])\n",
      "tensor([1.1420, 0.0791])\n",
      "tensor([1.8827, 0.1080])\n",
      "tensor([2.5308, 0.4659])\n",
      "tensor([3.1289, 0.1858])\n",
      "tensor([2.2719, 0.2601])\n",
      "tensor([2.2063, 0.1845])\n",
      "tensor([0.7291, 0.0375])\n",
      "tensor([1.3279, 0.2483])\n",
      "tensor([2.7223, 0.3618])\n",
      "tensor([1.6381, 0.4206])\n",
      "tensor([2.0879, 0.1033])\n",
      "tensor([3.4979, 0.1019])\n",
      "tensor([3.1160, 0.4097])\n",
      "tensor([2.1388, 0.4710])\n",
      "tensor([2.7728, 0.1740])\n",
      "tensor([1.6359, 0.2446])\n",
      "tensor([0.7841, 0.3257])\n",
      "tensor([3.0186, 0.4702])\n",
      "tensor([3.1286, 0.0453])\n",
      "tensor([0.9478, 0.1350])\n",
      "tensor([3.2000, 0.1452])\n",
      "tensor([2.1918, 0.0109])\n",
      "tensor([2.2513, 0.0524])\n",
      "tensor([2.1446, 0.1640])\n",
      "tensor([1.9114, 0.1788])\n",
      "tensor([2.3547, 0.1918])\n",
      "tensor([0.6176, 0.1438])\n",
      "tensor([2.8311, 0.4689])\n",
      "tensor([0.7953, 0.0737])\n",
      "tensor([1.4399, 0.1495])\n",
      "tensor([2.8122, 0.3810])\n",
      "tensor([2.1633, 0.2817])\n",
      "tensor([1.6760, 0.3176])\n",
      "tensor([3.4240, 0.4914])\n",
      "tensor([2.0730, 0.1769])\n",
      "tensor([1.9546, 0.2730])\n",
      "tensor([2.4436, 0.2158])\n",
      "tensor([2.1741, 0.3790])\n",
      "tensor([1.2618, 0.2705])\n",
      "tensor([0.8175, 0.0810])\n",
      "tensor([2.0041, 0.2656])\n",
      "tensor([1.1442, 0.1877])\n",
      "tensor([2.0423, 0.4463])\n",
      "tensor([1.7007, 0.1184])\n",
      "tensor([1.4123, 0.2520])\n",
      "tensor([1.8272, 0.3013])\n",
      "tensor([3.3058, 0.1943])\n",
      "tensor([3.2259, 0.3638])\n",
      "tensor([2.0133, 0.4457])\n",
      "tensor([0.5173, 0.4421])\n",
      "tensor([3.1827, 0.3804])\n",
      "tensor([3.4086, 0.2496])\n",
      "tensor([1.4083, 0.2535])\n",
      "tensor([1.1437, 0.1170])\n",
      "tensor([1.3640, 0.2302])\n",
      "tensor([2.7647, 0.3137])\n",
      "tensor([0.5515, 0.4930])\n",
      "tensor([1.9950, 0.0533])\n",
      "tensor([1.7845, 0.4028])\n",
      "tensor([3.0526, 0.3998])\n",
      "tensor([1.2562, 0.2121])\n",
      "tensor([0.5891, 0.0018])\n",
      "tensor([1.3183, 0.4302])\n",
      "tensor([3.1134, 0.2430])\n",
      "tensor([3.4682, 0.3506])\n",
      "tensor([1.9725, 0.1360])\n",
      "tensor([2.1659, 0.3961])\n",
      "tensor([1.1081, 0.1577])\n",
      "tensor([2.5012, 0.0152])\n",
      "tensor([0.9572, 0.4012])\n",
      "tensor([1.1293, 0.2926])\n",
      "tensor([0.6905, 0.4134])\n",
      "tensor([1.7729, 0.2974])\n",
      "tensor([2.9866, 0.0941])\n",
      "tensor([2.9586, 0.0216])\n",
      "tensor([3.1004, 0.2253])\n",
      "tensor([0.8280, 0.0581])\n",
      "tensor([2.6391, 0.3709])\n",
      "tensor([2.9015, 0.4904])\n",
      "tensor([2.1008, 0.0181])\n",
      "tensor([0.5384, 0.2955])\n",
      "tensor([2.9021, 0.0093])\n",
      "tensor([0.5944, 0.4540])\n",
      "tensor([1.7591, 0.0361])\n",
      "tensor([0.6270, 0.1916])\n",
      "tensor([2.1458, 0.1187])\n",
      "tensor([3.1556, 0.1716])\n",
      "tensor([1.6111, 0.1971])\n",
      "tensor([0.8859, 0.2021])\n",
      "tensor([1.9378, 0.4367])\n",
      "tensor([2.7099, 0.1168])\n",
      "tensor([2.0674, 0.1635])\n",
      "tensor([2.5859, 0.1464])\n",
      "tensor([2.3085, 0.2584])\n",
      "tensor([1.2124, 0.0960])\n",
      "tensor([1.8888, 0.1060])\n",
      "tensor([2.6122, 0.3835])\n",
      "tensor([3.2858, 0.2614])\n",
      "tensor([1.0017, 0.1332])\n",
      "tensor([3.2826, 0.0997])\n",
      "tensor([2.3379, 0.1872])\n",
      "tensor([2.3038, 0.4154])\n",
      "tensor([3.2246, 0.4553])\n",
      "tensor([1.5867, 0.4653])\n",
      "tensor([1.9092, 0.3244])\n",
      "tensor([3.3084, 0.0490])\n",
      "tensor([1.6340, 0.2349])\n",
      "tensor([2.4619, 0.4505])\n",
      "tensor([1.7778, 0.2327])\n",
      "tensor([2.2497, 0.1894])\n",
      "tensor([2.4261, 0.2170])\n",
      "tensor([0.7984, 0.4621])\n",
      "tensor([3.2735, 0.3120])\n",
      "tensor([2.0444, 0.0789])\n",
      "tensor([3.1562, 0.2029])\n",
      "tensor([3.3609, 0.4506])\n",
      "tensor([2.5074, 0.0999])\n",
      "tensor([1.9204, 0.3887])\n",
      "tensor([3.2858, 0.2660])\n",
      "tensor([3.4600, 0.2289])\n",
      "tensor([1.9184, 0.3234])\n",
      "tensor([1.4138, 0.0995])\n",
      "tensor([0.8352, 0.2910])\n",
      "tensor([3.4042, 0.2631])\n",
      "tensor([1.4724, 0.4290])\n",
      "tensor([3.3129, 0.3097])\n",
      "tensor([0.9381, 0.1639])\n",
      "tensor([2.7430, 0.1654])\n",
      "tensor([2.4282, 0.2801])\n",
      "tensor([3.0492, 0.2075])\n",
      "tensor([1.0173, 0.4724])\n",
      "tensor([2.4429, 0.0857])\n",
      "tensor([1.3201, 0.1252])\n",
      "tensor([2.3748, 0.2817])\n",
      "tensor([0.5437, 0.4879])\n",
      "tensor([3.0317, 0.2763])\n",
      "tensor([3.1256, 0.0815])\n",
      "tensor([2.2765, 0.2465])\n",
      "tensor([1.6824, 0.2366])\n",
      "tensor([1.1594, 0.2923])\n",
      "tensor([2.5735, 0.0802])\n",
      "tensor([0.6944, 0.0235])\n",
      "tensor([2.1687, 0.2632])\n",
      "tensor([1.2696, 0.1336])\n",
      "tensor([1.0224, 0.3232])\n",
      "tensor([0.7800, 0.0995])\n",
      "tensor([0.8676, 0.3701])\n",
      "tensor([2.7536, 0.2648])\n",
      "tensor([2.8012, 0.3095])\n",
      "tensor([3.2592, 0.3181])\n",
      "tensor([3.0401, 0.2220])\n",
      "tensor([3.2218, 0.2728])\n",
      "tensor([2.0912, 0.3487])\n",
      "tensor([1.2146, 0.0609])\n",
      "tensor([1.1232, 0.3318])\n",
      "tensor([1.7797, 0.4508])\n",
      "tensor([2.0902, 0.4065])\n",
      "tensor([2.5309, 0.3585])\n",
      "tensor([2.0095, 0.4980])\n",
      "tensor([1.6385, 0.1847])\n",
      "tensor([2.8083, 0.2345])\n",
      "tensor([1.8230, 0.3893])\n",
      "tensor([3.1680, 0.1131])\n",
      "tensor([2.0740, 0.3983])\n",
      "tensor([1.0775, 0.3480])\n",
      "tensor([1.2800, 0.1653])\n",
      "tensor([2.8962, 0.1425])\n",
      "tensor([2.9051, 0.1024])\n",
      "tensor([2.1640, 0.2798])\n",
      "tensor([3.3886, 0.4297])\n",
      "tensor([1.6405, 0.0720])\n",
      "tensor([2.0866, 0.1051])\n",
      "tensor([1.5693, 0.1231])\n",
      "tensor([3.1130, 0.4529])\n",
      "tensor([1.3554, 0.4464])\n",
      "tensor([2.1349, 0.2003])\n",
      "tensor([2.1068, 0.3037])\n",
      "tensor([2.0840, 0.4455])\n",
      "tensor([0.7309, 0.0296])\n",
      "tensor([2.6728, 0.4542])\n",
      "tensor([3.4905, 0.2823])\n",
      "tensor([1.5647, 0.3277])\n",
      "tensor([1.5418, 0.3886])\n",
      "tensor([3.1076, 0.4537])\n",
      "tensor([3.4342, 0.2028])\n",
      "tensor([3.4231, 0.2626])\n",
      "tensor([1.3024, 0.1691])\n",
      "tensor([0.9642, 0.4857])\n",
      "tensor([2.5100, 0.1064])\n",
      "tensor([0.9897, 0.4502])\n",
      "tensor([0.8981, 0.1994])\n",
      "tensor([2.1131, 0.2471])\n",
      "tensor([0.8393, 0.1882])\n",
      "tensor([1.2240, 0.1521])\n",
      "tensor([0.8968, 0.4169])\n",
      "tensor([2.5515, 0.3563])\n",
      "tensor([0.8169, 0.2885])\n",
      "tensor([1.6035, 0.1224])\n",
      "tensor([0.9023, 0.0381])\n",
      "tensor([3.4559, 0.0765])\n",
      "tensor([3.4665, 0.3812])\n",
      "tensor([1.3822, 0.0336])\n",
      "tensor([1.2595, 0.0527])\n",
      "tensor([1.6889, 0.3381])\n",
      "tensor([1.6050, 0.4530])\n",
      "tensor([1.5385, 0.0186])\n",
      "tensor([2.2842, 0.2987])\n",
      "tensor([1.9868, 0.3962])\n",
      "tensor([2.0201, 0.2090])\n",
      "tensor([1.9296, 0.4947])\n",
      "tensor([3.3450, 0.4772])\n",
      "tensor([0.6114, 0.3566])\n",
      "tensor([1.7209, 0.0965])\n",
      "tensor([3.2381, 0.1021])\n",
      "tensor([3.1445, 0.2416])\n",
      "tensor([1.4368, 0.2288])\n",
      "tensor([1.8957, 0.4358])\n",
      "tensor([1.0727, 0.3072])\n",
      "tensor([0.5686, 0.4194])\n",
      "tensor([0.7021, 0.3211])\n",
      "tensor([0.9149, 0.0434])\n",
      "tensor([1.2910, 0.3846])\n",
      "tensor([2.0528, 0.1879])\n",
      "tensor([2.9364, 0.3340])\n",
      "tensor([1.6858, 0.1329])\n",
      "tensor([0.7161, 0.1203])\n",
      "tensor([1.1352, 0.4925])\n",
      "tensor([2.6736, 0.2650])\n",
      "tensor([2.8839, 0.4022])\n",
      "tensor([0.7025, 0.4743])\n",
      "tensor([1.2825, 0.2888])\n",
      "tensor([3.0869, 0.4190])\n",
      "tensor([2.8299, 0.4829])\n",
      "tensor([1.2577, 0.2699])\n",
      "tensor([1.4608, 0.1447])\n",
      "tensor([2.1921, 0.1015])\n",
      "tensor([0.7738, 0.0194])\n",
      "tensor([1.8611, 0.4499])\n",
      "tensor([0.6264, 0.0515])\n",
      "tensor([0.8317, 0.3324])\n",
      "tensor([3.3079, 0.1206])\n",
      "tensor([3.1312, 0.0600])\n",
      "tensor([1.7450, 0.0142])\n",
      "tensor([2.3732, 0.2834])\n",
      "tensor([2.6573, 0.1841])\n",
      "tensor([3.4603, 0.2456])\n",
      "tensor([1.6343, 0.3299])\n",
      "tensor([3.4937, 0.2753])\n",
      "tensor([1.9355, 0.1298])\n",
      "tensor([0.5393, 0.4397])\n",
      "tensor([2.2858, 0.0278])\n",
      "tensor([2.0870, 0.3493])\n",
      "tensor([2.1775, 0.3758])\n",
      "tensor([1.7362, 0.1323])\n",
      "tensor([1.8337, 0.0582])\n",
      "tensor([3.3257, 0.1690])\n",
      "tensor([2.6247, 0.4761])\n",
      "tensor([0.8454, 0.3611])\n",
      "tensor([1.8262, 0.3637])\n",
      "tensor([1.1350, 0.1064])\n",
      "tensor([0.9922, 0.4883])\n",
      "tensor([2.7836, 0.1234])\n",
      "tensor([3.2638, 0.2441])\n",
      "tensor([3.0848, 0.4780])\n",
      "tensor([3.1917, 0.2825])\n",
      "tensor([1.2142, 0.1977])\n",
      "tensor([1.8473, 0.4203])\n",
      "tensor([1.0504, 0.3723])\n",
      "tensor([0.7746, 0.2947])\n",
      "tensor([2.5627, 0.4834])\n",
      "tensor([1.5518, 0.1828])\n",
      "tensor([1.2061, 0.0958])\n",
      "tensor([2.1487, 0.0801])\n",
      "tensor([3.0063, 0.1786])\n",
      "tensor([1.2342, 0.3421])\n",
      "tensor([1.0096, 0.4792])\n",
      "tensor([2.3352, 0.1289])\n",
      "tensor([1.4250, 0.2263])\n",
      "tensor([2.6762, 0.4229])\n",
      "tensor([3.2392, 0.2638])\n",
      "tensor([1.0767, 0.0942])\n",
      "tensor([1.4903, 0.4161])\n",
      "tensor([1.0882, 0.2083])\n",
      "tensor([2.4767, 0.3381])\n",
      "tensor([2.1453, 0.1953])\n",
      "tensor([3.2830, 0.2749])\n",
      "tensor([0.6910, 0.4011])\n",
      "tensor([2.2705, 0.4153])\n",
      "tensor([2.8834, 0.4078])\n",
      "tensor([3.4005, 0.3090])\n",
      "tensor([1.6253, 0.0152])\n",
      "tensor([1.7971, 0.1304])\n",
      "tensor([1.5059, 0.0905])\n",
      "tensor([1.4280, 0.4711])\n",
      "tensor([1.8895, 0.4879])\n",
      "tensor([0.8186, 0.3640])\n",
      "tensor([2.1715, 0.3924])\n",
      "tensor([1.3951, 0.1081])\n",
      "tensor([1.1377, 0.0681])\n",
      "tensor([3.1031, 0.3092])\n",
      "tensor([2.2226, 0.3045])\n",
      "tensor([1.1205, 0.0396])\n",
      "tensor([2.6108, 0.2587])\n",
      "tensor([1.0890, 0.1742])\n",
      "tensor([1.5773, 0.3795])\n",
      "tensor([1.0853, 0.4489])\n",
      "tensor([0.6720, 0.2208])\n",
      "tensor([0.6165, 0.2673])\n",
      "tensor([2.7162, 0.3352])\n",
      "tensor([1.7593, 0.1878])\n",
      "tensor([2.5644, 0.3500])\n",
      "tensor([3.1691, 0.0452])\n",
      "tensor([2.1145, 0.4860])\n",
      "tensor([0.8718, 0.3403])\n",
      "tensor([3.4895, 0.2037])\n",
      "tensor([2.9223, 0.1533])\n",
      "tensor([3.3625, 0.1501])\n",
      "tensor([0.7864, 0.1167])\n",
      "tensor([1.8582, 0.2325])\n",
      "tensor([2.5224, 0.1107])\n",
      "tensor([1.1276, 0.2577])\n",
      "tensor([1.5589, 0.2020])\n",
      "tensor([0.5888, 0.0544])\n",
      "tensor([0.9028, 0.0514])\n",
      "tensor([2.7420, 0.0245])\n",
      "tensor([2.2241, 0.0317])\n",
      "tensor([2.9874, 0.3581])\n",
      "tensor([2.7263, 0.1887])\n",
      "tensor([1.6784, 0.0622])\n",
      "tensor([1.6154, 0.4696])\n",
      "tensor([1.8123, 0.0127])\n",
      "tensor([0.8391, 0.3644])\n",
      "tensor([0.8837, 0.0707])\n",
      "tensor([1.6008, 0.3980])\n",
      "tensor([2.9159, 0.3020])\n",
      "tensor([1.4441, 0.0329])\n",
      "tensor([1.2649, 0.2022])\n",
      "tensor([2.8608, 0.1595])\n",
      "tensor([1.0864, 0.1523])\n",
      "tensor([1.1200, 0.2191])\n",
      "tensor([3.2789, 0.2465])\n",
      "tensor([3.4448, 0.1201])\n",
      "tensor([3.0470, 0.0455])\n",
      "tensor([3.4481, 0.1954])\n",
      "tensor([2.1737, 0.0567])\n",
      "tensor([2.1348, 0.4977])\n",
      "tensor([2.8619, 0.2411])\n",
      "tensor([0.5999, 0.2681])\n",
      "tensor([2.0633, 0.2154])\n",
      "tensor([2.1546, 0.2375])\n",
      "tensor([1.0717, 0.0130])\n",
      "tensor([0.9202, 0.3729])\n",
      "tensor([0.7206, 0.3928])\n",
      "tensor([0.7770, 0.0369])\n",
      "tensor([1.8298, 0.3268])\n",
      "tensor([2.5748, 0.2746])\n",
      "tensor([0.5905, 0.4738])\n",
      "tensor([2.6669, 0.2726])\n",
      "tensor([0.7545, 0.3080])\n",
      "tensor([0.9743, 0.3578])\n",
      "tensor([3.3785, 0.2374])\n",
      "tensor([2.7911, 0.2250])\n",
      "tensor([1.7471, 0.0747])\n",
      "tensor([2.5447, 0.4283])\n",
      "tensor([0.8841, 0.1206])\n",
      "tensor([2.2408, 0.1011])\n",
      "tensor([2.1797, 0.2704])\n",
      "tensor([0.7848, 0.2133])\n",
      "tensor([2.3383, 0.0600])\n",
      "tensor([2.4130, 0.2194])\n",
      "tensor([0.6291, 0.3660])\n",
      "tensor([1.0025, 0.2604])\n",
      "tensor([2.2777, 0.0615])\n",
      "tensor([0.6169, 0.0666])\n",
      "tensor([2.6439, 0.4787])\n",
      "tensor([2.7845, 0.2990])\n",
      "tensor([0.6943, 0.3252])\n",
      "tensor([0.6888, 0.4523])\n",
      "tensor([2.9655, 0.0597])\n",
      "tensor([2.5059, 0.2443])\n",
      "tensor([0.8630, 0.4211])\n",
      "tensor([2.4581, 0.3099])\n",
      "tensor([2.4744, 0.2855])\n",
      "tensor([2.7967, 0.3159])\n",
      "tensor([3.1433, 0.1663])\n",
      "tensor([1.9294, 0.3146])\n",
      "tensor([1.7029, 0.2708])\n",
      "tensor([2.4987, 0.1280])\n",
      "tensor([3.1404, 0.3663])\n",
      "tensor([2.3707, 0.3970])\n",
      "tensor([2.4177, 0.3449])\n",
      "tensor([1.2715, 0.2937])\n",
      "tensor([2.9106, 0.2452])\n",
      "tensor([1.7495, 0.2869])\n",
      "tensor([3.3385, 0.4459])\n",
      "tensor([1.5510, 0.3698])\n",
      "tensor([2.6349, 0.4925])\n",
      "tensor([2.0707, 0.3608])\n",
      "tensor([3.2180, 0.2747])\n",
      "tensor([0.6593, 0.3846])\n",
      "tensor([1.3704, 0.0376])\n",
      "tensor([2.2298, 0.2258])\n",
      "tensor([2.1192, 0.2825])\n",
      "tensor([1.3774, 0.1452])\n",
      "tensor([1.8675, 0.2968])\n",
      "tensor([2.9460, 0.2321])\n",
      "tensor([0.5291, 0.3107])\n",
      "tensor([2.7130, 0.2078])\n",
      "tensor([1.2873, 0.3360])\n",
      "tensor([0.6509, 0.0887])\n",
      "tensor([3.4972, 0.4893])\n",
      "tensor([1.4353, 0.1277])\n",
      "tensor([0.5347, 0.0776])\n",
      "tensor([0.7929, 0.1683])\n",
      "tensor([3.0849, 0.4155])\n",
      "tensor([3.3355, 0.4364])\n",
      "tensor([3.3505, 0.1109])\n",
      "tensor([3.3518, 0.3367])\n",
      "tensor([0.6086, 0.1052])\n",
      "tensor([3.2679, 0.1702])\n",
      "tensor([0.8958, 0.0629])\n",
      "tensor([1.4951, 0.4078])\n",
      "tensor([1.4448, 0.2240])\n",
      "tensor([3.1915, 0.4106])\n",
      "tensor([1.9042, 0.0437])\n",
      "tensor([2.7668, 0.3049])\n",
      "tensor([1.1424, 0.2489])\n",
      "tensor([2.8024, 0.3159])\n",
      "tensor([2.6477, 0.4670])\n",
      "tensor([0.5057, 0.2669])\n",
      "tensor([1.0651, 0.1956])\n",
      "tensor([1.3196, 0.0785])\n",
      "tensor([0.6333, 0.4085])\n",
      "tensor([1.2095, 0.2813])\n",
      "tensor([2.8908, 0.1922])\n",
      "tensor([1.1472, 0.1816])\n",
      "tensor([1.2190, 0.3049])\n",
      "tensor([0.5555, 0.3771])\n",
      "tensor([0.8020, 0.2844])\n",
      "tensor([3.2103, 0.1805])\n",
      "tensor([0.9772, 0.4890])\n",
      "tensor([1.7563, 0.4371])\n",
      "tensor([3.4527, 0.4428])\n",
      "tensor([1.1925, 0.3148])\n",
      "tensor([3.4364, 0.3298])\n",
      "tensor([1.0677, 0.4425])\n",
      "tensor([1.9613, 0.2704])\n",
      "tensor([2.0869, 0.2769])\n",
      "tensor([1.2328, 0.4553])\n",
      "tensor([0.5219, 0.4345])\n",
      "tensor([2.2471, 0.2856])\n",
      "tensor([2.3186, 0.0948])\n",
      "tensor([0.5560, 0.2117])\n",
      "tensor([0.7997, 0.4732])\n",
      "tensor([1.6564, 0.0698])\n",
      "tensor([1.6687, 0.4591])\n",
      "tensor([2.1373, 0.4008])\n",
      "tensor([2.7931, 0.4944])\n",
      "tensor([2.8075, 0.2949])\n",
      "tensor([2.2480, 0.2248])\n",
      "tensor([3.0078, 0.1283])\n",
      "tensor([2.4250, 0.0781])\n",
      "tensor([0.7890, 0.0090])\n",
      "tensor([1.4694, 0.3341])\n",
      "tensor([2.7730, 0.2014])\n",
      "tensor([1.2793, 0.0712])\n",
      "tensor([2.5515, 0.2349])\n",
      "tensor([1.0786, 0.0546])\n",
      "tensor([2.2427, 0.0122])\n",
      "tensor([1.6849, 0.3119])\n",
      "tensor([2.6694, 0.1564])\n",
      "tensor([2.8317, 0.4164])\n",
      "tensor([3.0533, 0.4489])\n",
      "tensor([2.0811, 0.1986])\n",
      "tensor([1.0429, 0.1782])\n",
      "tensor([2.5920, 0.2003])\n",
      "tensor([1.3417, 0.4331])\n",
      "tensor([2.7957, 0.1378])\n",
      "tensor([3.0420, 0.3398])\n",
      "tensor([1.2440, 0.1505])\n",
      "tensor([2.5009, 0.4087])\n",
      "tensor([3.3381, 0.0507])\n",
      "tensor([2.1554, 0.2404])\n",
      "tensor([2.2820, 0.2429])\n",
      "tensor([3.0950, 0.2020])\n",
      "tensor([0.9602, 0.2817])\n",
      "tensor([0.8748, 0.3277])\n",
      "tensor([2.8312, 0.3983])\n",
      "tensor([2.1181, 0.4362])\n",
      "tensor([1.3567, 0.1423])\n",
      "tensor([1.0721, 0.4457])\n",
      "tensor([2.7317, 0.1080])\n",
      "tensor([1.8765, 0.3023])\n",
      "tensor([0.6655, 0.0567])\n",
      "tensor([2.0429, 0.3762])\n",
      "tensor([3.2224, 0.4321])\n",
      "tensor([1.8023, 0.0578])\n",
      "tensor([2.6887, 0.1573])\n",
      "tensor([1.3034, 0.3233])\n",
      "tensor([1.2821, 0.4936])\n",
      "tensor([0.6588, 0.1041])\n",
      "tensor([2.8762, 0.4304])\n",
      "tensor([0.9389, 0.1258])\n",
      "tensor([2.4672, 0.4078])\n",
      "tensor([2.5922, 0.1227])\n",
      "tensor([1.3568, 0.4037])\n",
      "tensor([3.0999, 0.0269])\n",
      "tensor([0.8797, 0.4864])\n",
      "tensor([1.8619, 0.4380])\n",
      "tensor([1.1520, 0.0378])\n",
      "tensor([2.8943, 0.0428])\n",
      "tensor([1.6616, 0.3575])\n",
      "tensor([3.2551, 0.2583])\n",
      "tensor([0.5944, 0.2047])\n",
      "tensor([2.3809, 0.2910])\n",
      "tensor([1.3956, 0.1556])\n",
      "tensor([3.3925, 0.3138])\n",
      "tensor([1.8988, 0.2411])\n",
      "tensor([0.7264, 0.0755])\n",
      "tensor([0.9576, 0.4732])\n",
      "tensor([3.0152, 0.0512])\n",
      "tensor([2.2592, 0.0086])\n",
      "tensor([0.9739, 0.4011])\n",
      "tensor([1.6408, 0.2080])\n",
      "tensor([1.2265, 0.1894])\n",
      "tensor([0.5738, 0.4979])\n",
      "tensor([1.9115, 0.4450])\n",
      "tensor([2.6939, 0.3177])\n",
      "tensor([1.6354, 0.3363])\n",
      "tensor([0.6767, 0.2616])\n",
      "tensor([1.2933, 0.2627])\n",
      "tensor([2.2466, 0.4628])\n",
      "tensor([2.9308, 0.1036])\n",
      "tensor([3.2293, 0.2232])\n",
      "tensor([1.2946, 0.1080])\n",
      "tensor([2.9046, 0.4128])\n",
      "tensor([1.0086, 0.4529])\n",
      "tensor([2.3606, 0.1468])\n",
      "tensor([2.5789, 0.3167])\n",
      "tensor([0.8322, 0.1064])\n",
      "tensor([1.8078, 0.0976])\n",
      "tensor([0.9512, 0.4797])\n",
      "tensor([2.8030, 0.2638])\n",
      "tensor([2.0838, 0.1609])\n",
      "tensor([2.0479, 0.1898])\n",
      "tensor([0.6369, 0.1270])\n",
      "tensor([1.3015, 0.4492])\n",
      "tensor([2.7834, 0.4270])\n",
      "tensor([1.7886, 0.3241])\n",
      "tensor([3.2640, 0.2379])\n",
      "tensor([2.9492, 0.4516])\n",
      "tensor([1.6975, 0.2924])\n",
      "tensor([3.2751, 0.4441])\n",
      "tensor([1.3563, 0.3398])\n",
      "tensor([1.1688, 0.4583])\n",
      "tensor([2.6753, 0.3277])\n",
      "tensor([2.7235, 0.0470])\n",
      "tensor([1.7419, 0.4482])\n",
      "tensor([0.9023, 0.4172])\n",
      "tensor([0.7145, 0.1563])\n",
      "tensor([2.2798, 0.2560])\n",
      "tensor([1.6284, 0.3688])\n",
      "tensor([1.1065, 0.2983])\n",
      "tensor([1.5392, 0.4147])\n",
      "tensor([2.4858, 0.0860])\n",
      "tensor([1.1316, 0.4915])\n",
      "tensor([1.0768, 0.1613])\n",
      "tensor([1.9916, 0.0160])\n",
      "tensor([2.0459, 0.0316])\n",
      "tensor([1.6825, 0.0542])\n",
      "tensor([0.6177, 0.1654])\n",
      "tensor([2.3918, 0.4557])\n",
      "tensor([1.6378, 0.2813])\n",
      "tensor([2.3724, 0.0451])\n",
      "tensor([1.4310, 0.3479])\n",
      "tensor([2.4428, 0.2580])\n",
      "tensor([0.8340, 0.2759])\n",
      "tensor([2.9716, 0.2388])\n",
      "tensor([1.2385, 0.3718])\n",
      "tensor([3.2629, 0.3880])\n",
      "tensor([3.3625, 0.2654])\n",
      "tensor([2.1368, 0.1746])\n",
      "tensor([0.7070, 0.1906])\n",
      "tensor([3.4082, 0.4609])\n",
      "tensor([2.1482, 0.0286])\n",
      "tensor([1.3464, 0.1379])\n",
      "tensor([1.5713, 0.2965])\n",
      "tensor([1.5962, 0.1231])\n",
      "tensor([0.8952, 0.3552])\n",
      "tensor([2.5309, 0.0607])\n",
      "tensor([1.3807, 0.1167])\n",
      "tensor([1.9244, 0.3829])\n",
      "tensor([3.3485, 0.2656])\n",
      "tensor([0.7045, 0.1151])\n",
      "tensor([0.8859, 0.2420])\n",
      "tensor([0.8331, 0.0356])\n",
      "tensor([0.8020, 0.4797])\n",
      "tensor([2.7936, 0.2572])\n",
      "tensor([2.1694, 0.0395])\n",
      "tensor([3.4700, 0.1857])\n",
      "tensor([1.0127, 0.0633])\n",
      "tensor([1.9476, 0.1119])\n",
      "tensor([3.1468, 0.4894])\n",
      "tensor([1.0969, 0.4729])\n",
      "tensor([2.5957, 0.3157])\n",
      "tensor([2.9687, 0.3330])\n",
      "tensor([1.5744, 0.3415])\n",
      "tensor([3.0148, 0.0204])\n",
      "tensor([0.9591, 0.0840])\n",
      "tensor([1.8012, 0.0861])\n",
      "tensor([1.6889, 0.0619])\n",
      "tensor([1.7323, 0.0880])\n",
      "tensor([1.3184, 0.3370])\n",
      "tensor([2.4549, 0.3652])\n",
      "tensor([3.2763, 0.4256])\n",
      "tensor([2.0398, 0.1358])\n",
      "tensor([2.8407, 0.0965])\n",
      "tensor([3.0797, 0.2184])\n",
      "tensor([0.9856, 0.1082])\n",
      "tensor([1.1220, 0.0171])\n",
      "tensor([2.3946, 0.0258])\n",
      "tensor([2.5675, 0.1574])\n",
      "tensor([3.4644, 0.2066])\n",
      "tensor([2.7091, 0.2650])\n",
      "tensor([0.9919, 0.1282])\n",
      "tensor([1.7201, 0.3926])\n",
      "tensor([1.6437, 0.3454])\n",
      "tensor([2.2990, 0.3817])\n",
      "tensor([1.8260, 0.0043])\n",
      "tensor([2.5105, 0.1943])\n",
      "tensor([1.0937, 0.2115])\n",
      "tensor([2.0383, 0.2497])\n",
      "tensor([2.4385, 0.2155])\n",
      "tensor([2.0759, 0.1911])\n",
      "tensor([0.8357, 0.2485])\n",
      "tensor([1.3166, 0.0583])\n",
      "tensor([1.6786, 0.4674])\n",
      "tensor([0.6647, 0.0363])\n",
      "tensor([0.6220, 0.4786])\n",
      "tensor([2.0854, 0.1234])\n",
      "tensor([3.0797, 0.4018])\n",
      "tensor([1.2587, 0.1605])\n",
      "tensor([2.2826, 0.2176])\n",
      "tensor([2.5463, 0.0820])\n",
      "tensor([0.6902, 0.1115])\n",
      "tensor([1.5723, 0.0095])\n",
      "tensor([1.2065, 0.1187])\n",
      "tensor([1.4861, 0.4147])\n",
      "tensor([2.8761, 0.0621])\n",
      "tensor([1.6188, 0.1182])\n",
      "tensor([1.2287, 0.2903])\n",
      "tensor([0.5824, 0.0036])\n",
      "tensor([3.4347, 0.1417])\n",
      "tensor([1.1813, 0.0943])\n",
      "tensor([0.9333, 0.4573])\n",
      "tensor([2.8805, 0.2414])\n",
      "tensor([0.6208, 0.4805])\n",
      "tensor([2.8574, 0.1252])\n",
      "tensor([1.8992, 0.2852])\n",
      "tensor([3.3836, 0.2994])\n",
      "tensor([2.7014, 0.1356])\n",
      "tensor([3.0222, 0.4198])\n",
      "tensor([2.9930, 0.2190])\n",
      "tensor([1.4306, 0.2071])\n",
      "tensor([2.9106, 0.0275])\n",
      "tensor([2.2020, 0.4467])\n",
      "tensor([0.7359, 0.3288])\n",
      "tensor([1.8369, 0.1821])\n",
      "tensor([3.1851, 0.2524])\n",
      "tensor([1.9972, 0.4336])\n",
      "tensor([1.6636, 0.1721])\n",
      "tensor([2.8055, 0.2265])\n",
      "tensor([3.3171, 0.4877])\n",
      "tensor([0.7424, 0.1492])\n",
      "tensor([3.4718, 0.4690])\n",
      "tensor([0.9008, 0.1938])\n",
      "tensor([1.7986, 0.4945])\n",
      "tensor([1.9319, 0.0489])\n",
      "tensor([2.9514, 0.2968])\n",
      "tensor([3.4106, 0.3925])\n",
      "tensor([2.7959, 0.2953])\n",
      "tensor([1.2196, 0.4575])\n",
      "tensor([1.4250, 0.0717])\n",
      "tensor([1.3742, 0.4393])\n",
      "tensor([1.2332, 0.1654])\n",
      "tensor([2.6602, 0.4415])\n",
      "tensor([2.4403, 0.2769])\n",
      "tensor([3.1922, 0.3943])\n",
      "tensor([1.8301, 0.4516])\n",
      "tensor([3.4143, 0.0995])\n",
      "tensor([1.8539, 0.1586])\n",
      "tensor([2.6846, 0.3065])\n",
      "tensor([3.1098, 0.2046])\n",
      "tensor([2.0732, 0.4226])\n",
      "tensor([2.5690, 0.2092])\n",
      "tensor([1.5646, 0.4405])\n",
      "tensor([2.5832, 0.4756])\n",
      "tensor([2.7973, 0.1684])\n",
      "tensor([2.9373, 0.2608])\n",
      "tensor([0.8220, 0.3077])\n",
      "tensor([1.9052, 0.1951])\n",
      "tensor([0.6189, 0.3668])\n",
      "tensor([1.4148, 0.2563])\n",
      "tensor([1.4205, 0.0232])\n",
      "tensor([2.1218, 0.0726])\n",
      "tensor([1.0940, 0.1479])\n",
      "tensor([1.1317, 0.2699])\n",
      "tensor([3.3625, 0.0168])\n",
      "tensor([2.3537, 0.4659])\n",
      "tensor([1.0955, 0.3164])\n",
      "tensor([2.7772, 0.1767])\n",
      "tensor([3.1642, 0.4082])\n",
      "tensor([1.0680, 0.4830])\n",
      "tensor([2.5399, 0.1255])\n",
      "tensor([1.6303, 0.4738])\n",
      "tensor([3.0175, 0.1653])\n",
      "tensor([2.3467, 0.3087])\n",
      "tensor([3.0701, 0.3036])\n",
      "tensor([2.1191, 0.1816])\n",
      "tensor([1.1266, 0.0417])\n",
      "tensor([1.9785, 0.4412])\n",
      "tensor([0.8260, 0.2791])\n",
      "tensor([0.7464, 0.3187])\n",
      "tensor([1.0245, 0.2702])\n",
      "tensor([2.2267, 0.4066])\n",
      "tensor([2.8287, 0.2863])\n",
      "tensor([2.7282, 0.1338])\n",
      "tensor([3.4202, 0.3352])\n",
      "tensor([1.1167, 0.1791])\n",
      "tensor([1.3314, 0.1327])\n",
      "tensor([1.1602, 0.0726])\n",
      "tensor([2.7711, 0.1917])\n",
      "tensor([1.1913, 0.3212])\n",
      "tensor([1.5260, 0.3740])\n",
      "tensor([3.2638, 0.0636])\n",
      "tensor([1.6455, 0.1885])\n",
      "tensor([1.3161, 0.4850])\n",
      "tensor([2.5961, 0.1304])\n",
      "tensor([0.9664, 0.3786])\n",
      "tensor([2.4577, 0.3616])\n",
      "tensor([1.9121, 0.2345])\n",
      "tensor([0.9408, 0.1609])\n",
      "tensor([3.4749, 0.2823])\n",
      "tensor([2.4642, 0.4621])\n",
      "tensor([0.9824, 0.0459])\n",
      "tensor([1.8895, 0.0536])\n",
      "tensor([0.5480, 0.3061])\n",
      "tensor([1.2548, 0.2107])\n",
      "tensor([3.0732, 0.3564])\n",
      "tensor([3.3068, 0.3247])\n",
      "tensor([2.5811, 0.2186])\n",
      "tensor([1.6570e+00, 4.8518e-04])\n",
      "tensor([3.1862, 0.3499])\n",
      "tensor([2.8887, 0.4023])\n",
      "tensor([0.8153, 0.0175])\n",
      "tensor([0.6539, 0.2051])\n",
      "tensor([1.7479, 0.2729])\n",
      "tensor([0.8598, 0.3576])\n",
      "tensor([1.6768, 0.4713])\n",
      "tensor([1.2827, 0.0738])\n",
      "tensor([2.0399, 0.2497])\n",
      "tensor([1.9787, 0.1507])\n",
      "tensor([1.0755, 0.0992])\n",
      "tensor([3.3641, 0.1357])\n",
      "tensor([1.6707, 0.3754])\n",
      "tensor([1.1767, 0.3582])\n",
      "tensor([1.8894, 0.4162])\n",
      "tensor([1.7980, 0.4232])\n",
      "tensor([1.6555, 0.3921])\n",
      "tensor([2.8627, 0.3640])\n",
      "tensor([3.3819, 0.1432])\n",
      "tensor([0.9407, 0.3009])\n",
      "tensor([1.3599, 0.1662])\n",
      "tensor([3.1663, 0.4366])\n",
      "tensor([2.4971, 0.3465])\n",
      "tensor([2.5774, 0.1819])\n",
      "tensor([2.6412, 0.1345])\n",
      "tensor([1.7655, 0.0185])\n",
      "tensor([2.5733, 0.4285])\n",
      "tensor([0.5585, 0.4382])\n",
      "tensor([2.1683, 0.4330])\n",
      "tensor([1.9868, 0.3203])\n",
      "tensor([1.9584, 0.3276])\n",
      "tensor([2.5241, 0.1234])\n",
      "tensor([2.0458, 0.4045])\n",
      "tensor([1.5446, 0.3207])\n",
      "tensor([2.7694, 0.3603])\n",
      "tensor([0.6197, 0.2355])\n",
      "tensor([0.6138, 0.1379])\n",
      "tensor([1.0367, 0.3332])\n",
      "tensor([1.7912, 0.0071])\n",
      "tensor([1.0881, 0.1321])\n",
      "tensor([1.4333, 0.4022])\n",
      "tensor([3.0728, 0.2626])\n",
      "tensor([2.6120, 0.3721])\n",
      "tensor([1.4108, 0.0627])\n",
      "tensor([1.0028, 0.2129])\n",
      "tensor([0.5046, 0.0070])\n",
      "tensor([1.5861, 0.3708])\n",
      "tensor([1.9156, 0.3936])\n",
      "tensor([0.5575, 0.2124])\n",
      "tensor([1.9230, 0.4968])\n",
      "tensor([2.4230, 0.1072])\n",
      "tensor([2.1589, 0.1078])\n",
      "tensor([0.8565, 0.0540])\n",
      "tensor([2.5998, 0.1980])\n",
      "tensor([1.1757, 0.0326])\n",
      "tensor([1.2703, 0.0241])\n",
      "tensor([1.0268, 0.3876])\n",
      "tensor([0.5618, 0.2558])\n",
      "tensor([0.8391, 0.3694])\n",
      "tensor([1.8055, 0.4313])\n",
      "tensor([1.7129, 0.3356])\n",
      "tensor([3.0280, 0.2322])\n",
      "tensor([1.4567, 0.2511])\n",
      "tensor([3.4360, 0.0867])\n",
      "tensor([1.1337, 0.4523])\n",
      "tensor([1.3458, 0.2836])\n",
      "tensor([0.6301, 0.1025])\n",
      "tensor([0.8127, 0.1855])\n",
      "tensor([0.7966, 0.2488])\n",
      "tensor([1.3188, 0.1853])\n",
      "tensor([3.1102, 0.1884])\n",
      "tensor([0.8913, 0.4725])\n",
      "tensor([2.2544, 0.4068])\n",
      "tensor([3.4732, 0.2980])\n",
      "tensor([1.7333, 0.0934])\n",
      "tensor([1.2016, 0.3457])\n",
      "tensor([0.9346, 0.3301])\n",
      "tensor([3.2820, 0.4811])\n",
      "tensor([0.5521, 0.2609])\n",
      "tensor([2.3586, 0.2869])\n",
      "tensor([0.9827, 0.2606])\n",
      "tensor([1.9398, 0.4827])\n",
      "tensor([2.9816, 0.1280])\n",
      "tensor([1.9546, 0.4849])\n",
      "tensor([2.9225, 0.2347])\n",
      "tensor([3.1210, 0.3668])\n",
      "tensor([1.9674, 0.4313])\n",
      "tensor([3.1846, 0.1939])\n",
      "tensor([0.9053, 0.0442])\n",
      "tensor([1.3072, 0.4988])\n",
      "tensor([2.6536, 0.2633])\n",
      "tensor([2.7397, 0.4516])\n",
      "tensor([1.8566, 0.0348])\n",
      "tensor([1.1177, 0.0439])\n",
      "tensor([0.6422, 0.1951])\n",
      "tensor([2.6504, 0.3696])\n",
      "tensor([3.1149, 0.2048])\n",
      "tensor([2.7589, 0.1554])\n",
      "tensor([0.6960, 0.4366])\n",
      "tensor([3.3737, 0.4157])\n",
      "tensor([1.5498, 0.0034])\n",
      "tensor([1.8925, 0.2804])\n",
      "tensor([1.0412, 0.2960])\n",
      "tensor([2.3667, 0.4241])\n",
      "tensor([3.3137, 0.0543])\n",
      "tensor([2.8990, 0.2896])\n",
      "tensor([2.6276, 0.2746])\n",
      "tensor([1.4827, 0.0908])\n",
      "tensor([1.1769, 0.2957])\n",
      "tensor([2.5117, 0.1665])\n",
      "tensor([2.1734, 0.4901])\n",
      "tensor([2.7474, 0.1464])\n",
      "tensor([2.3538, 0.0404])\n",
      "tensor([3.1570, 0.1879])\n",
      "tensor([3.4627, 0.1816])\n",
      "tensor([3.2391, 0.4236])\n",
      "tensor([2.1809, 0.3368])\n",
      "tensor([2.2625, 0.4546])\n",
      "tensor([3.0435, 0.0610])\n",
      "tensor([2.0353, 0.4745])\n",
      "tensor([1.2914, 0.2821])\n",
      "tensor([1.7521, 0.4232])\n",
      "tensor([3.4839, 0.1073])\n",
      "tensor([2.5972, 0.4098])\n",
      "tensor([0.9395, 0.3894])\n",
      "tensor([1.3824, 0.3627])\n",
      "tensor([0.5656, 0.2449])\n",
      "tensor([3.1405e+00, 1.0232e-03])\n",
      "tensor([2.9869, 0.4343])\n",
      "tensor([2.0215, 0.0595])\n",
      "tensor([0.5115, 0.0103])\n",
      "tensor([1.3379, 0.1821])\n",
      "tensor([3.0057, 0.4040])\n",
      "tensor([3.2215, 0.1815])\n",
      "tensor([1.3576, 0.4733])\n",
      "tensor([2.8877, 0.3213])\n",
      "tensor([0.7709, 0.0062])\n",
      "tensor([1.7966, 0.2483])\n",
      "tensor([1.7340, 0.1959])\n",
      "tensor([3.3874, 0.2709])\n",
      "tensor([2.5510, 0.2952])\n",
      "tensor([1.2177, 0.2361])\n",
      "tensor([2.6574, 0.3371])\n",
      "tensor([2.5956, 0.0916])\n",
      "tensor([3.1361, 0.4425])\n",
      "tensor([2.4383, 0.1293])\n",
      "tensor([0.9853, 0.3194])\n",
      "tensor([0.6617, 0.3953])\n",
      "tensor([2.0390, 0.3268])\n",
      "tensor([3.3399, 0.1297])\n",
      "tensor([2.0747, 0.0867])\n",
      "tensor([1.7983, 0.0459])\n",
      "tensor([2.9494, 0.1944])\n",
      "tensor([3.2142, 0.1240])\n",
      "tensor([0.7817, 0.0605])\n",
      "tensor([2.7900, 0.4865])\n",
      "tensor([3.1913, 0.2765])\n",
      "tensor([2.3867, 0.4687])\n",
      "tensor([0.9321, 0.0927])\n",
      "tensor([1.3676e+00, 1.1079e-03])\n",
      "tensor([2.0813, 0.1990])\n",
      "tensor([0.8679, 0.1821])\n",
      "tensor([1.6087, 0.0738])\n",
      "tensor([0.7235, 0.4238])\n",
      "tensor([1.8249, 0.0181])\n",
      "tensor([1.7571, 0.0458])\n",
      "tensor([1.1306, 0.3564])\n",
      "tensor([3.4020, 0.0665])\n",
      "tensor([1.2403, 0.2641])\n",
      "tensor([2.6030, 0.2285])\n",
      "tensor([0.7300, 0.2834])\n",
      "tensor([1.9533, 0.1186])\n",
      "tensor([1.1393, 0.4749])\n",
      "tensor([3.0079, 0.4420])\n",
      "tensor([2.3136, 0.0816])\n",
      "tensor([0.8371, 0.4760])\n",
      "tensor([2.9347, 0.3139])\n",
      "tensor([0.8581, 0.4542])\n",
      "tensor([1.0127, 0.3793])\n",
      "tensor([1.6068, 0.1920])\n",
      "tensor([1.8589, 0.0827])\n",
      "tensor([3.1059, 0.2094])\n",
      "tensor([1.7660, 0.3786])\n",
      "tensor([1.3645, 0.2328])\n",
      "tensor([1.6290, 0.1845])\n",
      "tensor([3.2703, 0.0942])\n",
      "tensor([0.6815, 0.0898])\n",
      "tensor([0.9893, 0.3748])\n",
      "tensor([0.5009, 0.0202])\n",
      "tensor([2.6301, 0.0518])\n",
      "tensor([2.2531, 0.0882])\n",
      "tensor([0.5405, 0.1461])\n",
      "tensor([3.4876, 0.0750])\n",
      "tensor([0.8848, 0.0392])\n",
      "tensor([3.4912, 0.1961])\n",
      "tensor([3.2302, 0.3225])\n",
      "tensor([2.9560, 0.1032])\n",
      "tensor([1.3181, 0.4551])\n",
      "tensor([1.9042, 0.1153])\n",
      "tensor([1.3393, 0.1996])\n",
      "tensor([2.4627, 0.2122])\n",
      "tensor([1.5234, 0.3207])\n",
      "tensor([1.9889, 0.0119])\n",
      "tensor([2.7374, 0.3591])\n",
      "tensor([2.7817, 0.3748])\n",
      "tensor([0.8734, 0.3083])\n",
      "tensor([1.0952, 0.4474])\n",
      "tensor([2.3438, 0.4988])\n",
      "tensor([2.5930, 0.3650])\n",
      "tensor([2.1336, 0.0209])\n",
      "tensor([3.4150, 0.2366])\n",
      "tensor([0.7993, 0.2511])\n",
      "tensor([1.3561, 0.0536])\n",
      "tensor([1.6013, 0.0672])\n",
      "tensor([0.5229, 0.4438])\n",
      "tensor([2.4290, 0.1204])\n",
      "tensor([1.5974, 0.1080])\n",
      "tensor([1.4230, 0.0102])\n",
      "tensor([2.8995, 0.3278])\n",
      "tensor([1.8275, 0.4714])\n",
      "tensor([3.4569, 0.3881])\n",
      "tensor([2.5004, 0.2811])\n",
      "tensor([1.1622, 0.1931])\n",
      "tensor([0.5869, 0.1144])\n",
      "tensor([3.4790, 0.0230])\n",
      "tensor([3.3584, 0.4239])\n",
      "tensor([2.2727, 0.4532])\n",
      "tensor([3.2932, 0.4508])\n",
      "tensor([1.1830, 0.0952])\n",
      "tensor([1.8820, 0.0382])\n",
      "tensor([2.6989, 0.1782])\n",
      "tensor([2.2202, 0.1898])\n",
      "tensor([1.3500, 0.4260])\n",
      "tensor([1.7535, 0.2283])\n",
      "tensor([1.2606, 0.0038])\n",
      "tensor([3.0446, 0.1769])\n",
      "tensor([2.4609, 0.3650])\n",
      "tensor([1.6213, 0.4051])\n",
      "tensor([2.5829, 0.0288])\n",
      "tensor([0.5478, 0.0585])\n",
      "tensor([1.4382, 0.1608])\n",
      "tensor([3.3425, 0.0931])\n",
      "tensor([1.0830, 0.1555])\n",
      "tensor([3.4065, 0.4576])\n",
      "tensor([1.6842, 0.0626])\n",
      "tensor([2.7444, 0.0042])\n",
      "tensor([3.1501, 0.4328])\n",
      "tensor([3.2753, 0.1649])\n",
      "tensor([0.6393, 0.3686])\n",
      "tensor([0.6598, 0.2425])\n",
      "tensor([1.2858, 0.2331])\n",
      "tensor([1.0109, 0.3028])\n",
      "tensor([1.8430, 0.2893])\n",
      "tensor([2.2263, 0.4342])\n",
      "tensor([0.9412, 0.0301])\n",
      "tensor([1.1432, 0.4172])\n",
      "tensor([2.5332, 0.4575])\n",
      "tensor([2.1532, 0.4015])\n",
      "tensor([0.9652, 0.1688])\n",
      "tensor([3.2375, 0.3586])\n",
      "tensor([1.4763, 0.4576])\n",
      "tensor([0.5122, 0.4365])\n",
      "tensor([1.2902, 0.0375])\n",
      "tensor([2.0703, 0.3987])\n",
      "tensor([2.0729, 0.4715])\n",
      "tensor([0.8081, 0.4436])\n",
      "tensor([1.2942, 0.0147])\n",
      "tensor([0.7408, 0.2932])\n",
      "tensor([0.7273, 0.2339])\n",
      "tensor([3.3335, 0.0550])\n",
      "tensor([3.3769, 0.1377])\n",
      "tensor([0.7571, 0.2369])\n",
      "tensor([2.7284, 0.0449])\n",
      "tensor([0.9028, 0.3544])\n",
      "tensor([2.1789, 0.3918])\n",
      "tensor([2.2212, 0.0223])\n",
      "tensor([1.5129, 0.4580])\n",
      "tensor([1.8199, 0.3421])\n",
      "tensor([3.3914, 0.0526])\n",
      "tensor([2.7685, 0.0466])\n",
      "tensor([1.9178, 0.3068])\n",
      "tensor([3.3263, 0.4235])\n",
      "tensor([2.2812, 0.0388])\n",
      "tensor([1.3713, 0.4628])\n",
      "tensor([2.6490, 0.2615])\n",
      "tensor([1.1300, 0.4902])\n",
      "tensor([0.8727, 0.4850])\n",
      "tensor([0.8426, 0.3666])\n",
      "tensor([1.8010, 0.1121])\n",
      "tensor([2.8101, 0.0070])\n",
      "tensor([1.3570, 0.1557])\n",
      "tensor([0.6931, 0.4776])\n",
      "tensor([3.0075, 0.1889])\n",
      "tensor([1.5331, 0.4775])\n",
      "tensor([1.3891, 0.1429])\n",
      "tensor([1.9052, 0.2563])\n",
      "tensor([1.7030, 0.0603])\n",
      "tensor([1.4871, 0.2168])\n",
      "tensor([3.2912, 0.3443])\n",
      "tensor([2.3227, 0.3296])\n",
      "tensor([2.6561, 0.0972])\n",
      "tensor([2.1801, 0.3764])\n",
      "tensor([2.5751, 0.0146])\n",
      "tensor([1.5958, 0.2876])\n",
      "tensor([3.4798, 0.0786])\n",
      "tensor([3.2040, 0.2032])\n",
      "tensor([2.8127, 0.3217])\n",
      "tensor([2.5053, 0.3333])\n",
      "tensor([0.9293, 0.1549])\n",
      "tensor([2.3549, 0.3778])\n",
      "tensor([1.4888, 0.2094])\n",
      "tensor([1.5149, 0.0411])\n",
      "tensor([2.9764, 0.3166])\n",
      "tensor([1.8250, 0.3147])\n",
      "tensor([3.4624, 0.4807])\n",
      "tensor([1.3155, 0.4213])\n",
      "tensor([2.3064, 0.1600])\n",
      "tensor([2.3524, 0.0344])\n",
      "tensor([1.9486, 0.2976])\n",
      "tensor([0.5600, 0.2868])\n",
      "tensor([1.3201, 0.0079])\n",
      "tensor([2.5253, 0.4417])\n",
      "tensor([1.1873, 0.1011])\n",
      "tensor([2.1942, 0.1384])\n",
      "tensor([0.7142, 0.0582])\n",
      "tensor([1.2456, 0.4119])\n",
      "tensor([1.7003, 0.2526])\n",
      "tensor([2.2995, 0.3938])\n",
      "tensor([3.2077, 0.0048])\n",
      "tensor([3.1255, 0.1023])\n",
      "tensor([0.9922, 0.4625])\n",
      "tensor([2.4268, 0.4780])\n",
      "tensor([1.9649, 0.2377])\n",
      "tensor([1.1658, 0.3646])\n",
      "tensor([0.7207, 0.3491])\n",
      "tensor([0.8712, 0.3331])\n",
      "tensor([1.9953, 0.4822])\n",
      "tensor([1.0256, 0.1403])\n",
      "tensor([1.7552, 0.0643])\n",
      "tensor([1.8963, 0.1380])\n",
      "tensor([2.8987, 0.4710])\n",
      "tensor([1.3377, 0.1409])\n",
      "tensor([1.5638, 0.4556])\n",
      "tensor([2.8432, 0.0840])\n",
      "tensor([2.7572, 0.4303])\n",
      "tensor([1.1454, 0.3728])\n",
      "tensor([3.3674, 0.1057])\n",
      "tensor([1.5115, 0.3304])\n",
      "tensor([0.6589, 0.3942])\n",
      "tensor([0.5810, 0.1494])\n",
      "tensor([2.2056, 0.4384])\n",
      "tensor([1.7077, 0.2156])\n",
      "tensor([2.6775, 0.0426])\n",
      "tensor([1.3469, 0.0412])\n",
      "tensor([1.0014, 0.4187])\n",
      "tensor([3.2551, 0.4187])\n",
      "tensor([0.9207, 0.1130])\n",
      "tensor([1.3478, 0.1079])\n",
      "tensor([0.8194, 0.1678])\n",
      "tensor([2.4420, 0.3949])\n",
      "tensor([0.5181, 0.2266])\n",
      "tensor([0.8272, 0.2905])\n",
      "tensor([1.2616, 0.3603])\n",
      "tensor([1.1458, 0.3167])\n",
      "tensor([2.9086, 0.1003])\n",
      "tensor([1.2070, 0.0046])\n",
      "tensor([2.8662, 0.3549])\n",
      "tensor([2.5996, 0.4730])\n",
      "tensor([1.6772, 0.4378])\n",
      "tensor([2.9812, 0.1962])\n",
      "tensor([0.6256, 0.1392])\n",
      "tensor([3.2056, 0.3588])\n",
      "tensor([3.1619, 0.2135])\n",
      "tensor([0.5657, 0.3084])\n",
      "tensor([1.1049, 0.0865])\n",
      "tensor([3.2227, 0.4641])\n",
      "tensor([2.0936, 0.3627])\n",
      "tensor([0.8749, 0.2205])\n",
      "tensor([2.1239, 0.2527])\n",
      "tensor([0.5783, 0.2057])\n",
      "tensor([1.7385, 0.1963])\n",
      "tensor([2.0539, 0.4100])\n",
      "tensor([2.5842, 0.1718])\n",
      "tensor([3.3146, 0.3968])\n",
      "tensor([1.9541, 0.2634])\n",
      "tensor([2.2380, 0.1366])\n",
      "tensor([2.5255, 0.2661])\n",
      "tensor([1.4300, 0.3273])\n",
      "tensor([0.6157, 0.0454])\n",
      "tensor([2.8840, 0.1204])\n",
      "tensor([1.3653, 0.2529])\n",
      "tensor([2.8925, 0.4418])\n",
      "tensor([1.3276, 0.2557])\n",
      "tensor([1.0658, 0.2338])\n",
      "tensor([2.4599, 0.3887])\n",
      "tensor([1.3678, 0.1024])\n",
      "tensor([2.1614, 0.2587])\n",
      "tensor([1.4748, 0.1047])\n",
      "tensor([2.9204, 0.4906])\n",
      "tensor([2.4582, 0.1106])\n",
      "tensor([1.1804, 0.1077])\n",
      "tensor([3.3317, 0.1243])\n",
      "tensor([0.6346, 0.3792])\n",
      "tensor([1.6739, 0.0999])\n",
      "tensor([1.3302, 0.2268])\n",
      "tensor([3.1705, 0.2688])\n",
      "tensor([1.1043, 0.3079])\n",
      "tensor([2.5202, 0.4089])\n",
      "tensor([1.5350, 0.1195])\n",
      "tensor([2.6678, 0.0080])\n",
      "tensor([0.9687, 0.2125])\n",
      "tensor([1.8259, 0.2401])\n",
      "tensor([0.8462, 0.3517])\n",
      "tensor([0.7842, 0.0895])\n",
      "tensor([3.1269, 0.4753])\n",
      "tensor([1.2574, 0.3599])\n",
      "tensor([1.4682, 0.4750])\n",
      "tensor([1.2254, 0.0093])\n",
      "tensor([2.0838, 0.3952])\n",
      "tensor([2.3625, 0.4490])\n",
      "tensor([0.7732, 0.3245])\n",
      "tensor([2.9569, 0.3463])\n",
      "tensor([1.3092, 0.4404])\n",
      "tensor([1.9808, 0.3913])\n",
      "tensor([0.9233, 0.0173])\n",
      "tensor([0.8337, 0.1456])\n",
      "tensor([2.6466, 0.2198])\n",
      "tensor([2.2122, 0.3168])\n",
      "tensor([1.1089, 0.2211])\n",
      "tensor([2.2495, 0.0833])\n",
      "tensor([1.9804, 0.0816])\n",
      "tensor([3.2101, 0.0186])\n",
      "tensor([2.2078, 0.1846])\n",
      "tensor([2.2921, 0.3773])\n",
      "tensor([3.1092, 0.0640])\n",
      "tensor([2.8433, 0.3803])\n",
      "tensor([2.2473, 0.3425])\n",
      "tensor([1.9747, 0.3806])\n",
      "tensor([1.6122, 0.2896])\n",
      "tensor([3.4988, 0.4213])\n",
      "tensor([1.7114, 0.3935])\n",
      "tensor([1.2011, 0.3087])\n",
      "tensor([1.5679, 0.2640])\n",
      "tensor([1.1138, 0.2588])\n",
      "tensor([1.3001, 0.3353])\n",
      "tensor([3.2084, 0.4015])\n",
      "tensor([1.2032, 0.2213])\n",
      "tensor([0.6050, 0.4996])\n",
      "tensor([2.2283, 0.3808])\n",
      "tensor([2.9204, 0.2977])\n",
      "tensor([1.1532, 0.2045])\n",
      "tensor([1.6726, 0.2708])\n",
      "tensor([2.5406, 0.3027])\n",
      "tensor([3.0484, 0.0761])\n",
      "tensor([2.5970, 0.2720])\n",
      "tensor([3.3049, 0.0786])\n",
      "tensor([1.8345, 0.0149])\n",
      "tensor([3.2617, 0.0596])\n",
      "tensor([1.4152, 0.0927])\n",
      "tensor([1.0779, 0.1961])\n",
      "tensor([0.6388, 0.2152])\n",
      "tensor([2.8112, 0.3740])\n",
      "tensor([2.2705, 0.0240])\n",
      "tensor([1.4164, 0.0432])\n",
      "tensor([2.6593, 0.4738])\n",
      "tensor([3.2466, 0.2407])\n",
      "tensor([2.6453, 0.2694])\n",
      "tensor([2.9753, 0.4728])\n",
      "tensor([2.3570, 0.3191])\n",
      "tensor([2.8066, 0.2479])\n",
      "tensor([3.2526, 0.4142])\n",
      "tensor([3.3067, 0.4785])\n",
      "tensor([1.6984, 0.1351])\n",
      "tensor([2.4737, 0.0146])\n",
      "tensor([1.5281, 0.2857])\n",
      "tensor([2.4062, 0.4941])\n",
      "tensor([1.9531, 0.3059])\n",
      "tensor([2.2521e+00, 1.6735e-03])\n",
      "tensor([2.3329, 0.2146])\n",
      "tensor([1.4650, 0.0936])\n",
      "tensor([2.6814, 0.3863])\n",
      "tensor([3.1136, 0.1939])\n",
      "tensor([1.2377, 0.2953])\n",
      "tensor([1.3596, 0.0864])\n",
      "tensor([2.5605, 0.4384])\n",
      "tensor([0.9078, 0.4779])\n",
      "tensor([0.7189, 0.4657])\n",
      "tensor([2.7035, 0.4922])\n",
      "tensor([2.7452, 0.0688])\n",
      "tensor([1.0566, 0.1721])\n",
      "tensor([1.1535, 0.1334])\n",
      "tensor([0.6037, 0.3079])\n",
      "tensor([2.9480, 0.4022])\n",
      "tensor([3.1358, 0.0913])\n",
      "tensor([2.8197, 0.4450])\n",
      "tensor([2.1989, 0.3216])\n",
      "tensor([0.8889, 0.3052])\n",
      "tensor([1.4710, 0.1493])\n",
      "tensor([2.2585, 0.3880])\n",
      "tensor([3.2274, 0.4816])\n",
      "tensor([2.0229, 0.1850])\n",
      "tensor([1.7507, 0.2796])\n",
      "tensor([1.7579, 0.0567])\n",
      "tensor([1.4658, 0.3891])\n",
      "tensor([2.5890, 0.3290])\n",
      "tensor([0.6359, 0.0156])\n",
      "tensor([2.8926, 0.2280])\n",
      "tensor([0.8769, 0.3944])\n",
      "tensor([2.9115, 0.2215])\n",
      "tensor([1.9905, 0.2102])\n",
      "tensor([1.4352, 0.0767])\n",
      "tensor([1.5641, 0.4457])\n",
      "tensor([1.4683, 0.3214])\n",
      "tensor([1.1674, 0.1477])\n",
      "tensor([0.9486, 0.4999])\n",
      "tensor([1.9517, 0.4504])\n",
      "tensor([0.8623, 0.2592])\n",
      "tensor([2.1627, 0.3455])\n",
      "tensor([1.4800, 0.1520])\n",
      "tensor([2.4050, 0.1378])\n",
      "tensor([0.7520, 0.4505])\n",
      "tensor([3.0175, 0.3444])\n",
      "tensor([2.4247, 0.4085])\n",
      "tensor([2.9624, 0.3412])\n",
      "tensor([1.7119, 0.2021])\n",
      "tensor([3.3602, 0.2328])\n",
      "tensor([1.9338, 0.1994])\n",
      "tensor([1.9935, 0.2559])\n",
      "tensor([0.6365, 0.3282])\n",
      "tensor([0.6917, 0.4590])\n",
      "tensor([1.3026, 0.3823])\n",
      "tensor([2.5524, 0.3619])\n",
      "tensor([2.8331, 0.2956])\n",
      "tensor([2.3359, 0.1740])\n",
      "tensor([2.4203, 0.4648])\n",
      "tensor([2.6498, 0.2264])\n",
      "tensor([0.7537, 0.4187])\n",
      "tensor([0.5594, 0.3446])\n",
      "tensor([1.3376, 0.0188])\n",
      "tensor([2.0348, 0.1162])\n",
      "tensor([1.7395, 0.3941])\n",
      "tensor([3.4637, 0.3817])\n",
      "tensor([3.4220, 0.4961])\n",
      "tensor([3.2892, 0.3408])\n",
      "tensor([1.9798, 0.1258])\n",
      "tensor([3.3179, 0.3355])\n",
      "tensor([2.0756, 0.0852])\n",
      "tensor([3.4668, 0.0553])\n",
      "tensor([1.6948, 0.4516])\n",
      "tensor([2.8418, 0.4421])\n",
      "tensor([1.0382, 0.3100])\n",
      "tensor([0.6215, 0.1962])\n",
      "tensor([3.0656, 0.4709])\n",
      "tensor([1.3402, 0.1587])\n",
      "tensor([2.2007, 0.1037])\n",
      "tensor([2.1201, 0.2656])\n",
      "tensor([3.0516, 0.1901])\n",
      "tensor([1.2172, 0.2103])\n",
      "tensor([3.0320, 0.1313])\n",
      "tensor([2.8856, 0.0844])\n",
      "tensor([2.9864, 0.1263])\n",
      "tensor([1.3772, 0.1809])\n",
      "tensor([2.8502, 0.2280])\n",
      "tensor([1.3089, 0.3370])\n",
      "tensor([1.8230, 0.4171])\n",
      "tensor([0.8320, 0.2656])\n",
      "tensor([0.9068, 0.1111])\n",
      "tensor([1.2014, 0.2448])\n",
      "tensor([2.6290, 0.1994])\n",
      "tensor([2.1896, 0.2949])\n",
      "tensor([3.2416, 0.2594])\n",
      "tensor([3.4844, 0.4526])\n",
      "tensor([0.9213, 0.3606])\n",
      "tensor([2.9292, 0.4677])\n",
      "tensor([0.6109, 0.1522])\n",
      "tensor([1.3180, 0.1371])\n",
      "tensor([2.5988, 0.2603])\n",
      "tensor([1.5161, 0.3638])\n",
      "tensor([2.1037, 0.2184])\n",
      "tensor([2.2790, 0.3928])\n",
      "tensor([2.3278, 0.0131])\n",
      "tensor([2.1926, 0.2156])\n",
      "tensor([3.4939, 0.4080])\n",
      "tensor([2.6038, 0.0311])\n",
      "tensor([3.1131, 0.1751])\n",
      "tensor([0.6396, 0.2908])\n",
      "tensor([0.6594, 0.2965])\n",
      "tensor([3.0798, 0.0088])\n",
      "tensor([1.1523, 0.2106])\n",
      "tensor([3.4682, 0.2457])\n",
      "tensor([1.4524, 0.4797])\n",
      "tensor([2.1953, 0.3933])\n",
      "tensor([1.9533, 0.1711])\n",
      "tensor([1.3876, 0.4026])\n",
      "tensor([0.6483, 0.1426])\n",
      "tensor([1.6246, 0.4562])\n",
      "tensor([1.8749, 0.4235])\n",
      "tensor([2.0582, 0.4696])\n",
      "tensor([0.7324, 0.0681])\n",
      "tensor([2.4204, 0.3054])\n",
      "tensor([1.6851, 0.3856])\n",
      "tensor([1.5959, 0.0044])\n",
      "tensor([1.5524, 0.2762])\n",
      "tensor([2.7932, 0.3136])\n",
      "tensor([1.6266, 0.1462])\n",
      "tensor([3.2525, 0.3374])\n",
      "tensor([3.1912, 0.1142])\n",
      "tensor([0.7524, 0.4717])\n",
      "tensor([0.8644, 0.4831])\n",
      "tensor([1.7848, 0.1316])\n",
      "tensor([1.6429, 0.4535])\n",
      "tensor([0.9127, 0.1607])\n",
      "tensor([1.9627, 0.1756])\n",
      "tensor([3.0497, 0.3697])\n",
      "tensor([3.3709, 0.4847])\n",
      "tensor([0.9184, 0.0962])\n",
      "tensor([3.0574, 0.4548])\n",
      "tensor([3.3166, 0.2681])\n",
      "tensor([2.5331, 0.4969])\n",
      "tensor([1.9541, 0.3013])\n",
      "tensor([2.7636, 0.2361])\n",
      "tensor([2.5004, 0.0225])\n",
      "tensor([2.9456, 0.1829])\n",
      "tensor([1.1290, 0.2068])\n",
      "tensor([2.5200, 0.0103])\n",
      "tensor([2.1984, 0.1169])\n",
      "tensor([1.6391, 0.1498])\n",
      "tensor([1.7553, 0.1527])\n",
      "tensor([0.6350, 0.0347])\n",
      "tensor([0.5571, 0.2373])\n",
      "tensor([2.8588, 0.3868])\n",
      "tensor([0.5744, 0.1667])\n",
      "tensor([0.6547, 0.2495])\n",
      "tensor([0.8515, 0.2914])\n",
      "tensor([2.0646, 0.4639])\n",
      "tensor([1.2282, 0.4691])\n",
      "tensor([2.8430, 0.0041])\n",
      "tensor([2.4661, 0.1972])\n",
      "tensor([0.7761, 0.0055])\n",
      "tensor([0.6828, 0.3154])\n",
      "tensor([1.4220, 0.2846])\n",
      "tensor([2.6457, 0.4163])\n",
      "tensor([1.4354, 0.4730])\n",
      "tensor([0.7046, 0.0930])\n",
      "tensor([3.1783, 0.2294])\n",
      "tensor([2.1410, 0.2040])\n",
      "tensor([1.9749, 0.4581])\n",
      "tensor([2.2432, 0.4779])\n",
      "tensor([0.6029, 0.4487])\n",
      "tensor([2.3839, 0.2673])\n",
      "tensor([1.5702, 0.0681])\n",
      "tensor([0.9285, 0.3463])\n",
      "tensor([0.5318, 0.0956])\n",
      "tensor([2.3603, 0.4578])\n",
      "tensor([2.0728, 0.4799])\n",
      "tensor([2.1476, 0.3148])\n",
      "tensor([2.4326, 0.2652])\n",
      "tensor([3.4767, 0.1470])\n",
      "tensor([1.3441, 0.4605])\n",
      "tensor([1.2288, 0.2996])\n",
      "tensor([2.4404, 0.3389])\n",
      "tensor([2.1988, 0.1580])\n",
      "tensor([1.8494, 0.3642])\n",
      "tensor([3.4559, 0.4258])\n",
      "tensor([3.1889, 0.3250])\n",
      "tensor([1.0572, 0.2768])\n",
      "tensor([1.4473, 0.1451])\n",
      "tensor([1.8413, 0.2726])\n",
      "tensor([1.4780, 0.1338])\n",
      "tensor([1.8576, 0.3092])\n",
      "tensor([1.8860, 0.0713])\n",
      "tensor([1.6528, 0.1252])\n",
      "tensor([0.6583, 0.1191])\n",
      "tensor([2.7210, 0.2067])\n",
      "tensor([0.6223, 0.2835])\n",
      "tensor([1.4082, 0.1925])\n",
      "tensor([1.1215, 0.1364])\n",
      "tensor([0.6938, 0.4621])\n",
      "tensor([1.5630, 0.2344])\n",
      "tensor([2.7552, 0.1045])\n",
      "tensor([2.1382, 0.4839])\n",
      "tensor([2.2327, 0.4529])\n",
      "tensor([0.6976, 0.1590])\n",
      "tensor([0.8370, 0.2506])\n",
      "tensor([1.8208, 0.0738])\n",
      "tensor([0.6492, 0.4230])\n",
      "tensor([0.7338, 0.3987])\n",
      "tensor([3.2945, 0.2449])\n",
      "tensor([2.8374, 0.0071])\n",
      "tensor([2.0131, 0.3529])\n",
      "tensor([2.4345, 0.0731])\n",
      "tensor([0.5590, 0.3977])\n",
      "tensor([2.9488, 0.3913])\n",
      "tensor([1.7451, 0.4986])\n",
      "tensor([1.7212, 0.1667])\n",
      "tensor([1.4883, 0.0817])\n",
      "tensor([2.5505, 0.4464])\n",
      "tensor([3.2038, 0.0214])\n",
      "tensor([2.3060, 0.0727])\n",
      "tensor([3.2265, 0.1116])\n",
      "tensor([0.6152, 0.3629])\n",
      "tensor([3.4011, 0.3704])\n",
      "tensor([3.4057, 0.2426])\n",
      "tensor([3.0032, 0.4992])\n",
      "tensor([0.5711, 0.0231])\n",
      "tensor([1.5569, 0.0978])\n",
      "tensor([3.3507, 0.0800])\n",
      "tensor([1.1179, 0.2653])\n",
      "tensor([2.4712, 0.0939])\n",
      "tensor([1.6292, 0.4485])\n",
      "tensor([2.4115, 0.1059])\n",
      "tensor([2.6202, 0.4831])\n",
      "tensor([2.0699, 0.4572])\n",
      "tensor([1.6695, 0.3685])\n",
      "tensor([3.3568, 0.2147])\n",
      "tensor([1.1443, 0.0617])\n",
      "tensor([1.0089, 0.4860])\n",
      "tensor([0.7409, 0.0488])\n",
      "tensor([1.7524, 0.1371])\n",
      "tensor([1.5980, 0.2596])\n",
      "tensor([2.0238, 0.3152])\n",
      "tensor([2.4281, 0.0565])\n",
      "tensor([2.5997, 0.2876])\n",
      "tensor([1.6025, 0.1168])\n",
      "tensor([2.7390, 0.3751])\n",
      "tensor([2.3083, 0.3498])\n",
      "tensor([1.9292, 0.4901])\n",
      "tensor([1.3256, 0.4677])\n",
      "tensor([3.4784, 0.0359])\n",
      "tensor([0.6176, 0.3081])\n",
      "tensor([2.3934, 0.3681])\n",
      "tensor([0.9396, 0.4269])\n",
      "tensor([1.8879, 0.1193])\n",
      "tensor([3.4051, 0.0321])\n",
      "tensor([1.4241, 0.3456])\n",
      "tensor([1.7527, 0.2880])\n",
      "tensor([2.0264, 0.2927])\n",
      "tensor([1.1460, 0.1875])\n",
      "tensor([2.3775, 0.0984])\n",
      "tensor([2.3889, 0.4997])\n",
      "tensor([0.5338, 0.3289])\n",
      "tensor([3.4909, 0.3913])\n",
      "tensor([2.1209, 0.2786])\n",
      "tensor([0.7774, 0.3024])\n",
      "tensor([1.7745, 0.3738])\n",
      "tensor([1.2033, 0.1129])\n",
      "tensor([2.4022, 0.0099])\n",
      "tensor([0.8368, 0.4031])\n",
      "tensor([2.9692, 0.3105])\n",
      "tensor([1.7383, 0.4658])\n",
      "tensor([3.3182, 0.1468])\n",
      "tensor([0.9385, 0.1785])\n",
      "tensor([1.7116, 0.4136])\n",
      "tensor([2.1182, 0.2026])\n",
      "tensor([0.8785, 0.4902])\n",
      "tensor([1.4481, 0.4442])\n",
      "tensor([2.1982, 0.3767])\n",
      "tensor([2.4763, 0.3666])\n",
      "tensor([0.5742, 0.3785])\n",
      "tensor([3.4058, 0.0834])\n",
      "tensor([1.5074, 0.1979])\n",
      "tensor([1.0655, 0.3855])\n",
      "tensor([1.7379, 0.2552])\n",
      "tensor([3.0303, 0.2002])\n",
      "tensor([0.6660, 0.4904])\n",
      "tensor([2.0764, 0.3486])\n",
      "tensor([0.6945, 0.4404])\n",
      "tensor([2.0328, 0.2782])\n",
      "tensor([1.5409, 0.0558])\n",
      "tensor([1.1939, 0.0714])\n",
      "tensor([2.0349, 0.2595])\n",
      "tensor([2.9376, 0.2460])\n",
      "tensor([2.5424, 0.4577])\n",
      "tensor([0.9194, 0.3841])\n",
      "tensor([3.0766, 0.0130])\n",
      "tensor([3.2899, 0.2462])\n",
      "tensor([1.1356, 0.0483])\n",
      "tensor([2.2377, 0.4136])\n",
      "tensor([2.8179, 0.4939])\n",
      "tensor([0.7985, 0.0081])\n",
      "tensor([1.6264, 0.1143])\n",
      "tensor([1.9926, 0.2718])\n",
      "tensor([2.4102, 0.0893])\n",
      "tensor([2.8317, 0.1057])\n",
      "tensor([2.1177, 0.1151])\n",
      "tensor([2.7763, 0.1030])\n",
      "tensor([1.1445, 0.0843])\n",
      "tensor([3.2450, 0.2153])\n",
      "tensor([2.6380, 0.4574])\n",
      "tensor([2.5750, 0.0121])\n",
      "tensor([3.4143, 0.4452])\n",
      "tensor([2.1008, 0.3980])\n",
      "tensor([3.3463, 0.1967])\n",
      "tensor([3.2139, 0.1709])\n",
      "tensor([1.6959, 0.0158])\n",
      "tensor([2.1093, 0.1402])\n",
      "tensor([1.1459, 0.3882])\n",
      "tensor([2.4894, 0.4707])\n",
      "tensor([0.9872, 0.4513])\n",
      "tensor([1.4871, 0.4101])\n",
      "tensor([2.0032, 0.1663])\n",
      "tensor([3.2306, 0.4324])\n",
      "tensor([0.7328, 0.0097])\n",
      "tensor([3.4782, 0.1304])\n",
      "tensor([0.8180, 0.1296])\n",
      "tensor([2.8018, 0.3910])\n",
      "tensor([0.9521, 0.3661])\n",
      "tensor([1.7514, 0.0629])\n",
      "tensor([2.4384, 0.0088])\n",
      "tensor([1.6736, 0.2189])\n",
      "tensor([2.3322, 0.0349])\n",
      "tensor([1.7090, 0.3415])\n",
      "tensor([1.6160, 0.4765])\n",
      "tensor([2.9195, 0.1423])\n",
      "tensor([2.0418, 0.1418])\n",
      "tensor([2.9852, 0.0187])\n",
      "tensor([3.2367, 0.3651])\n",
      "tensor([1.0840, 0.2542])\n",
      "tensor([3.3605, 0.0270])\n",
      "tensor([3.4680, 0.3625])\n",
      "tensor([3.4387, 0.3309])\n",
      "tensor([3.3599, 0.1216])\n",
      "tensor([1.9869, 0.1786])\n",
      "tensor([1.1757, 0.3576])\n",
      "tensor([2.4850, 0.2487])\n",
      "tensor([2.5174, 0.2529])\n",
      "tensor([2.8919, 0.2605])\n",
      "tensor([1.5368, 0.1280])\n",
      "tensor([2.8494, 0.1270])\n",
      "tensor([3.1523, 0.1388])\n",
      "tensor([2.7999, 0.4464])\n",
      "tensor([3.2032, 0.4100])\n",
      "tensor([0.8542, 0.4000])\n",
      "tensor([0.9419, 0.4194])\n",
      "tensor([1.7648, 0.0774])\n",
      "tensor([3.1008, 0.1849])\n",
      "tensor([0.6339, 0.0769])\n",
      "tensor([3.2277, 0.0370])\n",
      "tensor([2.0855, 0.1548])\n",
      "tensor([1.9102, 0.4227])\n",
      "tensor([2.5287, 0.2909])\n",
      "tensor([2.1566, 0.1916])\n",
      "tensor([2.2671, 0.2557])\n",
      "tensor([2.8224, 0.4284])\n",
      "tensor([1.1807, 0.1708])\n",
      "tensor([2.7076, 0.0959])\n",
      "tensor([1.6257, 0.4913])\n",
      "tensor([2.8621, 0.3848])\n",
      "tensor([1.3171, 0.4706])\n",
      "tensor([2.7254, 0.2428])\n",
      "tensor([1.8609, 0.1873])\n",
      "tensor([0.5619, 0.3935])\n",
      "tensor([3.2573, 0.1781])\n",
      "tensor([3.0410, 0.3011])\n",
      "tensor([3.1536, 0.3652])\n",
      "tensor([3.4480, 0.2189])\n",
      "tensor([3.3184, 0.1081])\n",
      "tensor([1.2638, 0.3464])\n",
      "tensor([3.1382, 0.1194])\n",
      "tensor([2.5835, 0.2205])\n",
      "tensor([3.4134, 0.4478])\n",
      "tensor([0.7454, 0.2561])\n",
      "tensor([0.5766, 0.3213])\n",
      "tensor([2.0843, 0.3045])\n",
      "tensor([0.6954, 0.0993])\n",
      "tensor([1.8193, 0.3283])\n",
      "tensor([3.0604, 0.1691])\n",
      "tensor([1.0834, 0.1593])\n",
      "tensor([2.7724, 0.1821])\n",
      "tensor([0.8636, 0.0538])\n",
      "tensor([1.4118, 0.0877])\n",
      "tensor([2.5678, 0.4140])\n",
      "tensor([3.2621, 0.2479])\n",
      "tensor([1.0495, 0.4471])\n",
      "tensor([1.3234, 0.3962])\n",
      "tensor([3.2502, 0.1933])\n",
      "tensor([3.3161, 0.1421])\n",
      "tensor([2.3671, 0.4877])\n",
      "tensor([2.0514, 0.0477])\n",
      "tensor([0.5867, 0.0898])\n",
      "tensor([3.1429, 0.1337])\n",
      "tensor([2.0065, 0.1764])\n",
      "tensor([0.7088, 0.3495])\n",
      "tensor([1.4893, 0.3377])\n",
      "tensor([3.3218, 0.4867])\n",
      "tensor([1.8600, 0.3372])\n",
      "tensor([3.1934, 0.4176])\n",
      "tensor([3.0155, 0.4162])\n",
      "tensor([1.7745, 0.0221])\n",
      "tensor([1.6739, 0.0033])\n",
      "tensor([0.5107, 0.2527])\n",
      "tensor([1.5803, 0.0638])\n",
      "tensor([0.8436, 0.0884])\n",
      "tensor([2.8742, 0.2564])\n",
      "tensor([1.1430, 0.1435])\n",
      "tensor([0.9197, 0.1659])\n",
      "tensor([3.1818, 0.1704])\n",
      "tensor([3.2661, 0.1905])\n",
      "tensor([2.6972, 0.1423])\n",
      "tensor([1.8700, 0.3610])\n",
      "tensor([2.7329, 0.1900])\n",
      "tensor([1.4612, 0.2919])\n",
      "tensor([0.8972, 0.2715])\n",
      "tensor([1.4668, 0.0995])\n",
      "tensor([3.2389, 0.1824])\n",
      "tensor([1.9627, 0.3904])\n",
      "tensor([3.0644, 0.2113])\n",
      "tensor([1.1672, 0.2441])\n",
      "tensor([0.5616, 0.2725])\n",
      "tensor([0.6203, 0.0915])\n",
      "tensor([3.1255, 0.3757])\n",
      "tensor([1.8301, 0.2158])\n",
      "tensor([0.8860, 0.0153])\n",
      "tensor([0.8783, 0.1169])\n",
      "tensor([2.5596, 0.3255])\n",
      "tensor([2.3496e+00, 1.6448e-03])\n",
      "tensor([0.7782, 0.2158])\n",
      "tensor([0.9042, 0.2183])\n",
      "tensor([0.7392, 0.0225])\n",
      "tensor([2.2334, 0.0166])\n",
      "tensor([1.8889, 0.2712])\n",
      "tensor([2.6250, 0.3392])\n",
      "tensor([3.0315, 0.3772])\n",
      "tensor([1.6625, 0.1269])\n",
      "tensor([3.0939, 0.1690])\n",
      "tensor([2.2560, 0.4450])\n",
      "tensor([2.6512, 0.3668])\n",
      "tensor([1.3147, 0.3459])\n",
      "tensor([2.7262, 0.1411])\n",
      "tensor([3.1608, 0.3693])\n",
      "tensor([2.5514, 0.2533])\n",
      "tensor([0.5897, 0.2147])\n",
      "tensor([3.1157, 0.0232])\n",
      "tensor([2.3449, 0.1943])\n",
      "tensor([2.0239, 0.4987])\n",
      "tensor([2.5893, 0.3776])\n",
      "tensor([2.1002, 0.1531])\n",
      "tensor([1.4139, 0.0617])\n",
      "tensor([2.9072, 0.0488])\n",
      "tensor([2.9487, 0.1774])\n",
      "tensor([0.8030, 0.2775])\n",
      "tensor([0.5902, 0.1995])\n",
      "tensor([3.2537, 0.1867])\n",
      "tensor([2.2028, 0.0184])\n",
      "tensor([2.5711, 0.0333])\n",
      "tensor([0.5015, 0.0437])\n",
      "tensor([0.9448, 0.0365])\n",
      "tensor([2.7764, 0.0054])\n",
      "tensor([1.9130, 0.0971])\n",
      "tensor([3.2444, 0.1230])\n",
      "tensor([0.6244, 0.0623])\n",
      "tensor([1.0730, 0.1748])\n",
      "tensor([2.2873, 0.0712])\n",
      "tensor([2.6494, 0.0360])\n",
      "tensor([0.5886, 0.0781])\n",
      "tensor([1.1827, 0.3364])\n",
      "tensor([1.4112, 0.3478])\n",
      "tensor([1.8576, 0.4407])\n",
      "tensor([2.7430, 0.2072])\n",
      "tensor([0.5296, 0.4674])\n",
      "tensor([0.9908, 0.0187])\n",
      "tensor([2.8810, 0.2528])\n",
      "tensor([3.3884, 0.1655])\n",
      "tensor([1.5405, 0.2672])\n",
      "tensor([2.9188, 0.1068])\n",
      "tensor([2.1766, 0.1596])\n",
      "tensor([1.8771, 0.2345])\n",
      "tensor([2.5702, 0.4258])\n",
      "tensor([3.2145, 0.3502])\n",
      "tensor([3.1807, 0.4467])\n",
      "tensor([1.2836, 0.3354])\n",
      "tensor([3.4695, 0.2621])\n",
      "tensor([0.7544, 0.0769])\n",
      "tensor([2.1729, 0.2245])\n",
      "tensor([2.5733, 0.1010])\n",
      "tensor([1.6170, 0.2121])\n",
      "tensor([1.0531, 0.3655])\n",
      "tensor([3.2375, 0.4258])\n",
      "tensor([2.2468, 0.1496])\n",
      "tensor([1.1690, 0.3748])\n",
      "tensor([2.0842, 0.1055])\n",
      "tensor([0.9633, 0.2149])\n",
      "tensor([1.4447, 0.1119])\n",
      "tensor([0.8650, 0.0366])\n",
      "tensor([2.1080, 0.0676])\n",
      "tensor([1.3640, 0.0098])\n",
      "tensor([2.6368, 0.0460])\n",
      "tensor([1.7102, 0.4189])\n",
      "tensor([2.8854, 0.1843])\n",
      "tensor([1.7897, 0.4731])\n",
      "tensor([1.6325, 0.3556])\n",
      "tensor([1.2608, 0.4183])\n",
      "tensor([3.3822, 0.0672])\n",
      "tensor([1.6153, 0.0681])\n",
      "tensor([1.7291, 0.4775])\n",
      "tensor([3.1129, 0.2558])\n",
      "tensor([1.4965, 0.1834])\n",
      "tensor([1.1291, 0.3505])\n",
      "tensor([2.1648, 0.1293])\n",
      "tensor([2.0526, 0.0569])\n",
      "tensor([0.7188, 0.4753])\n",
      "tensor([0.8114, 0.2114])\n",
      "tensor([0.8930, 0.3656])\n",
      "tensor([2.2506, 0.0523])\n",
      "tensor([0.7624, 0.3294])\n",
      "tensor([1.6545, 0.1151])\n",
      "tensor([0.9369, 0.2532])\n",
      "tensor([3.1279, 0.4725])\n",
      "tensor([2.1330, 0.2367])\n",
      "tensor([3.3243, 0.4270])\n",
      "tensor([2.3117, 0.3415])\n",
      "tensor([0.5357, 0.1514])\n",
      "tensor([1.9709, 0.0593])\n",
      "tensor([1.0755, 0.0074])\n",
      "tensor([1.8253, 0.1970])\n",
      "tensor([3.3746, 0.4833])\n",
      "tensor([0.5706, 0.0924])\n",
      "tensor([3.2231, 0.3053])\n",
      "tensor([1.0651, 0.1328])\n",
      "tensor([2.5412, 0.1560])\n",
      "tensor([3.1925, 0.2094])\n",
      "tensor([0.7704, 0.0883])\n",
      "tensor([2.4082, 0.3632])\n",
      "tensor([3.1625, 0.2270])\n",
      "tensor([3.4297, 0.3735])\n",
      "tensor([3.1116, 0.1587])\n",
      "tensor([3.3435, 0.2995])\n",
      "tensor([2.8187, 0.0616])\n",
      "tensor([0.8951, 0.4772])\n",
      "tensor([1.8703, 0.4446])\n",
      "tensor([1.7933, 0.1136])\n",
      "tensor([3.3367, 0.1436])\n",
      "tensor([1.6653, 0.2891])\n",
      "tensor([0.6373, 0.0673])\n",
      "tensor([0.5734, 0.3424])\n",
      "tensor([1.2819, 0.1978])\n",
      "tensor([1.8557, 0.4854])\n",
      "tensor([2.8811, 0.0419])\n",
      "tensor([1.1833, 0.2841])\n",
      "tensor([2.7156, 0.4402])\n",
      "tensor([2.7417, 0.3745])\n",
      "tensor([0.7683, 0.4257])\n",
      "tensor([2.2805, 0.3828])\n",
      "tensor([3.2617, 0.2867])\n",
      "tensor([2.0643, 0.1638])\n",
      "tensor([2.6191, 0.3951])\n",
      "tensor([2.3082, 0.2037])\n",
      "tensor([1.5098, 0.3867])\n",
      "tensor([2.3228, 0.1230])\n",
      "tensor([1.1759, 0.1255])\n",
      "tensor([1.5839, 0.4487])\n",
      "tensor([2.3180, 0.0718])\n",
      "tensor([1.4977, 0.4531])\n",
      "tensor([3.1809, 0.2560])\n",
      "tensor([2.4668, 0.3030])\n",
      "tensor([1.1209, 0.0026])\n",
      "tensor([3.4181, 0.2317])\n",
      "tensor([1.9947, 0.0071])\n",
      "tensor([0.9925, 0.1712])\n",
      "tensor([3.2099, 0.0132])\n",
      "tensor([1.4857, 0.3755])\n",
      "tensor([2.0166, 0.4976])\n",
      "tensor([2.7666, 0.2097])\n",
      "tensor([1.4913, 0.4493])\n",
      "tensor([0.5003, 0.2763])\n",
      "tensor([2.9478, 0.3145])\n",
      "tensor([1.5157, 0.0773])\n",
      "tensor([2.5978, 0.1388])\n",
      "tensor([2.9641, 0.2948])\n",
      "tensor([2.7943, 0.3374])\n",
      "tensor([3.1240, 0.0933])\n",
      "tensor([3.0378, 0.1113])\n",
      "tensor([2.4838, 0.3433])\n",
      "tensor([1.1552, 0.2859])\n",
      "tensor([3.1982, 0.1618])\n",
      "tensor([2.1035, 0.3946])\n",
      "tensor([0.9404, 0.1068])\n",
      "tensor([2.2381, 0.4472])\n",
      "tensor([0.9599, 0.0352])\n",
      "tensor([2.1751, 0.4461])\n",
      "tensor([2.7397, 0.2550])\n",
      "tensor([1.4949, 0.1661])\n",
      "tensor([3.4801, 0.4615])\n",
      "tensor([1.3281, 0.4596])\n",
      "tensor([3.2941, 0.0074])\n",
      "tensor([0.9023, 0.2559])\n",
      "tensor([2.2096, 0.2592])\n",
      "tensor([2.1848, 0.4356])\n",
      "tensor([3.4088, 0.2524])\n",
      "tensor([2.8142, 0.1591])\n",
      "tensor([1.1383, 0.1529])\n",
      "tensor([0.8236, 0.2913])\n",
      "tensor([0.6823, 0.4954])\n",
      "tensor([3.4747, 0.3491])\n",
      "tensor([1.1242, 0.2835])\n",
      "tensor([2.5788, 0.1492])\n",
      "tensor([3.2725, 0.2013])\n",
      "tensor([1.0726, 0.3858])\n",
      "tensor([3.4635, 0.0666])\n",
      "tensor([2.9205, 0.2608])\n",
      "tensor([0.8230, 0.2533])\n",
      "tensor([1.2335, 0.3130])\n",
      "tensor([0.7124, 0.4621])\n",
      "tensor([1.1408, 0.2662])\n",
      "tensor([1.0551, 0.2866])\n",
      "tensor([0.6905, 0.2413])\n",
      "tensor([0.6925, 0.1903])\n",
      "tensor([0.5807, 0.4204])\n",
      "tensor([2.6752, 0.4093])\n",
      "tensor([2.1584, 0.2149])\n",
      "tensor([2.5494, 0.0508])\n",
      "tensor([0.6909, 0.2180])\n",
      "tensor([3.1694, 0.3845])\n",
      "tensor([1.9982, 0.2095])\n",
      "tensor([0.5497, 0.2381])\n",
      "tensor([2.1581, 0.1279])\n",
      "tensor([2.2571, 0.4286])\n",
      "tensor([0.8342, 0.3005])\n",
      "tensor([1.9810, 0.2344])\n",
      "tensor([1.8076, 0.1402])\n",
      "tensor([2.8492, 0.3390])\n",
      "tensor([1.7342, 0.4843])\n",
      "tensor([2.2675, 0.0816])\n",
      "tensor([3.2488, 0.0999])\n",
      "tensor([1.8193, 0.1397])\n",
      "tensor([2.8609, 0.2549])\n",
      "tensor([1.0432, 0.3348])\n",
      "tensor([2.6237, 0.3034])\n",
      "tensor([1.1897, 0.4636])\n",
      "tensor([2.8904, 0.3818])\n",
      "tensor([3.1768, 0.4998])\n",
      "tensor([3.2079, 0.4424])\n",
      "tensor([2.6600, 0.4535])\n",
      "tensor([2.4759, 0.3321])\n",
      "tensor([0.6365, 0.2509])\n",
      "tensor([3.3272, 0.0717])\n",
      "tensor([3.1993, 0.3780])\n",
      "tensor([3.3475, 0.2225])\n",
      "tensor([1.9022, 0.2865])\n",
      "tensor([2.4751, 0.1618])\n",
      "tensor([3.4206, 0.1385])\n",
      "tensor([0.5325, 0.3717])\n",
      "tensor([2.2562, 0.2609])\n",
      "tensor([1.4870, 0.0913])\n",
      "tensor([1.4709, 0.4688])\n",
      "tensor([1.9673, 0.1347])\n",
      "tensor([1.6689, 0.1351])\n",
      "tensor([2.3741, 0.3842])\n",
      "tensor([1.6361, 0.2869])\n",
      "tensor([1.7364, 0.2305])\n",
      "tensor([3.1064, 0.4554])\n",
      "tensor([2.2689, 0.4316])\n",
      "tensor([0.8576, 0.3559])\n",
      "tensor([1.8231, 0.3036])\n",
      "tensor([1.7483, 0.2075])\n",
      "tensor([1.5806, 0.3702])\n",
      "tensor([0.7919, 0.3245])\n",
      "tensor([1.8560, 0.0983])\n",
      "tensor([2.4053, 0.3032])\n",
      "tensor([1.9345, 0.1502])\n",
      "tensor([2.4799, 0.2602])\n",
      "tensor([2.9125, 0.1255])\n",
      "tensor([2.0206, 0.3193])\n",
      "tensor([1.1044, 0.1011])\n",
      "tensor([0.7864, 0.1414])\n",
      "tensor([2.6862, 0.1979])\n",
      "tensor([0.7743, 0.0480])\n",
      "tensor([2.6718, 0.2725])\n",
      "tensor([3.0983, 0.3149])\n",
      "tensor([2.9260, 0.4686])\n",
      "tensor([2.1948, 0.1274])\n",
      "tensor([1.9582, 0.1437])\n",
      "tensor([3.0126, 0.2444])\n",
      "tensor([3.3641, 0.3506])\n",
      "tensor([1.8145, 0.2236])\n",
      "tensor([1.2037, 0.4529])\n",
      "tensor([3.4976, 0.2381])\n",
      "tensor([3.4292, 0.4883])\n",
      "tensor([1.4460, 0.4386])\n",
      "tensor([1.5586, 0.0503])\n",
      "tensor([1.8903, 0.2409])\n",
      "tensor([0.7998, 0.0326])\n",
      "tensor([3.1738, 0.0836])\n",
      "tensor([1.2134, 0.3654])\n",
      "tensor([2.2529, 0.2340])\n",
      "tensor([2.7259, 0.2590])\n",
      "tensor([3.3685, 0.3785])\n",
      "tensor([1.7842, 0.2726])\n",
      "tensor([3.4461, 0.4073])\n",
      "tensor([1.2985, 0.0415])\n",
      "tensor([3.3868, 0.2027])\n",
      "tensor([1.5368, 0.2579])\n",
      "tensor([0.9025, 0.4966])\n",
      "tensor([2.8398, 0.0288])\n",
      "tensor([2.3008, 0.3073])\n",
      "tensor([3.3085, 0.0945])\n",
      "tensor([2.4314, 0.1715])\n",
      "tensor([1.4382, 0.2082])\n",
      "tensor([1.7514, 0.4049])\n",
      "tensor([1.7343, 0.1325])\n",
      "tensor([1.4670, 0.0200])\n",
      "tensor([0.8816, 0.0432])\n",
      "tensor([0.9172, 0.1582])\n",
      "tensor([2.5479, 0.0382])\n",
      "tensor([1.8196, 0.2929])\n",
      "tensor([1.0749, 0.4746])\n",
      "tensor([2.2364, 0.2618])\n",
      "tensor([0.9525, 0.1801])\n",
      "tensor([2.8758, 0.0917])\n",
      "tensor([2.9888, 0.1455])\n",
      "tensor([2.2941, 0.0258])\n",
      "tensor([1.2677, 0.4449])\n",
      "tensor([2.6408, 0.4163])\n",
      "tensor([2.3221e+00, 2.2200e-03])\n",
      "tensor([1.6867, 0.0714])\n",
      "tensor([2.5618, 0.4901])\n",
      "tensor([0.5827, 0.0096])\n",
      "tensor([0.5497, 0.3184])\n",
      "tensor([2.1712, 0.4044])\n",
      "tensor([1.6990, 0.1331])\n",
      "tensor([2.7374, 0.0364])\n",
      "tensor([3.0016, 0.4687])\n",
      "tensor([3.2954, 0.2851])\n",
      "tensor([2.1299, 0.4587])\n",
      "tensor([2.7860, 0.3236])\n",
      "tensor([2.2368, 0.0761])\n",
      "tensor([2.4014, 0.4152])\n",
      "tensor([1.2840, 0.2307])\n",
      "tensor([0.9663, 0.3210])\n",
      "tensor([2.3982, 0.4814])\n",
      "tensor([1.0665, 0.1594])\n",
      "tensor([2.8340, 0.1297])\n",
      "tensor([1.9308, 0.3481])\n",
      "tensor([2.2050, 0.0894])\n",
      "tensor([1.5169, 0.2062])\n",
      "tensor([2.6105, 0.0766])\n",
      "tensor([0.7180, 0.3797])\n",
      "tensor([1.2225, 0.1199])\n",
      "tensor([2.1517, 0.1643])\n",
      "tensor([2.8077, 0.0899])\n",
      "tensor([3.4535, 0.1254])\n",
      "tensor([1.7762, 0.3685])\n",
      "tensor([0.5877, 0.1657])\n",
      "tensor([1.2082, 0.0721])\n",
      "tensor([1.2497, 0.4825])\n",
      "tensor([0.7496, 0.4407])\n",
      "tensor([0.6314, 0.4293])\n",
      "tensor([2.2703, 0.1930])\n",
      "tensor([2.4573, 0.0299])\n",
      "tensor([1.7480, 0.1867])\n",
      "tensor([1.3595, 0.3421])\n",
      "tensor([1.3144, 0.2401])\n",
      "tensor([2.3196, 0.3027])\n",
      "tensor([3.1057, 0.2857])\n",
      "tensor([1.7385, 0.2829])\n",
      "tensor([3.0974, 0.2336])\n",
      "tensor([3.2492, 0.1633])\n",
      "tensor([2.5454, 0.1472])\n",
      "tensor([3.1482, 0.1064])\n",
      "tensor([2.1873, 0.2681])\n",
      "tensor([1.3405, 0.0384])\n",
      "tensor([2.3201, 0.4549])\n",
      "tensor([1.5888, 0.3215])\n",
      "tensor([2.8653, 0.2114])\n",
      "tensor([2.7758, 0.0547])\n",
      "tensor([0.5488, 0.1390])\n",
      "tensor([3.0860, 0.1856])\n",
      "tensor([3.0714, 0.1482])\n",
      "tensor([1.1853, 0.1282])\n",
      "tensor([2.0861, 0.4042])\n",
      "tensor([0.6330, 0.3048])\n",
      "tensor([0.6803, 0.1744])\n",
      "tensor([3.3755, 0.4053])\n",
      "tensor([2.1519, 0.1343])\n",
      "tensor([1.9034, 0.4242])\n",
      "tensor([1.4166, 0.4257])\n",
      "tensor([1.2587, 0.0044])\n",
      "tensor([2.3712, 0.4146])\n",
      "tensor([1.0022, 0.3135])\n",
      "tensor([3.4704, 0.3555])\n",
      "tensor([3.1896, 0.2778])\n",
      "tensor([0.9288, 0.3128])\n",
      "tensor([1.9462, 0.1410])\n",
      "tensor([1.6216, 0.1670])\n",
      "tensor([3.2964, 0.4925])\n",
      "tensor([1.8783, 0.3255])\n",
      "tensor([2.5944, 0.2532])\n",
      "tensor([0.8600, 0.0131])\n",
      "tensor([2.1567, 0.0648])\n",
      "tensor([1.4179, 0.1770])\n",
      "tensor([0.5935, 0.1674])\n",
      "tensor([2.7245, 0.2036])\n",
      "tensor([3.3548, 0.3786])\n",
      "tensor([3.2449, 0.0705])\n",
      "tensor([2.9791, 0.0408])\n",
      "tensor([3.2491, 0.1567])\n",
      "tensor([0.7674, 0.2521])\n",
      "tensor([2.3925, 0.2120])\n",
      "tensor([3.4112, 0.0273])\n",
      "tensor([2.0970, 0.2552])\n",
      "tensor([2.7237, 0.2302])\n",
      "tensor([2.5030, 0.3981])\n",
      "tensor([2.8768, 0.3199])\n",
      "tensor([2.5068, 0.1669])\n",
      "tensor([1.8322, 0.0698])\n",
      "tensor([0.8921, 0.3205])\n",
      "tensor([1.5558, 0.1552])\n",
      "tensor([2.2982, 0.3651])\n",
      "tensor([3.1517, 0.4549])\n",
      "tensor([1.8114, 0.0579])\n",
      "tensor([1.1674, 0.4412])\n",
      "tensor([1.4371, 0.3176])\n",
      "tensor([1.5736, 0.1427])\n",
      "tensor([1.1544, 0.0598])\n",
      "tensor([3.2451, 0.1257])\n",
      "tensor([3.4494, 0.3275])\n",
      "tensor([2.1469, 0.4109])\n",
      "tensor([2.6255, 0.0429])\n",
      "tensor([1.3164, 0.0923])\n",
      "tensor([2.8524, 0.0939])\n",
      "tensor([1.3313, 0.1176])\n",
      "tensor([1.7708, 0.3364])\n",
      "tensor([2.8846, 0.2104])\n",
      "tensor([3.4326, 0.2214])\n",
      "tensor([2.7635, 0.4299])\n",
      "tensor([3.3968, 0.2849])\n",
      "tensor([1.5812, 0.3674])\n",
      "tensor([2.9797, 0.0478])\n",
      "tensor([1.0945, 0.2170])\n",
      "tensor([0.8944, 0.0649])\n",
      "tensor([1.9965, 0.2649])\n",
      "tensor([0.5681, 0.2125])\n",
      "tensor([2.3888, 0.1101])\n",
      "tensor([2.5415, 0.1690])\n",
      "tensor([1.3478, 0.0948])\n",
      "tensor([2.3308, 0.2936])\n",
      "tensor([0.9362, 0.4784])\n",
      "tensor([0.8233, 0.1995])\n",
      "tensor([3.1495, 0.0814])\n",
      "tensor([2.3876, 0.3765])\n",
      "tensor([1.5704, 0.4082])\n",
      "tensor([0.9967, 0.0806])\n",
      "tensor([1.9664, 0.3349])\n",
      "tensor([1.3883, 0.4914])\n",
      "tensor([2.5951, 0.2844])\n",
      "tensor([2.1605, 0.2105])\n",
      "tensor([1.1926, 0.4006])\n",
      "tensor([1.7671, 0.2583])\n",
      "tensor([2.9886, 0.0314])\n",
      "tensor([2.1287, 0.0173])\n",
      "tensor([3.3744, 0.3761])\n",
      "tensor([1.9403, 0.1443])\n",
      "tensor([1.8159, 0.2511])\n",
      "tensor([2.9602, 0.1761])\n",
      "tensor([0.5110, 0.0255])\n",
      "tensor([1.4272, 0.4552])\n",
      "tensor([2.8242, 0.1413])\n",
      "tensor([1.8450, 0.3534])\n",
      "tensor([2.1890, 0.4491])\n",
      "tensor([1.5349, 0.2039])\n",
      "tensor([0.7704, 0.2761])\n",
      "tensor([2.2739, 0.3854])\n",
      "tensor([2.8699, 0.2587])\n",
      "tensor([2.9774, 0.1970])\n",
      "tensor([0.9695, 0.0232])\n",
      "tensor([2.5821, 0.4665])\n",
      "tensor([2.4272, 0.2192])\n",
      "tensor([0.8393, 0.1333])\n",
      "tensor([3.4670, 0.0511])\n",
      "tensor([1.7832, 0.0661])\n",
      "tensor([3.2514, 0.2250])\n",
      "tensor([1.8497, 0.1998])\n",
      "tensor([2.3485, 0.1957])\n",
      "tensor([2.4681, 0.1260])\n",
      "tensor([1.4547, 0.1429])\n",
      "tensor([3.0028, 0.2603])\n",
      "tensor([1.4234, 0.0639])\n",
      "tensor([1.2964, 0.4374])\n",
      "tensor([0.8678, 0.2085])\n",
      "tensor([1.5092, 0.4958])\n",
      "tensor([3.1886, 0.3046])\n",
      "tensor([2.3552, 0.0934])\n",
      "tensor([1.6507, 0.0283])\n",
      "tensor([2.1569, 0.4582])\n",
      "tensor([3.0288, 0.2215])\n",
      "tensor([2.5306, 0.0183])\n",
      "tensor([2.5912, 0.3260])\n",
      "tensor([1.4903, 0.4558])\n",
      "tensor([0.8856, 0.4574])\n",
      "tensor([3.3071, 0.4749])\n",
      "tensor([3.1610, 0.4793])\n",
      "tensor([3.0466, 0.2317])\n",
      "tensor([2.0336, 0.2006])\n",
      "tensor([1.5488, 0.1617])\n",
      "tensor([1.5802, 0.0549])\n",
      "tensor([1.9177, 0.2314])\n",
      "tensor([1.6008, 0.0248])\n",
      "tensor([0.8827, 0.3551])\n",
      "tensor([2.6969, 0.0113])\n",
      "tensor([1.0263, 0.0094])\n",
      "tensor([2.6814, 0.4746])\n",
      "tensor([2.5764, 0.4085])\n",
      "tensor([1.0339, 0.0459])\n",
      "tensor([3.1971, 0.4154])\n",
      "tensor([2.7651, 0.4550])\n",
      "tensor([2.7880, 0.1522])\n",
      "tensor([0.7715, 0.2164])\n",
      "tensor([1.8475, 0.4906])\n",
      "tensor([3.1666, 0.3062])\n",
      "tensor([1.3897, 0.4628])\n",
      "tensor([2.9298, 0.3113])\n",
      "tensor([2.8822, 0.2525])\n",
      "tensor([2.9652, 0.4778])\n",
      "tensor([2.9751, 0.3759])\n",
      "tensor([1.8943, 0.3451])\n",
      "tensor([2.1880, 0.1656])\n",
      "tensor([2.3098, 0.2378])\n",
      "tensor([2.8382, 0.4518])\n",
      "tensor([1.1647, 0.0505])\n",
      "tensor([1.7111, 0.3091])\n",
      "tensor([1.4498, 0.4541])\n",
      "tensor([2.2157, 0.0513])\n",
      "tensor([3.1788, 0.4052])\n",
      "tensor([1.3756, 0.4307])\n",
      "tensor([1.5694, 0.4029])\n",
      "tensor([3.3040, 0.3976])\n",
      "tensor([3.3317, 0.2927])\n",
      "tensor([0.5911, 0.3635])\n",
      "tensor([2.1489, 0.0430])\n",
      "tensor([0.8524, 0.1994])\n",
      "tensor([2.0138, 0.4484])\n",
      "tensor([3.4933, 0.2869])\n",
      "tensor([1.1281, 0.4513])\n",
      "tensor([1.9631, 0.3718])\n",
      "tensor([1.1834, 0.0130])\n",
      "tensor([2.5479, 0.4502])\n",
      "tensor([1.9691, 0.0747])\n",
      "tensor([1.3560, 0.0847])\n",
      "tensor([2.0930, 0.2513])\n",
      "tensor([0.9714, 0.0048])\n",
      "tensor([1.2522, 0.1214])\n",
      "tensor([0.7386, 0.4548])\n",
      "tensor([3.2673, 0.2211])\n",
      "tensor([2.8271, 0.3588])\n",
      "tensor([1.1154, 0.1434])\n",
      "tensor([2.8267, 0.3465])\n",
      "tensor([0.8362, 0.3568])\n",
      "tensor([2.3720, 0.0997])\n",
      "tensor([2.5190, 0.2858])\n",
      "tensor([2.4732, 0.2382])\n",
      "tensor([1.1638, 0.1811])\n",
      "tensor([0.5560, 0.4701])\n",
      "tensor([3.1736, 0.1923])\n",
      "tensor([1.8085, 0.1566])\n",
      "tensor([0.9368, 0.1291])\n",
      "tensor([2.4315, 0.1873])\n",
      "tensor([3.1526, 0.4682])\n",
      "tensor([1.1170, 0.2727])\n",
      "tensor([1.8722, 0.4735])\n",
      "tensor([1.8969, 0.4374])\n",
      "tensor([1.9493, 0.1222])\n",
      "tensor([1.5321, 0.1207])\n",
      "tensor([1.1657, 0.1687])\n",
      "tensor([1.8330, 0.3631])\n",
      "tensor([2.5646, 0.0783])\n",
      "tensor([1.3202, 0.3234])\n",
      "tensor([3.0146, 0.4206])\n",
      "tensor([2.2184, 0.4505])\n",
      "tensor([1.4070, 0.2458])\n",
      "tensor([0.5130, 0.1535])\n",
      "tensor([1.8437, 0.0954])\n",
      "tensor([3.3157, 0.4676])\n",
      "tensor([1.8627, 0.1692])\n",
      "tensor([1.5343, 0.1326])\n",
      "tensor([3.0782, 0.2634])\n",
      "tensor([1.0436, 0.1485])\n",
      "tensor([1.5995, 0.1867])\n",
      "tensor([0.5782, 0.4500])\n",
      "tensor([0.5143, 0.4220])\n",
      "tensor([2.6259, 0.2017])\n",
      "tensor([1.5726, 0.3314])\n",
      "tensor([2.8527, 0.3291])\n",
      "tensor([1.6106, 0.4986])\n",
      "tensor([3.4988, 0.2193])\n",
      "tensor([1.5411, 0.2087])\n",
      "tensor([2.6301, 0.2035])\n",
      "tensor([2.2969, 0.0152])\n",
      "tensor([0.9093, 0.2006])\n",
      "tensor([2.8558, 0.4401])\n",
      "tensor([1.8404, 0.0736])\n",
      "tensor([2.5353, 0.2857])\n",
      "tensor([2.9199, 0.0996])\n",
      "tensor([1.5885, 0.0189])\n",
      "tensor([1.0594, 0.2816])\n",
      "tensor([1.9087, 0.2793])\n",
      "tensor([1.7966, 0.1438])\n",
      "tensor([1.5455, 0.1305])\n",
      "tensor([1.8013, 0.2511])\n",
      "tensor([0.5621, 0.1652])\n",
      "tensor([2.9433, 0.3468])\n",
      "tensor([2.5745, 0.1975])\n",
      "tensor([2.1243, 0.1963])\n",
      "tensor([2.5821, 0.2847])\n",
      "tensor([2.5405, 0.3292])\n",
      "tensor([3.0761, 0.0831])\n",
      "tensor([1.1317, 0.1242])\n",
      "tensor([1.0543, 0.1042])\n",
      "tensor([1.1554, 0.2588])\n",
      "tensor([3.1193, 0.0576])\n",
      "tensor([0.9393, 0.2345])\n",
      "tensor([2.1898, 0.1889])\n",
      "tensor([2.3256, 0.3047])\n",
      "tensor([2.2463, 0.1202])\n",
      "tensor([1.4438, 0.3851])\n",
      "tensor([3.0927, 0.2283])\n",
      "tensor([2.9582, 0.3695])\n",
      "tensor([1.7754, 0.2693])\n",
      "tensor([1.3340, 0.0691])\n",
      "tensor([0.5784, 0.0169])\n",
      "tensor([2.3413, 0.2239])\n",
      "tensor([2.0552, 0.3182])\n",
      "tensor([2.1914, 0.2090])\n",
      "tensor([3.1415, 0.0100])\n",
      "tensor([2.3727, 0.4574])\n",
      "tensor([3.3616, 0.3763])\n",
      "tensor([3.1528, 0.3616])\n",
      "tensor([3.0893, 0.2384])\n",
      "tensor([3.2480, 0.1711])\n",
      "tensor([1.1459, 0.0177])\n",
      "tensor([1.8824, 0.3396])\n",
      "tensor([2.4573, 0.4364])\n",
      "tensor([2.5433, 0.1521])\n",
      "tensor([1.2548, 0.4641])\n",
      "tensor([1.4500, 0.1132])\n",
      "tensor([3.4048, 0.4901])\n",
      "tensor([3.0838, 0.4562])\n",
      "tensor([2.3048, 0.3943])\n",
      "tensor([0.7667, 0.2330])\n",
      "tensor([0.7777, 0.3644])\n",
      "tensor([1.4678, 0.2664])\n",
      "tensor([2.6864, 0.0138])\n",
      "tensor([1.9603, 0.1805])\n",
      "tensor([2.0515, 0.1495])\n",
      "tensor([3.2870, 0.2904])\n",
      "tensor([2.5175, 0.4965])\n",
      "tensor([1.1229, 0.3875])\n",
      "tensor([0.8684, 0.3576])\n",
      "tensor([1.9085, 0.0784])\n",
      "tensor([3.2659, 0.1346])\n",
      "tensor([2.8238, 0.2266])\n",
      "tensor([2.2481, 0.4392])\n",
      "tensor([2.2965, 0.3507])\n",
      "tensor([1.9935, 0.0422])\n",
      "tensor([2.5781, 0.2514])\n",
      "tensor([3.0608, 0.3629])\n",
      "tensor([2.3788, 0.1157])\n",
      "tensor([3.2843, 0.1364])\n",
      "tensor([2.7437, 0.2617])\n",
      "tensor([2.0658, 0.2388])\n",
      "tensor([2.8880, 0.2972])\n",
      "tensor([0.9830, 0.3410])\n",
      "tensor([3.2459, 0.1937])\n",
      "tensor([2.7192, 0.3657])\n",
      "tensor([2.3163, 0.3333])\n",
      "tensor([1.1512, 0.3471])\n",
      "tensor([1.3044, 0.4044])\n",
      "tensor([2.4823, 0.2995])\n",
      "tensor([1.1119, 0.1884])\n",
      "tensor([2.6122, 0.0389])\n",
      "tensor([2.6493, 0.4597])\n",
      "tensor([2.7867, 0.3022])\n",
      "tensor([2.4814, 0.0452])\n",
      "tensor([2.1918, 0.1076])\n",
      "tensor([0.5471, 0.2787])\n",
      "tensor([2.8728, 0.0081])\n",
      "tensor([1.1233, 0.1820])\n",
      "tensor([0.8932, 0.3969])\n",
      "tensor([1.8648, 0.0267])\n",
      "tensor([2.2797, 0.2081])\n",
      "tensor([2.8109, 0.3761])\n",
      "tensor([1.5958, 0.1322])\n",
      "tensor([1.5348, 0.2114])\n",
      "tensor([1.7272, 0.0907])\n",
      "tensor([3.1823, 0.3281])\n",
      "tensor([0.6676, 0.3515])\n",
      "tensor([0.5402, 0.4813])\n",
      "tensor([2.2287, 0.4464])\n",
      "tensor([1.8760, 0.2649])\n",
      "tensor([1.0359, 0.4757])\n",
      "tensor([1.5957, 0.4189])\n",
      "tensor([0.9574, 0.1821])\n",
      "tensor([1.0797, 0.0226])\n",
      "tensor([1.3391, 0.4823])\n",
      "tensor([2.9610, 0.0693])\n",
      "tensor([1.5561, 0.3959])\n",
      "tensor([2.7316, 0.1540])\n",
      "tensor([3.0433, 0.1744])\n",
      "tensor([0.5696, 0.3445])\n",
      "tensor([3.1829, 0.0872])\n",
      "tensor([3.4180, 0.2355])\n",
      "tensor([0.7127, 0.4992])\n",
      "tensor([0.8849, 0.2266])\n",
      "tensor([2.8970e+00, 4.1521e-04])\n",
      "tensor([2.3110, 0.1201])\n",
      "tensor([0.6604, 0.4516])\n",
      "tensor([1.8934, 0.3609])\n",
      "tensor([0.5728, 0.3850])\n",
      "tensor([3.3533, 0.4977])\n",
      "tensor([2.7118, 0.3399])\n",
      "tensor([0.5964, 0.1759])\n",
      "tensor([2.9787, 0.2465])\n",
      "tensor([3.0725, 0.1189])\n",
      "tensor([3.0181, 0.0440])\n",
      "tensor([3.0788, 0.2196])\n",
      "tensor([2.1927, 0.4407])\n",
      "tensor([1.6218, 0.3039])\n",
      "tensor([1.7612, 0.0880])\n",
      "tensor([0.9866, 0.3691])\n",
      "tensor([2.6652, 0.1732])\n",
      "tensor([2.3332, 0.4862])\n",
      "tensor([3.4348, 0.1325])\n",
      "tensor([0.8675, 0.2977])\n",
      "tensor([2.5438, 0.2481])\n",
      "tensor([1.4635, 0.0721])\n",
      "tensor([1.8611, 0.1176])\n",
      "tensor([1.8775, 0.4779])\n",
      "tensor([2.0033, 0.1071])\n",
      "tensor([0.8972, 0.3018])\n",
      "tensor([0.8098, 0.0076])\n",
      "tensor([2.5618, 0.0480])\n",
      "tensor([1.3138, 0.3008])\n",
      "tensor([2.3658, 0.3316])\n",
      "tensor([1.3841, 0.1100])\n",
      "tensor([0.5201, 0.2459])\n",
      "tensor([1.1882, 0.0620])\n",
      "tensor([2.9008e+00, 5.4675e-04])\n",
      "tensor([1.8237, 0.0301])\n",
      "tensor([1.3329, 0.0305])\n",
      "tensor([1.6658, 0.2883])\n",
      "tensor([1.5129, 0.1788])\n",
      "tensor([3.0081, 0.1422])\n",
      "tensor([3.4072, 0.3753])\n",
      "tensor([1.1641, 0.4979])\n",
      "tensor([2.0088, 0.1418])\n",
      "tensor([3.4300, 0.3787])\n",
      "tensor([0.8631, 0.0435])\n",
      "tensor([0.8492, 0.3183])\n",
      "tensor([1.4918, 0.1810])\n",
      "tensor([3.3587, 0.1377])\n",
      "tensor([2.5843, 0.2806])\n",
      "tensor([3.2478, 0.0920])\n",
      "tensor([3.0084, 0.2653])\n",
      "tensor([0.6028, 0.3874])\n",
      "tensor([3.3942, 0.2194])\n",
      "tensor([1.2292, 0.3493])\n",
      "tensor([1.3096, 0.0434])\n",
      "tensor([3.0498, 0.1436])\n",
      "tensor([1.7981, 0.4458])\n",
      "tensor([0.9493, 0.1845])\n",
      "tensor([2.7073, 0.2748])\n",
      "tensor([1.1383, 0.0694])\n",
      "tensor([2.8034, 0.2900])\n",
      "tensor([1.8080, 0.0694])\n",
      "tensor([1.6856, 0.0725])\n",
      "tensor([0.6875, 0.1135])\n",
      "tensor([3.3977, 0.4287])\n",
      "tensor([1.0992, 0.2873])\n",
      "tensor([3.4434, 0.3230])\n",
      "tensor([0.8518, 0.0169])\n",
      "tensor([2.1597, 0.3292])\n",
      "tensor([0.7421, 0.0862])\n",
      "tensor([3.4805, 0.0190])\n",
      "tensor([2.4619, 0.2069])\n",
      "tensor([2.4407, 0.4656])\n",
      "tensor([2.8389, 0.3212])\n",
      "tensor([1.5185, 0.3719])\n",
      "tensor([3.2610, 0.1285])\n",
      "tensor([0.8086, 0.0307])\n",
      "tensor([1.5707, 0.0120])\n",
      "tensor([0.8470, 0.1137])\n",
      "tensor([2.6584, 0.0726])\n",
      "tensor([1.5365, 0.4503])\n",
      "tensor([1.8825, 0.0602])\n",
      "tensor([0.9301, 0.3156])\n",
      "tensor([0.6112, 0.0455])\n",
      "tensor([3.4524, 0.0996])\n",
      "tensor([2.6326, 0.4112])\n",
      "tensor([0.9751, 0.2628])\n",
      "tensor([3.3449, 0.3757])\n",
      "tensor([1.9494, 0.3197])\n",
      "tensor([2.0934, 0.1746])\n",
      "tensor([1.0112, 0.0240])\n",
      "tensor([1.1157, 0.4667])\n",
      "tensor([1.8041, 0.3930])\n",
      "tensor([3.1534, 0.1683])\n",
      "tensor([3.4721, 0.1936])\n",
      "tensor([2.1198, 0.1936])\n",
      "tensor([3.1163, 0.4771])\n",
      "tensor([3.4802, 0.0203])\n",
      "tensor([1.0309, 0.4241])\n",
      "tensor([1.0951, 0.2372])\n",
      "tensor([0.9290, 0.2008])\n",
      "tensor([0.5971, 0.3732])\n",
      "tensor([1.6621, 0.4074])\n",
      "tensor([2.9332, 0.3629])\n",
      "tensor([2.7637, 0.1078])\n",
      "tensor([2.0903, 0.1617])\n",
      "tensor([1.6354, 0.3028])\n",
      "tensor([1.2881, 0.2139])\n",
      "tensor([2.7637, 0.2652])\n",
      "tensor([1.9594, 0.2789])\n",
      "tensor([2.3286, 0.0835])\n",
      "tensor([0.7584, 0.1621])\n",
      "tensor([3.3845, 0.2510])\n",
      "tensor([3.3076, 0.3709])\n",
      "tensor([3.2429, 0.3281])\n",
      "tensor([3.0927, 0.4821])\n",
      "tensor([0.8900, 0.2351])\n",
      "tensor([1.1555, 0.1652])\n",
      "tensor([2.3621, 0.0291])\n",
      "tensor([1.2394, 0.4091])\n",
      "tensor([2.6099, 0.2281])\n",
      "tensor([1.2295, 0.4269])\n",
      "tensor([2.2925, 0.1853])\n",
      "tensor([3.2897, 0.0744])\n",
      "tensor([1.5396, 0.0124])\n",
      "tensor([0.5965, 0.0657])\n",
      "tensor([2.8389, 0.3412])\n",
      "tensor([2.4059, 0.4101])\n",
      "tensor([0.7409, 0.1016])\n",
      "tensor([0.5019, 0.0351])\n",
      "tensor([3.2254, 0.1883])\n",
      "tensor([1.7644, 0.3562])\n",
      "tensor([2.5557, 0.3847])\n",
      "tensor([1.0996, 0.4217])\n",
      "tensor([0.8735, 0.2630])\n",
      "tensor([1.8907, 0.1942])\n",
      "tensor([2.7568, 0.0908])\n",
      "tensor([0.8639, 0.0366])\n",
      "tensor([1.5663, 0.0045])\n",
      "tensor([0.9533, 0.2081])\n",
      "tensor([0.7674, 0.2918])\n",
      "tensor([2.7433, 0.3295])\n",
      "tensor([3.3060, 0.1008])\n",
      "tensor([1.1671, 0.4665])\n",
      "tensor([1.5239, 0.2177])\n",
      "tensor([1.0493, 0.1029])\n",
      "tensor([3.4595, 0.3835])\n",
      "tensor([2.5986, 0.0638])\n",
      "tensor([1.4092, 0.3620])\n",
      "tensor([2.7762, 0.0238])\n",
      "tensor([2.1778, 0.4005])\n",
      "tensor([2.3332, 0.2683])\n",
      "tensor([0.6092, 0.3767])\n",
      "tensor([0.9695, 0.4245])\n",
      "tensor([1.4430, 0.0730])\n",
      "tensor([2.5000, 0.3652])\n",
      "tensor([0.7123, 0.2886])\n",
      "tensor([2.5549, 0.4788])\n",
      "tensor([1.5887, 0.1145])\n",
      "tensor([2.7008, 0.4804])\n",
      "tensor([0.7119, 0.1538])\n",
      "tensor([0.7583, 0.2107])\n",
      "tensor([0.6385, 0.4584])\n",
      "tensor([1.5531, 0.0857])\n",
      "tensor([2.2788, 0.2913])\n",
      "tensor([1.6689, 0.3208])\n",
      "tensor([1.1555, 0.4717])\n",
      "tensor([1.8624, 0.4735])\n",
      "tensor([1.9535, 0.3134])\n",
      "tensor([3.2664, 0.2251])\n",
      "tensor([2.6795, 0.0997])\n",
      "tensor([2.5721, 0.4879])\n",
      "tensor([2.6719e+00, 2.0193e-03])\n",
      "tensor([1.2485, 0.0768])\n",
      "tensor([3.0080, 0.4417])\n",
      "tensor([0.7018, 0.2465])\n",
      "tensor([0.6885, 0.0656])\n",
      "tensor([1.6171, 0.3881])\n",
      "tensor([2.7416, 0.1829])\n",
      "tensor([1.3525, 0.0203])\n",
      "tensor([2.4643, 0.3886])\n",
      "tensor([3.2892, 0.1488])\n",
      "tensor([2.0954, 0.3751])\n",
      "tensor([1.1788, 0.2607])\n",
      "tensor([0.7404, 0.0463])\n",
      "tensor([1.3647, 0.0346])\n",
      "tensor([3.3558, 0.2454])\n",
      "tensor([0.6494, 0.0981])\n",
      "tensor([3.3972, 0.4746])\n",
      "tensor([2.8458, 0.3013])\n",
      "tensor([2.7890, 0.4462])\n",
      "tensor([3.3747, 0.4906])\n",
      "tensor([2.7360, 0.0431])\n",
      "tensor([3.4579, 0.2010])\n",
      "tensor([2.8982, 0.3837])\n",
      "tensor([2.4813, 0.3294])\n",
      "tensor([0.6677, 0.4609])\n",
      "tensor([3.1483, 0.3050])\n",
      "tensor([0.5855, 0.3628])\n",
      "tensor([0.7286, 0.4522])\n",
      "tensor([0.6597, 0.2685])\n",
      "tensor([1.1081, 0.0377])\n",
      "tensor([3.0508, 0.4930])\n",
      "tensor([1.0154, 0.1473])\n",
      "tensor([1.5843, 0.4723])\n",
      "tensor([0.7082, 0.0802])\n",
      "tensor([2.5996, 0.1521])\n",
      "tensor([1.8395, 0.1128])\n",
      "tensor([0.8414, 0.4254])\n",
      "tensor([1.3335, 0.3082])\n",
      "tensor([0.9800, 0.2924])\n",
      "tensor([2.3582, 0.0929])\n",
      "tensor([1.5528, 0.4852])\n",
      "tensor([2.9843, 0.4756])\n",
      "tensor([3.3921, 0.4069])\n",
      "tensor([0.7812, 0.1263])\n",
      "tensor([1.8170, 0.3228])\n",
      "tensor([0.6824, 0.1557])\n",
      "tensor([2.7121, 0.3245])\n",
      "tensor([1.5095, 0.2890])\n",
      "tensor([0.5138, 0.1645])\n",
      "tensor([1.4866, 0.1383])\n",
      "tensor([2.7783, 0.3740])\n",
      "tensor([2.9421, 0.3806])\n",
      "tensor([2.5526, 0.0995])\n",
      "tensor([2.9118, 0.2530])\n",
      "tensor([1.2144, 0.0430])\n",
      "tensor([3.4901, 0.4615])\n",
      "tensor([2.4476, 0.0134])\n",
      "tensor([0.9615, 0.2508])\n",
      "tensor([1.2790, 0.4799])\n",
      "tensor([0.7075, 0.1237])\n",
      "tensor([3.0181, 0.0651])\n",
      "tensor([2.8335, 0.2853])\n",
      "tensor([0.6845, 0.2695])\n",
      "tensor([1.1375, 0.4870])\n",
      "tensor([2.8222, 0.4585])\n",
      "tensor([3.1437, 0.4573])\n",
      "tensor([2.2521, 0.2393])\n",
      "tensor([2.9569, 0.0800])\n",
      "tensor([2.9055, 0.2068])\n",
      "tensor([3.3812, 0.4148])\n",
      "tensor([2.7905, 0.1751])\n",
      "tensor([3.0244, 0.0362])\n",
      "tensor([2.3692, 0.1314])\n",
      "tensor([2.7792, 0.1926])\n",
      "tensor([2.7090, 0.3802])\n",
      "tensor([2.0042, 0.0444])\n",
      "tensor([2.9872, 0.2686])\n",
      "tensor([2.1755, 0.4780])\n",
      "tensor([1.6090, 0.4695])\n",
      "tensor([3.4672, 0.2734])\n",
      "tensor([2.3925, 0.0304])\n",
      "tensor([3.3078, 0.1209])\n",
      "tensor([2.8941, 0.1897])\n",
      "tensor([0.7069, 0.3412])\n",
      "tensor([1.4611, 0.0824])\n",
      "tensor([2.9309, 0.4685])\n",
      "tensor([0.5777, 0.1866])\n",
      "tensor([2.0082, 0.2973])\n",
      "tensor([1.3371, 0.1203])\n",
      "tensor([2.6622, 0.2615])\n",
      "tensor([1.7768, 0.2376])\n",
      "tensor([3.1567, 0.3002])\n",
      "tensor([2.9455, 0.3211])\n",
      "tensor([2.0064, 0.3437])\n",
      "tensor([2.7725, 0.1478])\n",
      "tensor([2.7477, 0.3847])\n",
      "tensor([1.0511, 0.4812])\n",
      "tensor([1.1312, 0.4411])\n",
      "tensor([1.7270, 0.0767])\n",
      "tensor([0.5741, 0.0636])\n",
      "tensor([1.4615, 0.1904])\n",
      "tensor([1.3854, 0.0873])\n",
      "tensor([0.9026, 0.4353])\n",
      "tensor([1.8192, 0.3285])\n",
      "tensor([1.8646, 0.2583])\n",
      "tensor([0.5783, 0.0477])\n",
      "tensor([0.8053, 0.0100])\n",
      "tensor([0.9199, 0.1292])\n",
      "tensor([0.5225, 0.3524])\n",
      "tensor([2.4692, 0.0522])\n",
      "tensor([1.3913, 0.3843])\n",
      "tensor([1.6806, 0.0363])\n",
      "tensor([0.6486, 0.2229])\n",
      "tensor([2.7785, 0.4589])\n",
      "tensor([1.7294, 0.0266])\n",
      "tensor([1.9978, 0.2362])\n",
      "tensor([2.5416, 0.4680])\n",
      "tensor([0.7556, 0.4882])\n",
      "tensor([1.3755, 0.1552])\n",
      "tensor([1.6418, 0.3474])\n",
      "tensor([1.4347, 0.3950])\n",
      "tensor([1.0618, 0.1139])\n",
      "tensor([1.4016, 0.4942])\n",
      "tensor([0.6039, 0.3899])\n",
      "tensor([1.6183, 0.4787])\n",
      "tensor([2.2221, 0.0966])\n",
      "tensor([2.2785, 0.2577])\n",
      "tensor([3.3610, 0.3319])\n",
      "tensor([3.4681, 0.1302])\n",
      "tensor([2.0686, 0.1313])\n",
      "tensor([2.9490, 0.4441])\n",
      "tensor([1.1818, 0.3112])\n",
      "tensor([0.5704, 0.1272])\n",
      "tensor([1.0751, 0.0330])\n",
      "tensor([1.8554, 0.3319])\n",
      "tensor([0.5655, 0.0785])\n",
      "tensor([2.3895, 0.3174])\n",
      "tensor([3.2402, 0.4208])\n",
      "tensor([1.0208, 0.1855])\n",
      "tensor([0.6122, 0.1993])\n",
      "tensor([2.2052, 0.1019])\n",
      "tensor([1.8507, 0.0090])\n",
      "tensor([0.6479, 0.1448])\n",
      "tensor([1.6877, 0.3660])\n",
      "tensor([3.1793, 0.4711])\n",
      "tensor([1.9892, 0.4795])\n",
      "tensor([3.2146, 0.3183])\n",
      "tensor([0.8789, 0.2204])\n",
      "tensor([2.0301, 0.3231])\n",
      "tensor([0.6048, 0.2017])\n",
      "tensor([3.3252, 0.1483])\n",
      "tensor([1.0050, 0.1869])\n",
      "tensor([0.8402, 0.2632])\n",
      "tensor([1.7440, 0.1966])\n",
      "tensor([3.1282, 0.3112])\n",
      "tensor([2.9927, 0.1619])\n",
      "tensor([2.1420, 0.4643])\n",
      "tensor([3.0536, 0.4392])\n",
      "tensor([3.4360, 0.3748])\n",
      "tensor([2.8836, 0.2444])\n",
      "tensor([2.0934, 0.1021])\n",
      "tensor([1.6116, 0.1440])\n",
      "tensor([3.3701, 0.1864])\n",
      "tensor([2.5585, 0.0689])\n",
      "tensor([0.6333, 0.4751])\n",
      "tensor([0.6146, 0.1213])\n",
      "tensor([3.2139, 0.2252])\n",
      "tensor([3.3134, 0.1201])\n",
      "tensor([0.8080, 0.0561])\n",
      "tensor([2.9256, 0.1715])\n",
      "tensor([0.8245, 0.1543])\n",
      "tensor([0.6990, 0.2872])\n",
      "tensor([2.0364, 0.0644])\n",
      "tensor([2.7069, 0.0528])\n",
      "tensor([3.4221, 0.4058])\n",
      "tensor([2.4406, 0.0092])\n",
      "tensor([3.3132, 0.0583])\n",
      "tensor([0.5770, 0.4618])\n",
      "tensor([2.3911, 0.1802])\n",
      "tensor([2.3581, 0.1111])\n",
      "tensor([0.7165, 0.0299])\n",
      "tensor([2.2393, 0.4558])\n",
      "tensor([2.5581, 0.3288])\n",
      "tensor([3.2350, 0.3047])\n",
      "tensor([2.2079, 0.3969])\n",
      "tensor([2.5270, 0.2479])\n",
      "tensor([2.3940, 0.1891])\n",
      "tensor([0.6748, 0.0890])\n",
      "tensor([3.0993, 0.0113])\n",
      "tensor([1.6880, 0.0747])\n",
      "tensor([0.8771, 0.3123])\n",
      "tensor([2.4799, 0.2774])\n",
      "tensor([1.2823, 0.4048])\n",
      "tensor([0.9166, 0.1372])\n",
      "tensor([0.7757, 0.3113])\n",
      "tensor([2.0979, 0.4748])\n",
      "tensor([0.6159, 0.2914])\n",
      "tensor([2.3144, 0.0322])\n",
      "tensor([1.9469, 0.3832])\n",
      "tensor([2.2741, 0.1653])\n",
      "tensor([3.1079, 0.4247])\n",
      "tensor([1.8735, 0.1525])\n",
      "tensor([3.3912, 0.2953])\n",
      "tensor([0.5612, 0.0151])\n",
      "tensor([3.0846, 0.1083])\n",
      "tensor([2.3334, 0.3037])\n",
      "tensor([1.6040, 0.4380])\n",
      "tensor([2.8585, 0.3843])\n",
      "tensor([1.4409, 0.4102])\n",
      "tensor([1.9373, 0.3722])\n",
      "tensor([1.2721, 0.4445])\n",
      "tensor([3.1192, 0.3926])\n",
      "tensor([3.2751, 0.2857])\n",
      "tensor([1.3575, 0.3369])\n",
      "tensor([3.4298, 0.3233])\n",
      "tensor([3.2622, 0.1153])\n",
      "tensor([2.6505, 0.4209])\n",
      "tensor([1.6504, 0.4407])\n",
      "tensor([0.8289, 0.0411])\n",
      "tensor([2.5505, 0.4109])\n",
      "tensor([1.8464, 0.2836])\n",
      "tensor([1.3324, 0.1471])\n",
      "tensor([1.3626, 0.0585])\n",
      "tensor([2.6952, 0.3711])\n",
      "tensor([2.5958, 0.1099])\n",
      "tensor([3.1147, 0.0706])\n",
      "tensor([2.7047, 0.4554])\n",
      "tensor([2.1942, 0.2129])\n",
      "tensor([1.5646, 0.0694])\n",
      "tensor([1.3546, 0.3121])\n",
      "tensor([2.2436, 0.1830])\n",
      "tensor([3.1170, 0.4217])\n",
      "tensor([0.5182, 0.1788])\n",
      "tensor([1.5087, 0.4618])\n",
      "tensor([1.8365, 0.2858])\n",
      "tensor([2.2203, 0.3780])\n",
      "tensor([3.0902, 0.2644])\n",
      "tensor([3.2075, 0.3095])\n",
      "tensor([3.0909, 0.0126])\n",
      "tensor([1.2071, 0.2862])\n",
      "tensor([2.7248, 0.1051])\n",
      "tensor([1.3305, 0.1219])\n",
      "tensor([0.6177, 0.1332])\n",
      "tensor([0.8690, 0.0071])\n",
      "tensor([2.0411, 0.4753])\n",
      "tensor([2.8859, 0.3256])\n",
      "tensor([0.9912, 0.3483])\n",
      "tensor([3.2230, 0.0396])\n",
      "tensor([2.0434e+00, 5.5885e-04])\n",
      "tensor([1.8835, 0.3811])\n",
      "tensor([0.5127, 0.3177])\n",
      "tensor([1.0276, 0.3321])\n",
      "tensor([1.2027, 0.1175])\n",
      "tensor([3.3247, 0.3935])\n",
      "tensor([1.2022, 0.4772])\n",
      "tensor([1.0431, 0.0698])\n",
      "tensor([1.0841, 0.1410])\n",
      "tensor([0.8476, 0.2020])\n",
      "tensor([3.3023, 0.0519])\n",
      "tensor([2.9156, 0.0074])\n",
      "tensor([1.9630, 0.3870])\n",
      "tensor([2.4867, 0.1196])\n",
      "tensor([1.1039, 0.4727])\n",
      "tensor([1.3669, 0.3959])\n",
      "tensor([1.1812, 0.1722])\n",
      "tensor([2.9425, 0.4343])\n",
      "tensor([0.5895, 0.1235])\n",
      "tensor([2.0452, 0.4898])\n",
      "tensor([3.1385, 0.2088])\n",
      "tensor([1.6436, 0.2728])\n",
      "tensor([1.8227, 0.3630])\n",
      "tensor([0.5014, 0.4472])\n",
      "tensor([1.4200, 0.1008])\n",
      "tensor([1.5926, 0.2480])\n",
      "tensor([0.6524, 0.4503])\n",
      "tensor([1.6529, 0.0268])\n",
      "tensor([3.1873, 0.4698])\n",
      "tensor([2.5567, 0.1224])\n",
      "tensor([0.7772, 0.0742])\n",
      "tensor([2.1273, 0.4955])\n",
      "tensor([2.2764, 0.4485])\n",
      "tensor([2.7589, 0.0901])\n",
      "tensor([1.4330, 0.4473])\n",
      "tensor([2.3965, 0.2017])\n",
      "tensor([1.6315, 0.3142])\n",
      "tensor([2.8410, 0.0930])\n",
      "tensor([2.9337, 0.4132])\n",
      "tensor([3.0469, 0.3479])\n",
      "tensor([2.6443, 0.0780])\n",
      "tensor([3.0020, 0.4368])\n",
      "tensor([2.8715, 0.2502])\n",
      "tensor([2.9370, 0.2822])\n",
      "tensor([2.5665, 0.4582])\n",
      "tensor([1.1265, 0.0981])\n",
      "tensor([1.2757, 0.4430])\n",
      "tensor([1.1294, 0.2005])\n",
      "tensor([2.9971, 0.1383])\n",
      "tensor([0.6520, 0.3243])\n",
      "tensor([0.8180, 0.1078])\n",
      "tensor([2.2096, 0.4326])\n",
      "tensor([2.8615, 0.0464])\n",
      "tensor([1.4525, 0.0786])\n",
      "tensor([3.1081, 0.0733])\n",
      "tensor([0.8875, 0.2996])\n",
      "tensor([2.0849, 0.1337])\n",
      "tensor([2.7054, 0.4583])\n",
      "tensor([1.1090, 0.3179])\n",
      "tensor([2.7413, 0.3732])\n",
      "tensor([1.0460, 0.0046])\n",
      "tensor([1.9446, 0.4461])\n",
      "tensor([3.4504, 0.1499])\n",
      "tensor([1.3800, 0.1515])\n",
      "tensor([0.6920, 0.0615])\n",
      "tensor([2.7243, 0.0088])\n",
      "tensor([1.8568, 0.1835])\n",
      "tensor([2.8474, 0.0496])\n",
      "tensor([1.8385, 0.2390])\n",
      "tensor([2.2096, 0.4009])\n",
      "tensor([1.6231, 0.2922])\n",
      "tensor([2.1948, 0.3297])\n",
      "tensor([1.2885, 0.2686])\n",
      "tensor([1.1511, 0.3097])\n",
      "tensor([1.1508, 0.3035])\n",
      "tensor([1.8666, 0.0683])\n",
      "tensor([2.6824, 0.1154])\n",
      "tensor([3.1621, 0.2857])\n",
      "tensor([2.0967, 0.2690])\n",
      "tensor([1.5219, 0.4376])\n",
      "tensor([2.8925, 0.2242])\n",
      "tensor([0.7449, 0.1494])\n",
      "tensor([3.3637, 0.4987])\n",
      "tensor([3.4418, 0.3499])\n",
      "tensor([1.2400, 0.3470])\n",
      "tensor([1.9297, 0.2768])\n",
      "tensor([2.7503, 0.4141])\n",
      "tensor([0.8790, 0.1287])\n",
      "tensor([1.2736, 0.0405])\n",
      "tensor([2.1932, 0.2860])\n",
      "tensor([0.5693, 0.3859])\n",
      "tensor([3.0893, 0.3618])\n",
      "tensor([1.1490, 0.3924])\n",
      "tensor([3.3694, 0.2348])\n",
      "tensor([2.8769, 0.4380])\n",
      "tensor([2.8144, 0.1157])\n",
      "tensor([2.4520, 0.4880])\n",
      "tensor([0.8154, 0.2793])\n",
      "tensor([1.6220, 0.2339])\n",
      "tensor([2.0657, 0.1659])\n",
      "tensor([3.4368, 0.2731])\n",
      "tensor([1.0596, 0.2776])\n",
      "tensor([1.8611, 0.0231])\n",
      "tensor([3.2432, 0.1962])\n",
      "tensor([3.3834, 0.1304])\n",
      "tensor([1.7606, 0.3986])\n",
      "tensor([0.7522, 0.4647])\n",
      "tensor([1.1899, 0.4601])\n",
      "tensor([1.5842, 0.1841])\n",
      "tensor([2.9971, 0.3223])\n",
      "tensor([2.0166, 0.0208])\n",
      "tensor([1.9734e+00, 6.2886e-04])\n",
      "tensor([3.3234, 0.0931])\n",
      "tensor([0.9813, 0.0559])\n",
      "tensor([0.9833, 0.3556])\n",
      "tensor([3.3630, 0.3042])\n",
      "tensor([3.0517, 0.4681])\n",
      "tensor([3.1146, 0.1948])\n",
      "tensor([3.2811, 0.2046])\n",
      "tensor([2.0159, 0.0768])\n",
      "tensor([1.6827, 0.2065])\n",
      "tensor([2.9394, 0.0788])\n",
      "tensor([2.0434, 0.0718])\n",
      "tensor([0.5112, 0.0055])\n",
      "tensor([2.1732, 0.1201])\n",
      "tensor([2.9374, 0.0756])\n",
      "tensor([1.7752, 0.4173])\n",
      "tensor([3.1469, 0.4136])\n",
      "tensor([3.3063, 0.1953])\n",
      "tensor([0.5488, 0.3502])\n",
      "tensor([1.3200, 0.4847])\n",
      "tensor([1.7779, 0.3771])\n",
      "tensor([1.4730, 0.2414])\n",
      "tensor([1.1181, 0.2258])\n",
      "tensor([2.8889, 0.1035])\n",
      "tensor([2.5485, 0.3987])\n",
      "tensor([2.4482, 0.1157])\n",
      "tensor([2.4887, 0.2052])\n",
      "tensor([3.3662, 0.2956])\n",
      "tensor([2.0422, 0.3965])\n",
      "tensor([2.8535, 0.3948])\n",
      "tensor([1.0545, 0.4630])\n",
      "tensor([1.4682, 0.4784])\n",
      "tensor([0.5904, 0.4962])\n",
      "tensor([1.7833, 0.0528])\n",
      "tensor([2.8559, 0.3715])\n",
      "tensor([2.7408, 0.4077])\n",
      "tensor([2.8362, 0.2420])\n",
      "tensor([2.2045, 0.4296])\n",
      "tensor([0.7129, 0.2183])\n",
      "tensor([1.4605, 0.1928])\n",
      "tensor([0.9053, 0.0654])\n",
      "tensor([3.3106, 0.3854])\n",
      "tensor([3.0821, 0.3392])\n",
      "tensor([2.8668, 0.1689])\n",
      "tensor([3.4311, 0.3077])\n",
      "tensor([1.3972, 0.0949])\n",
      "tensor([2.3173, 0.0784])\n",
      "tensor([1.8000, 0.3667])\n",
      "tensor([0.6514, 0.1841])\n",
      "tensor([2.3468, 0.0779])\n",
      "tensor([1.9721, 0.2796])\n",
      "tensor([2.9471, 0.4898])\n",
      "tensor([1.3852, 0.0966])\n",
      "tensor([2.0117, 0.0607])\n",
      "tensor([2.4757, 0.3848])\n",
      "tensor([2.7132, 0.0722])\n",
      "tensor([0.5674, 0.3376])\n",
      "tensor([1.7875, 0.0066])\n",
      "tensor([1.8838, 0.0492])\n",
      "tensor([2.9435, 0.1962])\n",
      "tensor([3.4081, 0.4063])\n",
      "tensor([3.1791, 0.3377])\n",
      "tensor([0.6380, 0.1810])\n",
      "tensor([2.9761, 0.1924])\n",
      "tensor([2.5457, 0.1601])\n",
      "tensor([2.9835, 0.0264])\n",
      "tensor([2.1080, 0.2605])\n",
      "tensor([3.4935, 0.2775])\n",
      "tensor([3.3966, 0.2863])\n",
      "tensor([1.5720, 0.2512])\n",
      "tensor([3.0658, 0.4119])\n",
      "tensor([2.9630, 0.2111])\n",
      "tensor([0.6324, 0.0090])\n",
      "tensor([2.5923, 0.1751])\n",
      "tensor([1.1586, 0.0406])\n",
      "tensor([1.5796, 0.2676])\n",
      "tensor([1.8331, 0.0537])\n",
      "tensor([3.4319, 0.0995])\n",
      "tensor([0.7501, 0.3592])\n",
      "tensor([2.9322, 0.3436])\n",
      "tensor([2.5337, 0.1516])\n",
      "tensor([3.2321, 0.0958])\n",
      "tensor([2.9580, 0.1219])\n",
      "tensor([2.2216, 0.3678])\n",
      "tensor([2.8236, 0.0536])\n",
      "tensor([3.1072, 0.1954])\n",
      "tensor([0.9597, 0.4762])\n",
      "tensor([3.2128, 0.3897])\n",
      "tensor([2.4724, 0.1862])\n",
      "tensor([3.1000, 0.0557])\n",
      "tensor([2.2224, 0.1837])\n",
      "tensor([1.9224, 0.1353])\n",
      "tensor([1.7271, 0.1003])\n",
      "tensor([1.4788, 0.3057])\n",
      "tensor([2.4207, 0.1311])\n",
      "tensor([3.1546, 0.4465])\n",
      "tensor([1.5508, 0.1374])\n",
      "tensor([2.4296, 0.2312])\n",
      "tensor([2.0622, 0.3642])\n",
      "tensor([1.4950, 0.1802])\n",
      "tensor([1.6753, 0.3158])\n",
      "tensor([3.3254, 0.4878])\n",
      "tensor([3.3736, 0.3821])\n",
      "tensor([1.1692, 0.0292])\n",
      "tensor([0.5440, 0.0223])\n",
      "tensor([3.1192, 0.4490])\n",
      "tensor([1.2347, 0.3678])\n",
      "tensor([3.3042, 0.1182])\n",
      "tensor([1.1782, 0.0115])\n",
      "tensor([1.2156, 0.3737])\n",
      "tensor([1.1988, 0.4399])\n",
      "tensor([0.6552, 0.3223])\n",
      "tensor([1.2764, 0.2193])\n",
      "tensor([2.1340, 0.0217])\n",
      "tensor([0.9161, 0.3196])\n",
      "tensor([2.3539, 0.3298])\n",
      "tensor([1.3725, 0.1674])\n",
      "tensor([2.0914, 0.1144])\n",
      "tensor([2.9291, 0.4611])\n",
      "tensor([1.8113, 0.1063])\n",
      "tensor([1.6518, 0.3492])\n",
      "tensor([1.3282, 0.4578])\n",
      "tensor([1.4152, 0.4964])\n",
      "tensor([0.7071, 0.3637])\n",
      "tensor([1.4273, 0.1446])\n",
      "tensor([0.7501, 0.1883])\n",
      "tensor([2.2198, 0.3833])\n",
      "tensor([0.5325, 0.0798])\n",
      "tensor([2.1137, 0.1549])\n",
      "tensor([2.1634, 0.4634])\n",
      "tensor([2.8173, 0.2255])\n",
      "tensor([1.5794, 0.1039])\n",
      "tensor([1.1935, 0.3007])\n",
      "tensor([1.3106, 0.2730])\n",
      "tensor([2.3538, 0.2493])\n",
      "tensor([3.2943, 0.1700])\n",
      "tensor([1.9278, 0.2050])\n",
      "tensor([2.2208, 0.3319])\n",
      "tensor([3.3510, 0.1146])\n",
      "tensor([1.0943, 0.0658])\n",
      "tensor([2.6254, 0.2115])\n",
      "tensor([1.9866, 0.4916])\n",
      "tensor([0.8285, 0.2601])\n",
      "tensor([0.7071, 0.4845])\n",
      "tensor([1.1693, 0.4413])\n",
      "tensor([3.4955, 0.1076])\n",
      "tensor([1.5529, 0.4625])\n",
      "tensor([0.7853, 0.2067])\n",
      "tensor([0.6492, 0.0882])\n",
      "tensor([0.7117, 0.1622])\n",
      "tensor([1.5215, 0.2646])\n",
      "tensor([0.6328, 0.0899])\n",
      "tensor([3.3799, 0.0080])\n",
      "tensor([1.9674, 0.3451])\n",
      "tensor([1.3466, 0.0715])\n",
      "tensor([2.9757, 0.4083])\n",
      "tensor([2.7792, 0.2702])\n",
      "tensor([2.2245, 0.2086])\n",
      "tensor([2.2357, 0.0660])\n",
      "tensor([3.0057, 0.4896])\n",
      "tensor([1.0010, 0.1763])\n",
      "tensor([2.4734, 0.1388])\n",
      "tensor([3.4332, 0.4579])\n",
      "tensor([2.8681, 0.0398])\n",
      "tensor([3.1539, 0.4630])\n",
      "tensor([3.1275, 0.2506])\n",
      "tensor([1.8765, 0.2640])\n",
      "tensor([3.1623, 0.0133])\n",
      "tensor([3.3576, 0.2208])\n",
      "tensor([1.9346, 0.1015])\n",
      "tensor([3.4732, 0.0286])\n",
      "tensor([2.3322, 0.4598])\n",
      "tensor([3.4021, 0.0818])\n",
      "tensor([2.9093, 0.4344])\n",
      "tensor([1.5686, 0.3173])\n",
      "tensor([2.5117, 0.4849])\n",
      "tensor([3.3662, 0.1218])\n",
      "tensor([1.5419, 0.4437])\n",
      "tensor([0.5943, 0.1369])\n",
      "tensor([3.2185, 0.1494])\n",
      "tensor([1.0504, 0.4209])\n",
      "tensor([0.8837, 0.2135])\n",
      "tensor([2.7838, 0.0810])\n",
      "tensor([1.2808, 0.0398])\n",
      "tensor([1.6644, 0.4088])\n",
      "tensor([0.8053, 0.4841])\n",
      "tensor([3.2405, 0.2147])\n",
      "tensor([2.5448, 0.2658])\n",
      "tensor([3.2171, 0.3683])\n",
      "tensor([0.8452, 0.2872])\n",
      "tensor([2.9865, 0.4214])\n",
      "tensor([2.2012e+00, 6.1238e-04])\n",
      "tensor([1.7269, 0.4122])\n",
      "tensor([2.0437, 0.0456])\n",
      "tensor([1.0024, 0.3829])\n",
      "tensor([0.8333, 0.1115])\n",
      "tensor([0.8823, 0.0676])\n",
      "tensor([2.0725, 0.3840])\n",
      "tensor([1.5083, 0.2959])\n",
      "tensor([1.7786, 0.4426])\n",
      "tensor([2.9096, 0.0973])\n",
      "tensor([1.9090, 0.1396])\n",
      "tensor([1.7057, 0.4895])\n",
      "tensor([2.1052, 0.1630])\n",
      "tensor([1.3720, 0.1300])\n",
      "tensor([1.2136, 0.2388])\n",
      "tensor([2.0076, 0.3883])\n",
      "tensor([2.3070, 0.2978])\n",
      "tensor([0.7361, 0.2041])\n",
      "tensor([0.7132, 0.4430])\n",
      "tensor([1.7066, 0.0472])\n",
      "tensor([1.7789, 0.2487])\n",
      "tensor([1.7343, 0.2569])\n",
      "tensor([1.0669, 0.2433])\n",
      "tensor([2.1349, 0.3371])\n",
      "tensor([1.3012, 0.3799])\n",
      "tensor([1.4393, 0.2008])\n",
      "tensor([3.3747, 0.0633])\n",
      "tensor([1.8995, 0.4223])\n",
      "tensor([3.3683, 0.0943])\n",
      "tensor([0.6439, 0.4475])\n",
      "tensor([0.6333, 0.4639])\n",
      "tensor([0.5057, 0.1494])\n",
      "tensor([0.9495, 0.3324])\n",
      "tensor([3.2810, 0.1956])\n",
      "tensor([2.8606, 0.0376])\n",
      "tensor([2.1133, 0.0992])\n",
      "tensor([1.8314, 0.2716])\n",
      "tensor([1.4661, 0.0416])\n",
      "tensor([3.0923, 0.3805])\n",
      "tensor([3.3368, 0.1809])\n",
      "tensor([2.1900, 0.1257])\n",
      "tensor([2.5872, 0.0256])\n",
      "tensor([2.9592, 0.1872])\n",
      "tensor([1.4988, 0.1102])\n",
      "tensor([0.7469, 0.3133])\n",
      "tensor([1.1046, 0.1880])\n",
      "tensor([3.3511, 0.4483])\n",
      "tensor([2.2738, 0.1158])\n",
      "tensor([2.4982, 0.1510])\n",
      "tensor([2.5351, 0.3663])\n",
      "tensor([2.8077, 0.3129])\n",
      "tensor([3.4904, 0.1586])\n",
      "tensor([3.0220, 0.0539])\n",
      "tensor([2.5165, 0.1041])\n",
      "tensor([2.1586, 0.4724])\n",
      "tensor([3.4005, 0.4421])\n",
      "tensor([3.2454, 0.3144])\n",
      "tensor([0.8039, 0.0834])\n",
      "tensor([3.3424, 0.0243])\n",
      "tensor([1.9958e+00, 8.8412e-04])\n",
      "tensor([3.3366, 0.0695])\n",
      "tensor([0.6169, 0.4498])\n",
      "tensor([2.7135, 0.0082])\n",
      "tensor([1.1032, 0.2063])\n",
      "tensor([0.9264, 0.3221])\n",
      "tensor([1.4460, 0.4455])\n",
      "tensor([2.5845, 0.4147])\n",
      "tensor([2.5082, 0.0136])\n",
      "tensor([0.9832, 0.3274])\n",
      "tensor([1.6260, 0.3919])\n",
      "tensor([1.0193, 0.4487])\n",
      "tensor([0.6574, 0.0615])\n",
      "tensor([0.8415, 0.1959])\n",
      "tensor([2.5738, 0.1809])\n",
      "tensor([2.9603, 0.2485])\n",
      "tensor([1.7939, 0.3026])\n",
      "tensor([1.2210, 0.0256])\n",
      "tensor([0.6619, 0.2857])\n",
      "tensor([2.2634, 0.2963])\n",
      "tensor([3.1612, 0.1684])\n",
      "tensor([3.4334, 0.0317])\n",
      "tensor([1.3146, 0.3762])\n",
      "tensor([0.5812, 0.3166])\n",
      "tensor([3.4543, 0.3873])\n",
      "tensor([2.7363, 0.3995])\n",
      "tensor([1.6450, 0.0674])\n",
      "tensor([2.5394, 0.1750])\n",
      "tensor([1.1084, 0.1025])\n",
      "tensor([1.6968, 0.3174])\n",
      "tensor([0.7400, 0.1794])\n",
      "tensor([1.1444, 0.2539])\n",
      "tensor([1.2975, 0.3428])\n",
      "tensor([3.1423, 0.4641])\n",
      "tensor([0.8908, 0.4206])\n",
      "tensor([2.7031, 0.2608])\n",
      "tensor([1.6346, 0.2880])\n",
      "tensor([1.1320, 0.2528])\n",
      "tensor([2.0777, 0.3267])\n",
      "tensor([2.2894, 0.2496])\n",
      "tensor([2.5055, 0.1196])\n",
      "tensor([3.4291, 0.3974])\n",
      "tensor([3.1414, 0.0754])\n",
      "tensor([1.0585, 0.1461])\n",
      "tensor([3.3075, 0.2565])\n",
      "tensor([1.9568, 0.2202])\n",
      "tensor([2.0978, 0.4463])\n",
      "tensor([1.4793, 0.0935])\n",
      "tensor([2.8183, 0.3618])\n",
      "tensor([3.4753, 0.2000])\n",
      "tensor([1.0983, 0.1525])\n",
      "tensor([1.4033, 0.3005])\n",
      "tensor([1.0371, 0.4060])\n",
      "tensor([0.8341, 0.1245])\n",
      "tensor([0.5265, 0.2009])\n",
      "tensor([1.6692, 0.3033])\n",
      "tensor([0.9851, 0.0948])\n",
      "tensor([2.4977, 0.0654])\n",
      "tensor([2.5559, 0.1023])\n",
      "tensor([2.6402, 0.3151])\n",
      "tensor([1.7266, 0.1370])\n",
      "tensor([0.6918, 0.3662])\n",
      "tensor([2.4535, 0.3165])\n",
      "tensor([2.8527, 0.2066])\n",
      "tensor([0.5213, 0.0895])\n",
      "tensor([2.8252, 0.2119])\n",
      "tensor([3.1630, 0.0733])\n",
      "tensor([3.1579, 0.4861])\n",
      "tensor([1.5506, 0.0717])\n",
      "tensor([2.0826, 0.0169])\n",
      "tensor([1.9148, 0.4450])\n",
      "tensor([2.0844, 0.3231])\n",
      "tensor([2.6994, 0.4170])\n",
      "tensor([1.3852, 0.2264])\n",
      "tensor([0.5055, 0.4447])\n",
      "tensor([1.4174, 0.0305])\n",
      "tensor([1.7169, 0.2618])\n",
      "tensor([2.5655, 0.4267])\n",
      "tensor([3.3793, 0.1371])\n",
      "tensor([0.6744, 0.0762])\n",
      "tensor([3.3132, 0.4246])\n",
      "tensor([1.5696, 0.0287])\n",
      "tensor([0.6783, 0.1135])\n",
      "tensor([2.6622, 0.4425])\n",
      "tensor([3.3017, 0.4883])\n",
      "tensor([1.6745, 0.2560])\n",
      "tensor([1.2317, 0.1172])\n",
      "tensor([0.9737, 0.2356])\n",
      "tensor([0.7046, 0.4579])\n",
      "tensor([2.2181, 0.3231])\n",
      "tensor([1.4134, 0.1657])\n",
      "tensor([0.8684, 0.1561])\n",
      "tensor([2.7888, 0.1600])\n",
      "tensor([3.2035, 0.1186])\n",
      "tensor([2.3400, 0.2991])\n",
      "tensor([0.6661, 0.1961])\n",
      "tensor([1.4359, 0.0410])\n",
      "tensor([2.2605, 0.4071])\n",
      "tensor([2.4484, 0.0091])\n",
      "tensor([1.5438, 0.1148])\n",
      "tensor([0.8711, 0.3425])\n",
      "tensor([1.8259, 0.1118])\n",
      "tensor([2.0724, 0.0217])\n",
      "tensor([2.0424, 0.0101])\n",
      "tensor([1.3320, 0.3504])\n",
      "tensor([1.1730, 0.0674])\n",
      "tensor([2.4873, 0.1757])\n",
      "tensor([3.2329, 0.4023])\n",
      "tensor([2.8958, 0.1792])\n",
      "tensor([2.7108, 0.4670])\n",
      "tensor([1.3001, 0.0173])\n",
      "tensor([1.8443, 0.3930])\n",
      "tensor([2.8879, 0.1197])\n",
      "tensor([1.6435, 0.0385])\n",
      "tensor([3.2745, 0.2966])\n",
      "tensor([2.8001, 0.3477])\n",
      "tensor([2.2126, 0.4843])\n",
      "tensor([0.6344, 0.2111])\n",
      "tensor([3.1175, 0.2413])\n",
      "tensor([1.5447, 0.0992])\n",
      "tensor([2.2315, 0.0897])\n",
      "tensor([1.2758, 0.4642])\n",
      "tensor([2.7604, 0.1097])\n",
      "tensor([3.3649, 0.1004])\n",
      "tensor([2.2216, 0.2127])\n",
      "tensor([3.1593, 0.0832])\n",
      "tensor([3.2851, 0.2980])\n",
      "tensor([3.3379, 0.4146])\n",
      "tensor([2.4954, 0.1172])\n",
      "tensor([2.9985, 0.4561])\n",
      "tensor([1.1735, 0.1445])\n",
      "tensor([1.8099, 0.2666])\n",
      "tensor([2.2753, 0.0275])\n",
      "tensor([1.2624, 0.0642])\n",
      "tensor([1.7879, 0.1669])\n",
      "tensor([2.3405, 0.4128])\n",
      "tensor([1.7578, 0.4581])\n",
      "tensor([2.3652, 0.3896])\n",
      "tensor([2.0921, 0.4421])\n",
      "tensor([0.7755, 0.0106])\n",
      "tensor([2.9050, 0.0996])\n",
      "tensor([1.2095, 0.0935])\n",
      "tensor([2.8741, 0.3149])\n",
      "tensor([2.1821, 0.2683])\n",
      "tensor([0.6943, 0.3994])\n",
      "tensor([1.1488, 0.0812])\n",
      "tensor([0.9543, 0.0366])\n",
      "tensor([2.1267, 0.2337])\n",
      "tensor([1.1180, 0.1947])\n",
      "tensor([1.8971, 0.2532])\n",
      "tensor([1.2124, 0.0913])\n",
      "tensor([2.8995, 0.1044])\n",
      "tensor([2.5246, 0.3310])\n",
      "tensor([2.4939, 0.1768])\n",
      "tensor([1.6775, 0.1124])\n",
      "tensor([2.0485, 0.3391])\n",
      "tensor([3.3111, 0.3657])\n",
      "tensor([1.6829, 0.1403])\n",
      "tensor([0.9706, 0.4293])\n",
      "tensor([3.4419, 0.0924])\n",
      "tensor([0.5507, 0.1751])\n",
      "tensor([2.3392, 0.1317])\n",
      "tensor([2.1130, 0.0274])\n",
      "tensor([2.9233, 0.0674])\n",
      "tensor([0.9039, 0.3134])\n",
      "tensor([2.1373, 0.3797])\n",
      "tensor([0.8541, 0.3669])\n",
      "tensor([1.0294, 0.0111])\n",
      "tensor([2.0532, 0.1389])\n",
      "tensor([2.5480, 0.1638])\n",
      "tensor([2.1028, 0.1413])\n",
      "tensor([0.6385, 0.2976])\n",
      "tensor([0.5509, 0.1720])\n",
      "tensor([2.6980, 0.1690])\n",
      "tensor([2.4096, 0.3242])\n",
      "tensor([3.2284, 0.2180])\n",
      "tensor([0.5759, 0.2573])\n",
      "tensor([2.0095, 0.2078])\n",
      "tensor([2.0982, 0.2458])\n",
      "tensor([2.2650, 0.4742])\n",
      "tensor([1.1673, 0.2689])\n",
      "tensor([1.5638, 0.2771])\n",
      "tensor([1.7889, 0.1911])\n",
      "tensor([0.7522, 0.0632])\n",
      "tensor([2.4499, 0.4336])\n",
      "tensor([2.5638, 0.0533])\n",
      "tensor([2.8596, 0.2152])\n",
      "tensor([0.7055, 0.2274])\n",
      "tensor([1.3942, 0.3363])\n",
      "tensor([0.6263, 0.1168])\n",
      "tensor([2.1626, 0.2955])\n",
      "tensor([2.4107, 0.1198])\n",
      "tensor([3.0745, 0.2159])\n",
      "tensor([1.4262, 0.1226])\n",
      "tensor([3.3148, 0.2961])\n",
      "tensor([1.9265, 0.3928])\n",
      "tensor([0.5628, 0.2360])\n",
      "tensor([1.6084, 0.4436])\n",
      "tensor([3.4672, 0.0392])\n",
      "tensor([1.4046, 0.1706])\n",
      "tensor([1.3876, 0.3490])\n",
      "tensor([1.2801, 0.3938])\n",
      "tensor([0.5183, 0.2888])\n",
      "tensor([1.7077, 0.3774])\n",
      "tensor([1.2913, 0.2322])\n",
      "tensor([1.9805, 0.3441])\n",
      "tensor([0.8362, 0.0649])\n",
      "tensor([0.9322, 0.4535])\n",
      "tensor([2.6686, 0.0832])\n",
      "tensor([1.2227, 0.3074])\n",
      "tensor([2.7836, 0.0428])\n",
      "tensor([3.1623, 0.4255])\n",
      "tensor([2.4659, 0.0538])\n",
      "tensor([1.1564, 0.0293])\n",
      "tensor([0.7140, 0.3322])\n",
      "tensor([2.6960, 0.2854])\n",
      "tensor([1.3155, 0.1874])\n",
      "tensor([2.4232, 0.0152])\n",
      "tensor([1.3175, 0.0999])\n",
      "tensor([1.8285, 0.2087])\n",
      "tensor([1.6341, 0.0403])\n",
      "tensor([3.2900, 0.1338])\n",
      "tensor([1.3212, 0.3436])\n",
      "tensor([2.6310, 0.2264])\n",
      "tensor([0.6733, 0.4629])\n",
      "tensor([0.8540, 0.2675])\n",
      "tensor([1.3145, 0.0145])\n",
      "tensor([1.8876, 0.0509])\n",
      "tensor([1.2372, 0.2821])\n",
      "tensor([1.3870, 0.0024])\n",
      "tensor([3.4609, 0.1953])\n",
      "tensor([3.1113, 0.4733])\n",
      "tensor([1.3561, 0.1714])\n",
      "tensor([1.1390, 0.0016])\n",
      "tensor([3.1660, 0.2227])\n",
      "tensor([1.0001, 0.3669])\n",
      "tensor([2.0074, 0.0113])\n",
      "tensor([0.9470, 0.4522])\n",
      "tensor([3.4345, 0.1109])\n",
      "tensor([2.0691, 0.1012])\n",
      "tensor([1.4048, 0.3840])\n",
      "tensor([0.7923, 0.4401])\n",
      "tensor([1.0954, 0.4808])\n",
      "tensor([1.2309, 0.0247])\n",
      "tensor([0.9238, 0.2972])\n",
      "tensor([2.0539, 0.2198])\n",
      "tensor([2.5985, 0.0566])\n",
      "tensor([2.5581, 0.1585])\n",
      "tensor([0.5475, 0.0074])\n",
      "tensor([2.9231, 0.0707])\n",
      "tensor([3.0544, 0.3891])\n",
      "tensor([1.4028, 0.1926])\n",
      "tensor([1.3329, 0.4587])\n",
      "tensor([0.9498, 0.1320])\n",
      "tensor([2.0903, 0.0668])\n",
      "tensor([3.2475, 0.0072])\n",
      "tensor([1.6746, 0.1386])\n",
      "tensor([2.2433, 0.1174])\n",
      "tensor([1.6515, 0.3169])\n",
      "tensor([2.1638, 0.0070])\n",
      "tensor([0.6812, 0.3831])\n",
      "tensor([1.5802, 0.2495])\n",
      "tensor([0.6479, 0.1405])\n",
      "tensor([1.1132, 0.2568])\n",
      "tensor([0.9381, 0.1083])\n",
      "tensor([2.5301, 0.4979])\n",
      "tensor([0.8983, 0.1903])\n",
      "tensor([0.5960, 0.2805])\n",
      "tensor([2.9815, 0.3368])\n",
      "tensor([2.6304, 0.2196])\n",
      "tensor([1.0197, 0.3816])\n",
      "tensor([0.5851, 0.4511])\n",
      "tensor([3.3944, 0.4777])\n",
      "tensor([1.1825, 0.4800])\n",
      "tensor([1.4829, 0.2440])\n",
      "tensor([1.3592, 0.1355])\n",
      "tensor([3.4976, 0.2096])\n",
      "tensor([3.4513, 0.3915])\n",
      "tensor([1.0118, 0.3870])\n",
      "tensor([0.7035, 0.1067])\n",
      "tensor([2.1547, 0.1306])\n",
      "tensor([1.5919, 0.2427])\n",
      "tensor([0.8334, 0.4332])\n",
      "tensor([0.6481, 0.2684])\n",
      "tensor([3.3268, 0.1854])\n",
      "tensor([1.6674, 0.0066])\n",
      "tensor([0.5799, 0.2657])\n",
      "tensor([1.8241, 0.1648])\n",
      "tensor([0.9800, 0.3272])\n",
      "tensor([1.8435, 0.2765])\n",
      "tensor([1.1541, 0.1510])\n",
      "tensor([1.1070, 0.2922])\n",
      "tensor([3.2342, 0.3727])\n",
      "tensor([0.9595, 0.3952])\n",
      "tensor([2.7040, 0.1709])\n",
      "tensor([2.8521, 0.2569])\n",
      "tensor([3.4881, 0.4505])\n",
      "tensor([1.9755, 0.0138])\n",
      "tensor([0.6127, 0.1711])\n",
      "tensor([0.8026, 0.4848])\n",
      "tensor([1.8843, 0.2446])\n",
      "tensor([0.5656, 0.2690])\n",
      "tensor([0.9988, 0.1367])\n",
      "tensor([2.0950, 0.4137])\n",
      "tensor([1.7638, 0.1673])\n",
      "tensor([2.0321, 0.4972])\n",
      "tensor([2.9774, 0.2119])\n",
      "tensor([0.8859, 0.0769])\n",
      "tensor([1.2408, 0.3792])\n",
      "tensor([0.9851, 0.4747])\n",
      "tensor([1.5739, 0.1693])\n",
      "tensor([2.8054, 0.4916])\n",
      "tensor([1.2981, 0.3114])\n",
      "tensor([1.9747, 0.3062])\n",
      "tensor([1.8751, 0.1792])\n",
      "tensor([1.6073, 0.0837])\n",
      "tensor([2.4236, 0.2987])\n",
      "tensor([0.7675, 0.1667])\n",
      "tensor([2.9355, 0.2416])\n",
      "tensor([2.9478, 0.1426])\n",
      "tensor([1.2645, 0.4626])\n",
      "tensor([3.2116, 0.3315])\n",
      "tensor([1.3068, 0.3391])\n",
      "tensor([3.2885, 0.0064])\n",
      "tensor([1.3967, 0.2421])\n",
      "tensor([3.1839, 0.3927])\n",
      "tensor([1.9942, 0.4799])\n",
      "tensor([3.1831, 0.3285])\n",
      "tensor([2.1071, 0.4620])\n",
      "tensor([1.7521, 0.3006])\n",
      "tensor([0.5057, 0.3435])\n",
      "tensor([0.5336, 0.2572])\n",
      "tensor([0.9543, 0.3987])\n",
      "tensor([1.9759, 0.1878])\n",
      "tensor([0.9865, 0.3786])\n",
      "tensor([3.2249, 0.2363])\n",
      "tensor([2.5974, 0.0140])\n",
      "tensor([0.6300, 0.2690])\n",
      "tensor([2.2385, 0.2786])\n",
      "tensor([2.4782, 0.4583])\n",
      "tensor([2.7435, 0.0384])\n",
      "tensor([2.4570, 0.2674])\n",
      "tensor([1.2937, 0.4068])\n",
      "tensor([2.6356, 0.3127])\n",
      "tensor([1.4527, 0.4895])\n",
      "tensor([3.0226, 0.4273])\n",
      "tensor([1.1534, 0.0356])\n",
      "tensor([1.5933, 0.2971])\n",
      "tensor([0.8511, 0.2649])\n",
      "tensor([2.5669, 0.0515])\n",
      "tensor([2.8178, 0.4644])\n",
      "tensor([0.7841, 0.3604])\n",
      "tensor([2.5804, 0.0903])\n",
      "tensor([2.9362, 0.4378])\n",
      "tensor([1.8932, 0.2479])\n",
      "tensor([2.7257, 0.1641])\n",
      "tensor([1.7212, 0.0183])\n",
      "tensor([1.0312, 0.2430])\n",
      "tensor([2.1471, 0.3945])\n",
      "tensor([1.1165, 0.1675])\n",
      "tensor([1.2840, 0.3567])\n",
      "tensor([2.9982, 0.2926])\n",
      "tensor([2.7278, 0.2213])\n",
      "tensor([3.4155, 0.3475])\n",
      "tensor([0.7514, 0.2715])\n",
      "tensor([2.3689, 0.0756])\n",
      "tensor([0.5160, 0.4544])\n",
      "tensor([1.2292, 0.2342])\n",
      "tensor([1.7995, 0.4367])\n",
      "tensor([2.7074, 0.1948])\n",
      "tensor([2.5766, 0.0608])\n",
      "tensor([2.5038, 0.3865])\n",
      "tensor([2.4449, 0.4396])\n",
      "tensor([2.9693, 0.4273])\n",
      "tensor([0.7373, 0.4033])\n",
      "tensor([1.1105, 0.1740])\n",
      "tensor([1.0303, 0.2114])\n",
      "tensor([2.9917, 0.0396])\n",
      "tensor([2.3267, 0.3874])\n",
      "tensor([2.7093, 0.2322])\n",
      "tensor([1.3935, 0.3957])\n",
      "tensor([3.1303, 0.4545])\n",
      "tensor([0.7726, 0.0226])\n",
      "tensor([1.6430, 0.0971])\n",
      "tensor([1.6434, 0.1717])\n",
      "tensor([1.3588, 0.3015])\n",
      "tensor([2.7373, 0.1196])\n",
      "tensor([1.5528, 0.1353])\n",
      "tensor([1.5288, 0.2953])\n",
      "tensor([2.8384, 0.4577])\n",
      "tensor([3.4569, 0.3874])\n",
      "tensor([1.5486, 0.0082])\n",
      "tensor([1.5589, 0.0948])\n",
      "tensor([1.2841, 0.2465])\n",
      "tensor([1.1044, 0.1126])\n",
      "tensor([0.7823, 0.1667])\n",
      "tensor([1.0805, 0.2023])\n",
      "tensor([1.8728, 0.4909])\n",
      "tensor([1.6392, 0.1786])\n",
      "tensor([0.7222, 0.1611])\n",
      "tensor([1.9553, 0.0127])\n",
      "tensor([1.8252, 0.0713])\n",
      "tensor([2.1651, 0.4666])\n",
      "tensor([0.9873, 0.0530])\n",
      "tensor([2.9278, 0.1731])\n",
      "tensor([2.1834, 0.1404])\n",
      "tensor([0.7433, 0.2435])\n",
      "tensor([2.2677, 0.0189])\n",
      "tensor([1.9603, 0.2412])\n",
      "tensor([1.4958, 0.3456])\n",
      "tensor([1.4018, 0.0697])\n",
      "tensor([2.3431, 0.4437])\n",
      "tensor([3.3473, 0.2477])\n",
      "tensor([2.8676, 0.3488])\n",
      "tensor([3.1599, 0.0375])\n",
      "tensor([3.2877, 0.4932])\n",
      "tensor([3.3197, 0.1805])\n",
      "tensor([2.6205, 0.4607])\n",
      "tensor([0.9417, 0.2748])\n",
      "tensor([1.8472, 0.2209])\n",
      "tensor([3.3181, 0.2340])\n",
      "tensor([2.3739, 0.3069])\n",
      "tensor([0.5993, 0.1000])\n",
      "tensor([1.6544, 0.4253])\n",
      "tensor([1.0929, 0.2648])\n",
      "tensor([3.3838, 0.2205])\n",
      "tensor([3.2290, 0.2990])\n",
      "tensor([0.9156, 0.0295])\n",
      "tensor([0.6356, 0.0373])\n",
      "tensor([2.6269, 0.0704])\n",
      "tensor([2.0361, 0.2565])\n",
      "tensor([2.7448, 0.0949])\n",
      "tensor([1.1999, 0.1523])\n",
      "tensor([1.4822, 0.1429])\n",
      "tensor([3.4822, 0.4137])\n",
      "tensor([1.5125, 0.3548])\n",
      "tensor([1.9394, 0.1050])\n",
      "tensor([2.4819, 0.4913])\n",
      "tensor([2.2315, 0.4662])\n",
      "tensor([2.5402, 0.2350])\n",
      "tensor([3.3420, 0.0103])\n",
      "tensor([1.9848, 0.1196])\n",
      "tensor([2.5810, 0.4944])\n",
      "tensor([1.0615, 0.1469])\n",
      "tensor([2.4039, 0.3110])\n",
      "tensor([2.2885, 0.1065])\n",
      "tensor([0.8806, 0.3418])\n",
      "tensor([1.4538, 0.1424])\n",
      "tensor([0.7363, 0.4135])\n",
      "tensor([1.8956, 0.0984])\n",
      "tensor([2.2902, 0.0068])\n",
      "tensor([2.2893, 0.0057])\n",
      "tensor([2.5474, 0.2155])\n",
      "tensor([1.1197, 0.2094])\n",
      "tensor([2.5055, 0.3677])\n",
      "tensor([1.2870, 0.3130])\n",
      "tensor([2.1287, 0.0977])\n",
      "tensor([0.7052, 0.4936])\n",
      "tensor([3.0194e+00, 1.2267e-03])\n",
      "tensor([0.5271, 0.0271])\n",
      "tensor([1.5725, 0.3699])\n",
      "tensor([3.2617, 0.2532])\n",
      "tensor([2.6957, 0.0101])\n",
      "tensor([1.0308, 0.4335])\n",
      "tensor([3.1757, 0.2219])\n",
      "tensor([2.0279, 0.3960])\n",
      "tensor([3.3058, 0.3950])\n",
      "tensor([2.0223, 0.4096])\n",
      "tensor([1.5907, 0.4724])\n",
      "tensor([2.0713, 0.2692])\n",
      "tensor([3.1659, 0.1229])\n",
      "tensor([1.7907, 0.0848])\n",
      "tensor([1.1508, 0.4460])\n",
      "tensor([1.1606, 0.3748])\n",
      "tensor([2.0454, 0.3639])\n",
      "tensor([3.0440, 0.0136])\n",
      "tensor([2.1140, 0.4945])\n",
      "tensor([2.3557, 0.0451])\n",
      "tensor([1.4334, 0.2319])\n",
      "tensor([2.1094, 0.3725])\n",
      "tensor([1.6068, 0.4673])\n",
      "tensor([0.5887, 0.2949])\n",
      "tensor([2.8548, 0.4212])\n",
      "tensor([1.1723, 0.2961])\n",
      "tensor([3.2729, 0.2636])\n",
      "tensor([0.9435, 0.0569])\n",
      "tensor([1.8346, 0.1190])\n",
      "tensor([2.0247, 0.2940])\n",
      "tensor([1.5021, 0.1926])\n",
      "tensor([1.4249, 0.1789])\n",
      "tensor([1.5180, 0.3940])\n",
      "tensor([0.6356, 0.2476])\n",
      "tensor([1.5226, 0.2081])\n",
      "tensor([0.8668, 0.1448])\n",
      "tensor([2.8955, 0.3624])\n",
      "tensor([3.4017, 0.1725])\n",
      "tensor([1.0179, 0.1961])\n",
      "tensor([2.5625, 0.2583])\n",
      "tensor([1.8186, 0.4049])\n",
      "tensor([2.5846, 0.3224])\n",
      "tensor([2.3982, 0.3419])\n",
      "tensor([2.3969, 0.4506])\n",
      "tensor([1.7882, 0.4800])\n",
      "tensor([2.4302, 0.0418])\n",
      "tensor([1.5672, 0.2503])\n",
      "tensor([0.8843, 0.1683])\n",
      "tensor([1.4365, 0.3788])\n",
      "tensor([1.0816, 0.3384])\n",
      "tensor([1.3511, 0.2797])\n",
      "tensor([1.3922, 0.3630])\n",
      "tensor([2.9120, 0.0772])\n",
      "tensor([2.6370, 0.2660])\n",
      "tensor([2.6860, 0.4075])\n",
      "tensor([3.2169, 0.4398])\n",
      "tensor([3.3200, 0.0295])\n",
      "tensor([2.0538, 0.2795])\n",
      "tensor([2.5100, 0.0739])\n",
      "tensor([1.1066, 0.3993])\n",
      "tensor([2.9558, 0.0215])\n",
      "tensor([3.2184, 0.3625])\n",
      "tensor([1.8750, 0.1190])\n",
      "tensor([2.3477, 0.3754])\n",
      "tensor([3.2592, 0.1516])\n",
      "tensor([3.0267, 0.4165])\n",
      "tensor([0.5266, 0.3384])\n",
      "tensor([0.7849, 0.4336])\n",
      "tensor([3.3411, 0.0565])\n",
      "tensor([3.3732, 0.0466])\n",
      "tensor([1.9900, 0.4148])\n",
      "tensor([0.7549, 0.3471])\n",
      "tensor([2.4628, 0.0406])\n",
      "tensor([1.6968, 0.1543])\n",
      "tensor([2.6789, 0.0355])\n",
      "tensor([3.1755, 0.0925])\n",
      "tensor([3.1612, 0.4436])\n",
      "tensor([1.2576, 0.3529])\n",
      "tensor([0.6249, 0.4992])\n",
      "tensor([3.1476, 0.2087])\n",
      "tensor([2.1671, 0.4395])\n",
      "tensor([0.7616, 0.0613])\n",
      "tensor([1.9604, 0.3138])\n",
      "tensor([2.7846, 0.3936])\n",
      "tensor([3.0508, 0.2807])\n",
      "tensor([0.8330, 0.0989])\n",
      "tensor([3.1192, 0.4772])\n",
      "tensor([1.7735, 0.1861])\n",
      "tensor([1.1990, 0.3553])\n",
      "tensor([0.9581, 0.2682])\n",
      "tensor([2.2623, 0.1979])\n",
      "tensor([1.0309, 0.2010])\n",
      "tensor([2.0173, 0.3644])\n",
      "tensor([2.6486, 0.2168])\n",
      "tensor([0.5153, 0.1407])\n",
      "tensor([1.6246, 0.3163])\n",
      "tensor([0.5404, 0.0700])\n",
      "tensor([3.4337, 0.1154])\n",
      "tensor([1.7474, 0.0145])\n",
      "tensor([2.8698, 0.4866])\n",
      "tensor([1.7220, 0.2617])\n",
      "tensor([2.3843, 0.2315])\n",
      "tensor([1.1652, 0.4055])\n",
      "tensor([1.7878, 0.0651])\n",
      "tensor([0.6281, 0.2646])\n",
      "tensor([2.4846, 0.2838])\n",
      "tensor([1.8685, 0.3860])\n",
      "tensor([0.9691, 0.2908])\n",
      "tensor([1.5403, 0.0603])\n",
      "tensor([2.9740, 0.3478])\n",
      "tensor([2.2597, 0.4843])\n",
      "tensor([1.1943, 0.4465])\n",
      "tensor([2.8117, 0.4121])\n",
      "tensor([3.1834, 0.4856])\n",
      "tensor([3.0946, 0.2917])\n",
      "tensor([0.8602, 0.0426])\n",
      "tensor([1.0045, 0.4162])\n",
      "tensor([1.5133, 0.2409])\n",
      "tensor([1.7341, 0.1261])\n",
      "tensor([0.6246, 0.3039])\n",
      "tensor([2.1349, 0.3184])\n",
      "tensor([1.4372, 0.2583])\n",
      "tensor([0.8340, 0.4497])\n",
      "tensor([0.8933, 0.2435])\n",
      "tensor([2.7023, 0.1256])\n",
      "tensor([1.1694, 0.1318])\n",
      "tensor([1.2916, 0.3212])\n",
      "tensor([1.0462, 0.4314])\n",
      "tensor([3.2026, 0.2467])\n",
      "tensor([2.7899, 0.4322])\n",
      "tensor([2.3532, 0.2396])\n",
      "tensor([1.7782, 0.2048])\n",
      "tensor([2.5228, 0.0934])\n",
      "tensor([3.4758, 0.1760])\n",
      "tensor([2.5068, 0.1912])\n",
      "tensor([1.2199, 0.4314])\n",
      "tensor([2.9412, 0.4494])\n",
      "tensor([3.2088, 0.2201])\n",
      "tensor([0.8891, 0.4907])\n",
      "tensor([2.5972, 0.4564])\n",
      "tensor([1.8860, 0.4082])\n",
      "tensor([1.3735, 0.1216])\n",
      "tensor([3.4009, 0.2612])\n",
      "tensor([1.2488, 0.3821])\n",
      "tensor([2.6765, 0.0494])\n",
      "tensor([3.4206, 0.1264])\n",
      "tensor([1.3862, 0.2018])\n",
      "tensor([3.2879, 0.0803])\n",
      "tensor([3.0539, 0.0385])\n",
      "tensor([3.0222, 0.4248])\n",
      "tensor([0.7325, 0.4013])\n",
      "tensor([0.8994, 0.4270])\n",
      "tensor([0.8847, 0.0212])\n",
      "tensor([2.2598, 0.1937])\n",
      "tensor([1.4144, 0.4110])\n",
      "tensor([1.1526, 0.2826])\n",
      "tensor([0.6780, 0.0518])\n",
      "tensor([1.3236, 0.4913])\n",
      "tensor([1.3354, 0.0247])\n",
      "tensor([2.0326, 0.1794])\n",
      "tensor([1.1859, 0.2373])\n",
      "tensor([1.5549, 0.1269])\n",
      "tensor([3.1680, 0.3073])\n",
      "tensor([0.7806, 0.3299])\n",
      "tensor([3.0266, 0.3799])\n",
      "tensor([3.1467, 0.4410])\n",
      "tensor([1.9549, 0.1025])\n",
      "tensor([0.6978, 0.1735])\n",
      "tensor([1.4555, 0.0990])\n",
      "tensor([1.1918, 0.4802])\n",
      "tensor([0.6394, 0.4086])\n",
      "tensor([2.8167, 0.4360])\n",
      "tensor([3.3881, 0.1543])\n",
      "tensor([3.2225, 0.0730])\n",
      "tensor([2.5634, 0.0318])\n",
      "tensor([2.8013, 0.4157])\n",
      "tensor([2.8721, 0.3524])\n",
      "tensor([1.4210, 0.0902])\n",
      "tensor([0.6763, 0.4246])\n",
      "tensor([1.2052, 0.0549])\n",
      "tensor([1.2399, 0.0266])\n",
      "tensor([1.2584, 0.4644])\n",
      "tensor([2.4042, 0.4447])\n",
      "tensor([2.8227, 0.4919])\n",
      "tensor([1.1392, 0.2537])\n",
      "tensor([2.0713, 0.3527])\n",
      "tensor([3.3656, 0.1187])\n",
      "tensor([2.0507, 0.4314])\n",
      "tensor([1.1097, 0.0627])\n",
      "tensor([1.1322, 0.1521])\n",
      "tensor([1.8449, 0.2228])\n",
      "tensor([3.4991, 0.3452])\n",
      "tensor([0.8191, 0.0464])\n",
      "tensor([0.9651, 0.3872])\n",
      "tensor([0.6053, 0.3438])\n",
      "tensor([1.0067, 0.2089])\n",
      "tensor([1.2461, 0.4754])\n",
      "tensor([1.4652, 0.2288])\n",
      "tensor([1.5997, 0.2590])\n",
      "tensor([2.0578, 0.0322])\n",
      "tensor([1.3791, 0.4131])\n",
      "tensor([2.2712, 0.4732])\n",
      "tensor([2.3099, 0.0419])\n",
      "tensor([2.3270, 0.2603])\n",
      "tensor([2.7042, 0.4504])\n",
      "tensor([0.5845, 0.4687])\n",
      "tensor([1.2168, 0.1219])\n",
      "tensor([2.8087, 0.2084])\n",
      "tensor([0.9368, 0.1309])\n",
      "tensor([1.1045, 0.1309])\n",
      "tensor([2.4825, 0.0631])\n",
      "tensor([2.5195, 0.0452])\n",
      "tensor([2.9667, 0.4246])\n",
      "tensor([1.8030, 0.4128])\n",
      "tensor([2.5433, 0.3133])\n",
      "tensor([3.2647, 0.3037])\n",
      "tensor([3.4303, 0.0178])\n",
      "tensor([3.0313, 0.0496])\n",
      "tensor([0.6526, 0.4275])\n",
      "tensor([3.1231, 0.3259])\n",
      "tensor([2.7086, 0.2935])\n",
      "tensor([2.6517, 0.0917])\n",
      "tensor([3.3229, 0.2474])\n",
      "tensor([0.5341, 0.4123])\n",
      "tensor([1.6656, 0.1595])\n",
      "tensor([1.8458, 0.2374])\n",
      "tensor([3.4923, 0.4904])\n",
      "tensor([2.9937, 0.2920])\n",
      "tensor([3.2183, 0.1668])\n",
      "tensor([2.3473, 0.3440])\n",
      "tensor([2.6808, 0.1753])\n",
      "tensor([3.3415, 0.3835])\n",
      "tensor([2.2740, 0.1949])\n",
      "tensor([1.6542, 0.3484])\n",
      "tensor([0.5490, 0.4273])\n",
      "tensor([1.1921, 0.1886])\n",
      "tensor([3.4154, 0.3197])\n",
      "tensor([3.0225, 0.0155])\n",
      "tensor([3.0121, 0.1574])\n",
      "tensor([2.5889, 0.1116])\n",
      "tensor([1.3393, 0.2416])\n",
      "tensor([1.7149, 0.1258])\n",
      "tensor([3.3508, 0.4636])\n",
      "tensor([3.2178, 0.4633])\n",
      "tensor([2.5304, 0.4708])\n",
      "tensor([2.4520, 0.1586])\n",
      "tensor([0.6921, 0.4205])\n",
      "tensor([3.4200, 0.4196])\n",
      "tensor([1.3371, 0.1873])\n",
      "tensor([2.0640, 0.4927])\n",
      "tensor([1.3664, 0.2208])\n",
      "tensor([1.0477, 0.4623])\n",
      "tensor([1.3375, 0.3145])\n",
      "tensor([2.9534, 0.3748])\n",
      "tensor([2.9517, 0.0959])\n",
      "tensor([2.1375, 0.2634])\n",
      "tensor([1.5727, 0.1771])\n",
      "tensor([1.1596, 0.1716])\n",
      "tensor([1.7320, 0.2294])\n",
      "tensor([0.5686, 0.4008])\n",
      "tensor([3.0037, 0.3666])\n",
      "tensor([0.6783, 0.3374])\n",
      "tensor([0.6046, 0.1584])\n",
      "tensor([2.3764, 0.4860])\n",
      "tensor([2.5732, 0.4314])\n",
      "tensor([2.6747, 0.4237])\n",
      "tensor([2.3184, 0.1892])\n",
      "tensor([0.6556, 0.2874])\n",
      "tensor([1.4523, 0.2308])\n",
      "tensor([3.4270, 0.0518])\n",
      "tensor([0.9191, 0.1334])\n",
      "tensor([2.7743, 0.0863])\n",
      "tensor([1.6570, 0.0275])\n",
      "tensor([0.5522, 0.3194])\n",
      "tensor([1.9937, 0.1466])\n",
      "tensor([2.3158, 0.2642])\n",
      "tensor([1.7379, 0.1174])\n",
      "tensor([1.0410, 0.4961])\n",
      "tensor([3.0526, 0.0630])\n",
      "tensor([0.9555, 0.2683])\n",
      "tensor([2.3789, 0.3348])\n",
      "tensor([1.9002, 0.2350])\n",
      "tensor([1.0297, 0.3174])\n",
      "tensor([2.6794, 0.3327])\n",
      "tensor([2.5949, 0.1352])\n",
      "tensor([2.6416, 0.1875])\n",
      "tensor([1.9064, 0.1942])\n",
      "tensor([1.5710, 0.1638])\n",
      "tensor([0.5632, 0.4653])\n",
      "tensor([2.0760, 0.3209])\n",
      "tensor([2.0556, 0.1752])\n",
      "tensor([0.7704, 0.2515])\n",
      "tensor([2.5111, 0.0872])\n",
      "tensor([2.9240, 0.4938])\n",
      "tensor([0.7150, 0.3176])\n",
      "tensor([1.5877, 0.0121])\n",
      "tensor([0.7631, 0.1712])\n",
      "tensor([0.8119, 0.2778])\n",
      "tensor([2.3298, 0.1848])\n",
      "tensor([2.8744, 0.0207])\n",
      "tensor([0.9749, 0.0740])\n",
      "tensor([1.9756, 0.0780])\n",
      "tensor([2.6646, 0.0359])\n",
      "tensor([1.4983, 0.2083])\n",
      "tensor([1.7238, 0.0496])\n",
      "tensor([2.9851, 0.3826])\n",
      "tensor([2.8324, 0.2796])\n",
      "tensor([0.9672, 0.3296])\n",
      "tensor([2.8301, 0.0691])\n",
      "tensor([2.7304, 0.1857])\n",
      "tensor([0.8810, 0.1792])\n",
      "tensor([1.4738, 0.1365])\n",
      "tensor([2.6719, 0.3276])\n",
      "tensor([1.8348, 0.2140])\n",
      "tensor([0.7690, 0.0691])\n",
      "tensor([1.8178, 0.1247])\n",
      "tensor([0.7843, 0.3588])\n",
      "tensor([2.0003, 0.3693])\n",
      "tensor([1.5261, 0.2108])\n",
      "tensor([1.6269, 0.4092])\n",
      "tensor([1.2445, 0.0806])\n",
      "tensor([2.1386, 0.2473])\n",
      "tensor([3.1943, 0.4801])\n",
      "tensor([1.8464, 0.1477])\n",
      "tensor([1.9983, 0.3466])\n",
      "tensor([2.0874, 0.1143])\n",
      "tensor([3.1327, 0.4091])\n",
      "tensor([0.6867, 0.1115])\n",
      "tensor([0.5605, 0.2102])\n",
      "tensor([1.4210, 0.1547])\n",
      "tensor([1.6690, 0.4212])\n",
      "tensor([3.3750, 0.1180])\n",
      "tensor([2.4251, 0.3565])\n",
      "tensor([0.7115, 0.1505])\n",
      "tensor([1.6388, 0.3186])\n",
      "tensor([2.2554, 0.4584])\n",
      "tensor([1.6260, 0.1586])\n",
      "tensor([1.5544, 0.0860])\n",
      "tensor([2.1348, 0.4227])\n",
      "tensor([2.6743, 0.2929])\n",
      "tensor([0.6914, 0.0357])\n",
      "tensor([2.7386, 0.1818])\n",
      "tensor([3.0820, 0.2192])\n",
      "tensor([1.8764, 0.4773])\n",
      "tensor([3.0126, 0.0317])\n",
      "tensor([1.3769, 0.1001])\n",
      "tensor([1.0714, 0.2179])\n",
      "tensor([1.2753, 0.2534])\n",
      "tensor([2.6686, 0.3956])\n",
      "tensor([0.9430, 0.2927])\n",
      "tensor([0.8793, 0.3127])\n",
      "tensor([2.6517, 0.2359])\n",
      "tensor([1.0317, 0.3891])\n",
      "tensor([3.2706, 0.0388])\n",
      "tensor([3.3492, 0.3949])\n",
      "tensor([2.6407, 0.4190])\n",
      "tensor([1.7756, 0.1864])\n",
      "tensor([2.5509, 0.1205])\n",
      "tensor([1.9690, 0.4883])\n",
      "tensor([2.5367, 0.2491])\n",
      "tensor([2.4965, 0.0371])\n",
      "tensor([1.9401, 0.0243])\n",
      "tensor([2.8976, 0.3561])\n",
      "tensor([3.1550, 0.3072])\n",
      "tensor([2.9596, 0.2915])\n",
      "tensor([1.1581, 0.1415])\n",
      "tensor([1.0334, 0.1508])\n",
      "tensor([2.6024, 0.3425])\n",
      "tensor([3.2424, 0.0666])\n",
      "tensor([1.0287, 0.0089])\n",
      "tensor([1.3375, 0.2983])\n",
      "tensor([1.6389, 0.2303])\n",
      "tensor([2.9041, 0.0728])\n",
      "tensor([1.1369, 0.1014])\n",
      "tensor([1.7524, 0.3565])\n",
      "tensor([0.5524, 0.0554])\n",
      "tensor([2.6169, 0.1646])\n",
      "tensor([3.0144, 0.4547])\n",
      "tensor([2.1477, 0.0188])\n",
      "tensor([2.4200, 0.4466])\n",
      "tensor([1.0787, 0.2880])\n",
      "tensor([0.5199, 0.1824])\n",
      "tensor([0.7303, 0.1423])\n",
      "tensor([2.3625, 0.1191])\n",
      "tensor([1.8839, 0.2051])\n",
      "tensor([2.2021, 0.3947])\n",
      "tensor([0.6785, 0.2022])\n",
      "tensor([1.7489, 0.4495])\n",
      "tensor([1.5210, 0.0588])\n",
      "tensor([0.9443, 0.1501])\n",
      "tensor([2.7727, 0.3073])\n",
      "tensor([1.1138, 0.4316])\n",
      "tensor([3.4993, 0.4477])\n",
      "tensor([1.5624, 0.1516])\n",
      "tensor([3.4269, 0.4358])\n",
      "tensor([0.6615, 0.3738])\n",
      "tensor([2.1832, 0.0999])\n",
      "tensor([2.4994, 0.3476])\n",
      "tensor([2.1755, 0.4383])\n",
      "tensor([2.7288, 0.3241])\n",
      "tensor([2.8230, 0.3043])\n",
      "tensor([1.7448, 0.3881])\n",
      "tensor([1.5995, 0.4223])\n",
      "tensor([2.5741, 0.2691])\n",
      "tensor([0.9324, 0.1327])\n",
      "tensor([1.7922, 0.3471])\n",
      "tensor([2.7842, 0.1322])\n",
      "tensor([2.3857, 0.4730])\n",
      "tensor([1.7435, 0.4645])\n",
      "tensor([1.0044, 0.4650])\n",
      "tensor([0.7535, 0.1750])\n",
      "tensor([3.0698, 0.2680])\n",
      "tensor([1.5894, 0.3711])\n",
      "tensor([2.1310, 0.4470])\n",
      "tensor([3.4899, 0.2701])\n",
      "tensor([2.6426, 0.0567])\n",
      "tensor([1.1688, 0.3334])\n",
      "tensor([1.4782, 0.0782])\n",
      "tensor([3.3090, 0.3757])\n",
      "tensor([2.3667, 0.2536])\n",
      "tensor([2.7864, 0.2908])\n",
      "tensor([3.0877, 0.2212])\n",
      "tensor([2.1107, 0.2478])\n",
      "tensor([1.4550, 0.0892])\n",
      "tensor([0.5226, 0.4327])\n",
      "tensor([1.4409, 0.1473])\n",
      "tensor([2.1174, 0.4926])\n",
      "tensor([1.4649, 0.0662])\n",
      "tensor([2.9475, 0.0916])\n",
      "tensor([0.8833, 0.0384])\n",
      "tensor([3.2662, 0.2459])\n",
      "tensor([2.9913, 0.4008])\n",
      "tensor([1.9618, 0.1845])\n",
      "tensor([1.8425, 0.0304])\n",
      "tensor([2.0082, 0.3528])\n",
      "tensor([0.9815, 0.1506])\n",
      "tensor([3.2209, 0.3190])\n",
      "tensor([2.5423, 0.3920])\n",
      "tensor([2.0053, 0.4020])\n",
      "tensor([3.1842, 0.0177])\n",
      "tensor([2.2759, 0.2075])\n",
      "tensor([2.9379, 0.1122])\n",
      "tensor([0.8383, 0.2710])\n",
      "tensor([2.8945, 0.2227])\n",
      "tensor([1.8168, 0.1630])\n",
      "tensor([1.3308, 0.2439])\n",
      "tensor([1.0676, 0.1433])\n",
      "tensor([2.3845, 0.0565])\n",
      "tensor([1.6138, 0.4205])\n",
      "tensor([2.8904, 0.0344])\n",
      "tensor([1.2871, 0.0614])\n",
      "tensor([1.4303, 0.4812])\n",
      "tensor([2.8189, 0.2047])\n",
      "tensor([3.4936, 0.4568])\n",
      "tensor([2.3805, 0.4312])\n",
      "tensor([0.9017, 0.3721])\n",
      "tensor([0.6198, 0.1703])\n",
      "tensor([1.2816, 0.4258])\n",
      "tensor([2.5208, 0.1045])\n",
      "tensor([2.3391, 0.4492])\n",
      "tensor([2.3408, 0.2785])\n",
      "tensor([3.1637, 0.4999])\n",
      "tensor([2.0886, 0.4704])\n",
      "tensor([2.6398, 0.4378])\n",
      "tensor([0.7326, 0.1061])\n",
      "tensor([2.3718, 0.2879])\n",
      "tensor([1.9880, 0.3951])\n",
      "tensor([1.6077, 0.4618])\n",
      "tensor([1.9181, 0.1278])\n",
      "tensor([0.7872, 0.3515])\n",
      "tensor([1.8757, 0.1974])\n",
      "tensor([1.2754, 0.1562])\n",
      "tensor([0.5438, 0.4755])\n",
      "tensor([1.6514, 0.2759])\n",
      "tensor([0.8773, 0.3957])\n",
      "tensor([2.6167, 0.4732])\n",
      "tensor([0.6594, 0.4012])\n",
      "tensor([2.7790, 0.2017])\n",
      "tensor([2.6177, 0.1582])\n",
      "tensor([2.9727, 0.0844])\n",
      "tensor([1.0509, 0.2878])\n",
      "tensor([2.3346, 0.1293])\n",
      "tensor([3.3622, 0.0798])\n",
      "tensor([2.3702, 0.2945])\n",
      "tensor([3.0933, 0.4592])\n",
      "tensor([1.2428, 0.4657])\n",
      "tensor([1.5924e+00, 1.4086e-03])\n",
      "tensor([2.4522, 0.4332])\n",
      "tensor([2.9637, 0.0535])\n",
      "tensor([2.3407, 0.0157])\n",
      "tensor([2.3496, 0.3424])\n",
      "tensor([0.5782, 0.2109])\n",
      "tensor([2.1785, 0.4220])\n",
      "tensor([2.8949, 0.4930])\n",
      "tensor([1.0239, 0.2675])\n",
      "tensor([1.8293, 0.4771])\n",
      "tensor([2.8655, 0.3415])\n",
      "tensor([3.2534, 0.0477])\n",
      "tensor([1.7408, 0.3267])\n",
      "tensor([3.1414, 0.2264])\n",
      "tensor([3.3627, 0.4308])\n"
     ]
    }
   ],
   "source": [
    "N = 5000  # number of simulations\n",
    "output=[]\n",
    "thetas = prior.sample((N,))\n",
    "for theta in thetas:\n",
    "    #print(theta)\n",
    "    trace = run_model(theta,t,X0)+np.random.normal(0, 0.5, size=(len(t), 2))\n",
    "    output.append(trace)\n",
    "output = np.stack(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bf5cc10-e171-4b08-9e1d-2ccd0d2d58bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# contains_no_nan = np.invert(np.any(np.isnan(output), axis=2))\n",
    "# thetas_train = thetas[contains_no_nan]\n",
    "# output_train = output[contains_no_nan]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "58588c0f-29b6-4203-b02a-53148fb562ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "thetas_torch = torch.as_tensor(thetas, dtype=torch.float32)\n",
    "output_torch = torch.as_tensor(output, dtype=torch.float32)\n",
    "output_torch=output_torch[:,:]\n",
    "thetas_torch=thetas_torch[:,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e5a87736-c166-4a05-a9c5-93d7054d44d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Neural network successfully converged after 112 epochs."
     ]
    }
   ],
   "source": [
    "inference = SNPE(prior)\n",
    "_ = inference.append_simulations(thetas_torch, output_torch.reshape((5000,2000))).train()\n",
    "#posterior = inference.build_posterior()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e20e4bea-c0f8-43ad-a484-2d9c3bf77e9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "posterior = inference.build_posterior()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6b24f79-79c6-4547-b5ae-ff4ebb83559b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b28304a1-737b-4be6-9fb7-4d0f5fac2fa7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1d2d59e1-3ff4-4375-b2dc-ced2de9beeb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cfe07e5a4fee45e484f69f71e8a37c6e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "samples = posterior.sample((10000,), x=observed_data.reshape((1,2000)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "71fa32f7-8c68-44b7-b248-8474ff4b67fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, out = pairplot(samples, limits=[[1.90,2.1],[0.19,0.21]], fig_kwargs={'fig_size':(2,2)}, upper='kde', diag='kde')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d0421f1b-4144-4cdb-a65c-6281d6f3c3a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[1.9898, 0.2003],\n",
       "        [1.9902, 0.1997],\n",
       "        [2.0066, 0.2012],\n",
       "        ...,\n",
       "        [2.0033, 0.2014],\n",
       "        [2.0049, 0.1990],\n",
       "        [1.9907, 0.2008]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "992486f7-e023-4f2f-8649-19cd4c0d8491",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ray_cluster",
   "language": "python",
   "name": "ray_cluster"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
